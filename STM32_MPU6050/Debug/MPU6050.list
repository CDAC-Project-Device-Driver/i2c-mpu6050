
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08007770  08007770  00008770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c44  08007c44  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c44  08007c44  00008c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c4c  08007c4c  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c4c  08007c4c  00008c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007c54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000244  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c784  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f5  00000000  00000000  00015988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  00017b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000884  00000000  00000000  00018688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d7e  00000000  00000000  00018f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e546  00000000  00000000  0003ac8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c731b  00000000  00000000  000491d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001104eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d20  00000000  00000000  00110530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00114250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007754 	.word	0x08007754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007754 	.word	0x08007754

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_GPIO_Init+0x70>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <MX_GPIO_Init+0x70>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_GPIO_Init+0x70>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_GPIO_Init+0x70>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <MX_GPIO_Init+0x70>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <MX_GPIO_Init+0x70>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <MX_GPIO_Init+0x74>)
 8000fd6:	f000 ffef 	bl	8001fb8 <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020400 	.word	0x40020400

08000fec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_I2C1_Init+0x50>)
 8000ff2:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <MX_I2C1_Init+0x54>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_I2C1_Init+0x50>)
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <MX_I2C1_Init+0x58>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_I2C1_Init+0x50>)
 800100a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_I2C1_Init+0x50>)
 800102a:	f001 f979 	bl	8002320 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 f95e 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001f0 	.word	0x200001f0
 8001040:	40005400 	.word	0x40005400
 8001044:	00061a80 	.word	0x00061a80

08001048 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <HAL_I2C_MspInit+0x84>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12b      	bne.n	80010c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001086:	23c0      	movs	r3, #192	@ 0xc0
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108a:	2312      	movs	r3, #18
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001096:	2304      	movs	r3, #4
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <HAL_I2C_MspInit+0x8c>)
 80010a2:	f000 ff89 	bl	8001fb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	@ 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400

080010d8 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file , uint8_t* p,int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit(&huart2, p, len, len)==HAL_OK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	4806      	ldr	r0, [pc, #24]	@ (8001108 <_write+0x30>)
 80010ee:	f002 fe23 	bl	8003d38 <HAL_UART_Transmit>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <_write+0x24>
		return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	e000      	b.n	80010fe <_write+0x26>
	return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000280 	.word	0x20000280

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001114:	f000 fd16 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001118:	f000 f864 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111c:	f7ff ff2a 	bl	8000f74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001120:	f7ff ff64 	bl	8000fec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001124:	f000 fc6a 	bl	80019fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Initialization();
 8001128:	f000 f93c 	bl	80013a4 <MPU6050_Initialization>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(MPU6050_DataReady() == 1)
 800112c:	f000 fb2e 	bl	800178c <MPU6050_DataReady>
 8001130:	4603      	mov	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d148      	bne.n	80011c8 <main+0xbc>
	  		{
	  			MPU6050_ProcessData(&MPU6050);
 8001136:	4827      	ldr	r0, [pc, #156]	@ (80011d4 <main+0xc8>)
 8001138:	f000 fb34 	bl	80017a4 <MPU6050_ProcessData>
	  			//printf("%f, %f, %f\n", MPU6050.acc_x, MPU6050.acc_y, MPU6050.acc_z);
	  			//printf("%f, %f, %f\n", MPU6050.gyro_x, MPU6050.gyro_y, MPU6050.gyro_z);
	  			printf("Accelerometer x = %f, y=%f, z=%f\r\n", MPU6050.acc_x, MPU6050.acc_y, MPU6050.acc_z);
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <main+0xc8>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4680      	mov	r8, r0
 8001148:	4689      	mov	r9, r1
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <main+0xc8>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9fa 	bl	8000548 <__aeabi_f2d>
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <main+0xc8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800116a:	e9cd 4500 	strd	r4, r5, [sp]
 800116e:	4642      	mov	r2, r8
 8001170:	464b      	mov	r3, r9
 8001172:	4819      	ldr	r0, [pc, #100]	@ (80011d8 <main+0xcc>)
 8001174:	f004 fb14 	bl	80057a0 <iprintf>
	  			printf("Gyrometer x = %f , gyro y =%f gyro z = %f\r\n",MPU6050.gyro_x,MPU6050.gyro_y,MPU6050.gyro_z);
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <main+0xc8>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9e3 	bl	8000548 <__aeabi_f2d>
 8001182:	4680      	mov	r8, r0
 8001184:	4689      	mov	r9, r1
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <main+0xc8>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9dc 	bl	8000548 <__aeabi_f2d>
 8001190:	4604      	mov	r4, r0
 8001192:	460d      	mov	r5, r1
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <main+0xc8>)
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9d5 	bl	8000548 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011a6:	e9cd 4500 	strd	r4, r5, [sp]
 80011aa:	4642      	mov	r2, r8
 80011ac:	464b      	mov	r3, r9
 80011ae:	480b      	ldr	r0, [pc, #44]	@ (80011dc <main+0xd0>)
 80011b0:	f004 faf6 	bl	80057a0 <iprintf>
	  			printf("Temparature = %f\r\n",MPU6050.temperature);
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <main+0xc8>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9c5 	bl	8000548 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <main+0xd4>)
 80011c4:	f004 faec 	bl	80057a0 <iprintf>
	  		}
	  HAL_Delay(1000);
 80011c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011cc:	f000 fd2c 	bl	8001c28 <HAL_Delay>
	  if(MPU6050_DataReady() == 1)
 80011d0:	e7ac      	b.n	800112c <main+0x20>
 80011d2:	bf00      	nop
 80011d4:	20000248 	.word	0x20000248
 80011d8:	08007770 	.word	0x08007770
 80011dc:	08007794 	.word	0x08007794
 80011e0:	080077c0 	.word	0x080077c0

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	@ 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fc1c 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <SystemClock_Config+0xcc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <SystemClock_Config+0xcc>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <SystemClock_Config+0xcc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <SystemClock_Config+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <SystemClock_Config+0xd0>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <SystemClock_Config+0xd0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001258:	2332      	movs	r3, #50	@ 0x32
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800125c:	2304      	movs	r3, #4
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001260:	2307      	movs	r3, #7
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f002 f87d 	bl	8003368 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001274:	f000 f83e 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fade 	bl	8003858 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012a2:	f000 f827 	bl	80012f4 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	@ 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HAL_UART_RxCpltCallback+0x2c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d107      	bne.n	80012da <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	4906      	ldr	r1, [pc, #24]	@ (80012e8 <HAL_UART_RxCpltCallback+0x30>)
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <HAL_UART_RxCpltCallback+0x34>)
 80012d0:	f002 fdbd 	bl	8003e4e <HAL_UART_Receive_IT>
		uart2_rx_flag = 1;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_UART_RxCpltCallback+0x38>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
	}
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004400 	.word	0x40004400
 80012e8:	20000244 	.word	0x20000244
 80012ec:	20000280 	.word	0x20000280
 80012f0:	20000245 	.word	0x20000245

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <MPU6050_Writebyte>:

static float LSB_Sensitivity_ACC;
static float LSB_Sensitivity_GYRO;

void MPU6050_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af04      	add	r7, sp, #16
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	4613      	mov	r3, r2
 800130e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &val, 1, 1);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	b29a      	uxth	r2, r3
 8001314:	2301      	movs	r3, #1
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2301      	movs	r3, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	1dbb      	adds	r3, r7, #6
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2301      	movs	r3, #1
 8001322:	21d0      	movs	r1, #208	@ 0xd0
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <MPU6050_Writebyte+0x34>)
 8001326:	f001 f93f 	bl	80025a8 <HAL_I2C_Mem_Write>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001f0 	.word	0x200001f0

08001338 <MPU6050_Readbyte>:
{
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
}

void MPU6050_Readbyte(uint8_t reg_addr, uint8_t* data)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af04      	add	r7, sp, #16
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, 1);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b29a      	uxth	r2, r3
 8001348:	2301      	movs	r3, #1
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	2301      	movs	r3, #1
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	21d0      	movs	r1, #208	@ 0xd0
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MPU6050_Readbyte+0x30>)
 800135a:	f001 fa1f 	bl	800279c <HAL_I2C_Mem_Read>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001f0 	.word	0x200001f0

0800136c <MPU6050_Readbytes>:

void MPU6050_Readbytes(uint8_t reg_addr, uint8_t len, uint8_t* data)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af04      	add	r7, sp, #16
 8001372:	4603      	mov	r3, r0
 8001374:	603a      	str	r2, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	460b      	mov	r3, r1
 800137a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 1);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	b29a      	uxth	r2, r3
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	b29b      	uxth	r3, r3
 8001384:	2101      	movs	r1, #1
 8001386:	9102      	str	r1, [sp, #8]
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	21d0      	movs	r1, #208	@ 0xd0
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <MPU6050_Readbytes+0x34>)
 8001394:	f001 fa02 	bl	800279c <HAL_I2C_Mem_Read>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f0 	.word	0x200001f0

080013a4 <MPU6050_Initialization>:

void MPU6050_Initialization(void)
{
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 80013aa:	2032      	movs	r0, #50	@ 0x32
 80013ac:	f000 fc3c 	bl	8001c28 <HAL_Delay>
	uint8_t who_am_i = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	707b      	strb	r3, [r7, #1]
	printf("Checking MPU6050...\n");
 80013b4:	484f      	ldr	r0, [pc, #316]	@ (80014f4 <MPU6050_Initialization+0x150>)
 80013b6:	f004 fa5b 	bl	8005870 <puts>

	MPU6050_Readbyte(MPU6050_WHO_AM_I, &who_am_i);
 80013ba:	1c7b      	adds	r3, r7, #1
 80013bc:	4619      	mov	r1, r3
 80013be:	2075      	movs	r0, #117	@ 0x75
 80013c0:	f7ff ffba 	bl	8001338 <MPU6050_Readbyte>
	if(who_am_i == 0x68)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b68      	cmp	r3, #104	@ 0x68
 80013c8:	d105      	bne.n	80013d6 <MPU6050_Initialization+0x32>
	{
		printf("MPU6050 who_am_i = 0x%02x...OK\n", who_am_i);
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	4619      	mov	r1, r3
 80013ce:	484a      	ldr	r0, [pc, #296]	@ (80014f8 <MPU6050_Initialization+0x154>)
 80013d0:	f004 f9e6 	bl	80057a0 <iprintf>
 80013d4:	e00f      	b.n	80013f6 <MPU6050_Initialization+0x52>
	}
	else
	{
		printf("ERROR!\n");
 80013d6:	4849      	ldr	r0, [pc, #292]	@ (80014fc <MPU6050_Initialization+0x158>)
 80013d8:	f004 fa4a 	bl	8005870 <puts>
		printf("MPU6050 who_am_i : 0x%02x should be 0x68\n", who_am_i);
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	4619      	mov	r1, r3
 80013e0:	4847      	ldr	r0, [pc, #284]	@ (8001500 <MPU6050_Initialization+0x15c>)
 80013e2:	f004 f9dd 	bl	80057a0 <iprintf>
		while(1)
		{
			printf("who am i error. Can not recognize mpu6050\n");
 80013e6:	4847      	ldr	r0, [pc, #284]	@ (8001504 <MPU6050_Initialization+0x160>)
 80013e8:	f004 fa42 	bl	8005870 <puts>
			HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f000 fc1b 	bl	8001c28 <HAL_Delay>
			printf("who am i error. Can not recognize mpu6050\n");
 80013f2:	bf00      	nop
 80013f4:	e7f7      	b.n	80013e6 <MPU6050_Initialization+0x42>
		}
	}

	//Reset the whole module before initialization
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x1<<7);
 80013f6:	2180      	movs	r1, #128	@ 0x80
 80013f8:	206b      	movs	r0, #107	@ 0x6b
 80013fa:	f7ff ff81 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(100);
 80013fe:	2064      	movs	r0, #100	@ 0x64
 8001400:	f000 fc12 	bl	8001c28 <HAL_Delay>

	//Power Management setting
	/* Default is sleep mode
	 * necessary to wake up MPU6050*/
	MPU6050_Writebyte(MPU6050_PWR_MGMT_1, 0x00);
 8001404:	2100      	movs	r1, #0
 8001406:	206b      	movs	r0, #107	@ 0x6b
 8001408:	f7ff ff7a 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 800140c:	2032      	movs	r0, #50	@ 0x32
 800140e:	f000 fc0b 	bl	8001c28 <HAL_Delay>

	//Sample rate divider
	/*Sample Rate = Gyroscope Output Rate / (1 + SMPRT_DIV) */
	//	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 0x00); // ACC output rate is 1kHz, GYRO output rate is 8kHz
	MPU6050_Writebyte(MPU6050_SMPRT_DIV, 39); // Sample Rate = 200Hz
 8001412:	2127      	movs	r1, #39	@ 0x27
 8001414:	2019      	movs	r0, #25
 8001416:	f7ff ff73 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f000 fc04 	bl	8001c28 <HAL_Delay>

	//FSYNC and DLPF setting
	/*DLPF is set to 0*/
	MPU6050_Writebyte(MPU6050_CONFIG, 0x00);
 8001420:	2100      	movs	r1, #0
 8001422:	201a      	movs	r0, #26
 8001424:	f7ff ff6c 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001428:	2032      	movs	r0, #50	@ 0x32
 800142a:	f000 fbfd 	bl	8001c28 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-250 degree/s
	  1		+-500 degree/s
	  2		+-1000 degree/s
	  3		+-2000 degree/s	*/
	uint8_t FS_SCALE_GYRO = 0x0;
 800142e:	2300      	movs	r3, #0
 8001430:	71fb      	strb	r3, [r7, #7]
	MPU6050_Writebyte(MPU6050_GYRO_CONFIG, FS_SCALE_GYRO<<3);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	201b      	movs	r0, #27
 800143c:	f7ff ff60 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001440:	2032      	movs	r0, #50	@ 0x32
 8001442:	f000 fbf1 	bl	8001c28 <HAL_Delay>
	/*FS_SEL  Full Scale Range
	  0    	+-2g
	  1		+-4g
	  2		+-8g
	  3		+-16g	*/
	uint8_t FS_SCALE_ACC = 0x0;
 8001446:	2300      	movs	r3, #0
 8001448:	71bb      	strb	r3, [r7, #6]
	MPU6050_Writebyte(MPU6050_ACCEL_CONFIG, FS_SCALE_ACC<<3);
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	201c      	movs	r0, #28
 8001454:	f7ff ff54 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 8001458:	2032      	movs	r0, #50	@ 0x32
 800145a:	f000 fbe5 	bl	8001c28 <HAL_Delay>

	MPU6050_Get_LSB_Sensitivity(FS_SCALE_GYRO, FS_SCALE_ACC);
 800145e:	79ba      	ldrb	r2, [r7, #6]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f8ad 	bl	80015c4 <MPU6050_Get_LSB_Sensitivity>
	printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO, LSB_Sensitivity_ACC);
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <MPU6050_Initialization+0x164>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f86a 	bl	8000548 <__aeabi_f2d>
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <MPU6050_Initialization+0x168>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f863 	bl	8000548 <__aeabi_f2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9cd 2300 	strd	r2, r3, [sp]
 800148a:	4622      	mov	r2, r4
 800148c:	462b      	mov	r3, r5
 800148e:	4820      	ldr	r0, [pc, #128]	@ (8001510 <MPU6050_Initialization+0x16c>)
 8001490:	f004 f986 	bl	80057a0 <iprintf>

	//Interrupt PIN setting
	uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 8001494:	2300      	movs	r3, #0
 8001496:	717b      	strb	r3, [r7, #5]
	uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 8001498:	2300      	movs	r3, #0
 800149a:	713b      	strb	r3, [r7, #4]
	uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 800149c:	2301      	movs	r3, #1
 800149e:	70fb      	strb	r3, [r7, #3]
	MPU6050_Writebyte(MPU6050_INT_PIN_CFG, (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4)); //
 80014a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014a4:	01db      	lsls	r3, r3, #7
 80014a6:	b25a      	sxtb	r2, r3
 80014a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	2037      	movs	r0, #55	@ 0x37
 80014c6:	f7ff ff1b 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 80014ca:	2032      	movs	r0, #50	@ 0x32
 80014cc:	f000 fbac 	bl	8001c28 <HAL_Delay>

	//Interrupt enable setting
	uint8_t DATA_RDY_EN = 0x1; // 1 - enable, 0 - disable
 80014d0:	2301      	movs	r3, #1
 80014d2:	70bb      	strb	r3, [r7, #2]
	MPU6050_Writebyte(MPU6050_INT_ENABLE, DATA_RDY_EN);
 80014d4:	78bb      	ldrb	r3, [r7, #2]
 80014d6:	4619      	mov	r1, r3
 80014d8:	2038      	movs	r0, #56	@ 0x38
 80014da:	f7ff ff11 	bl	8001300 <MPU6050_Writebyte>
	HAL_Delay(50);
 80014de:	2032      	movs	r0, #50	@ 0x32
 80014e0:	f000 fba2 	bl	8001c28 <HAL_Delay>

	printf("MPU6050 setting is finished\n");
 80014e4:	480b      	ldr	r0, [pc, #44]	@ (8001514 <MPU6050_Initialization+0x170>)
 80014e6:	f004 f9c3 	bl	8005870 <puts>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	080077d4 	.word	0x080077d4
 80014f8:	080077e8 	.word	0x080077e8
 80014fc:	08007808 	.word	0x08007808
 8001500:	08007810 	.word	0x08007810
 8001504:	0800783c 	.word	0x0800783c
 8001508:	20000278 	.word	0x20000278
 800150c:	20000274 	.word	0x20000274
 8001510:	08007868 	.word	0x08007868
 8001514:	0800789c 	.word	0x0800789c

08001518 <MPU6050_Get6AxisRawData>:
/*Get Raw Data from sensor*/
void MPU6050_Get6AxisRawData(Struct_MPU6050* mpu6050)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	MPU6050_Readbytes(MPU6050_ACCEL_XOUT_H, 14, data);
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	461a      	mov	r2, r3
 8001526:	210e      	movs	r1, #14
 8001528:	203b      	movs	r0, #59	@ 0x3b
 800152a:	f7ff ff1f 	bl	800136c <MPU6050_Readbytes>

	mpu6050->acc_x_raw = (data[0] << 8) | data[1];
 800152e:	7a3b      	ldrb	r3, [r7, #8]
 8001530:	b21b      	sxth	r3, r3
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7a7b      	ldrb	r3, [r7, #9]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	801a      	strh	r2, [r3, #0]
	mpu6050->acc_y_raw = (data[2] << 8) | data[3];
 8001542:	7abb      	ldrb	r3, [r7, #10]
 8001544:	b21b      	sxth	r3, r3
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	805a      	strh	r2, [r3, #2]
	mpu6050->acc_z_raw = (data[4] << 8) | data[5];
 8001556:	7b3b      	ldrb	r3, [r7, #12]
 8001558:	b21b      	sxth	r3, r3
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	7b7b      	ldrb	r3, [r7, #13]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21a      	sxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	809a      	strh	r2, [r3, #4]

	mpu6050->temperature_raw = (data[6] << 8) | data[7];
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	b21b      	sxth	r3, r3
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21a      	sxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	80da      	strh	r2, [r3, #6]

	mpu6050->gyro_x_raw = ((data[8] << 8) | data[9]);
 800157e:	7c3b      	ldrb	r3, [r7, #16]
 8001580:	b21b      	sxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	7c7b      	ldrb	r3, [r7, #17]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	811a      	strh	r2, [r3, #8]
	mpu6050->gyro_y_raw = ((data[10] << 8) | data[11]);
 8001592:	7cbb      	ldrb	r3, [r7, #18]
 8001594:	b21b      	sxth	r3, r3
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	815a      	strh	r2, [r3, #10]
	mpu6050->gyro_z_raw = ((data[12] << 8) | data[13]);
 80015a6:	7d3b      	ldrb	r3, [r7, #20]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7d7b      	ldrb	r3, [r7, #21]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	819a      	strh	r2, [r3, #12]
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <MPU6050_Get_LSB_Sensitivity>:

void MPU6050_Get_LSB_Sensitivity(uint8_t FS_SCALE_GYRO, uint8_t FS_SCALE_ACC)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
	switch(FS_SCALE_GYRO)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d81a      	bhi.n	8001610 <MPU6050_Get_LSB_Sensitivity+0x4c>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <MPU6050_Get_LSB_Sensitivity+0x1c>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	080015f9 	.word	0x080015f9
 80015e8:	08001601 	.word	0x08001601
 80015ec:	08001609 	.word	0x08001609
	{
	case 0:
		LSB_Sensitivity_GYRO = 131.f;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80015f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <MPU6050_Get_LSB_Sensitivity+0xa0>)
 80015f4:	601a      	str	r2, [r3, #0]
		break;
 80015f6:	e00b      	b.n	8001610 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 1:
		LSB_Sensitivity_GYRO = 65.5f;
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 80015fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <MPU6050_Get_LSB_Sensitivity+0xa4>)
 80015fc:	601a      	str	r2, [r3, #0]
		break;
 80015fe:	e007      	b.n	8001610 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 2:
		LSB_Sensitivity_GYRO = 32.8f;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 8001602:	4a1a      	ldr	r2, [pc, #104]	@ (800166c <MPU6050_Get_LSB_Sensitivity+0xa8>)
 8001604:	601a      	str	r2, [r3, #0]
		break;
 8001606:	e003      	b.n	8001610 <MPU6050_Get_LSB_Sensitivity+0x4c>
	case 3:
		LSB_Sensitivity_GYRO = 16.4f;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MPU6050_Get_LSB_Sensitivity+0x9c>)
 800160a:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <MPU6050_Get_LSB_Sensitivity+0xac>)
 800160c:	601a      	str	r2, [r3, #0]
		break;
 800160e:	bf00      	nop
	}
	switch(FS_SCALE_ACC)
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d81e      	bhi.n	8001654 <MPU6050_Get_LSB_Sensitivity+0x90>
 8001616:	a201      	add	r2, pc, #4	@ (adr r2, 800161c <MPU6050_Get_LSB_Sensitivity+0x58>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	0800162d 	.word	0x0800162d
 8001620:	08001637 	.word	0x08001637
 8001624:	08001641 	.word	0x08001641
 8001628:	0800164b 	.word	0x0800164b
	{
	case 0:
		LSB_Sensitivity_ACC = 16384.f;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800162e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001632:	601a      	str	r2, [r3, #0]
		break;
 8001634:	e00e      	b.n	8001654 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 1:
		LSB_Sensitivity_ACC = 8192.f;
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001638:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800163c:	601a      	str	r2, [r3, #0]
		break;
 800163e:	e009      	b.n	8001654 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 2:
		LSB_Sensitivity_ACC = 4096.f;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 8001642:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001646:	601a      	str	r2, [r3, #0]
		break;
 8001648:	e004      	b.n	8001654 <MPU6050_Get_LSB_Sensitivity+0x90>
	case 3:
		LSB_Sensitivity_ACC = 2048.f;
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MPU6050_Get_LSB_Sensitivity+0xb0>)
 800164c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001650:	601a      	str	r2, [r3, #0]
		break;
 8001652:	bf00      	nop
	}
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000278 	.word	0x20000278
 8001664:	43030000 	.word	0x43030000
 8001668:	42830000 	.word	0x42830000
 800166c:	42033333 	.word	0x42033333
 8001670:	41833333 	.word	0x41833333
 8001674:	20000274 	.word	0x20000274

08001678 <MPU6050_DataConvert>:

/*Convert Unit. acc_raw -> g, gyro_raw -> degree per second*/
void MPU6050_DataConvert(Struct_MPU6050* mpu6050)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	//printf("LSB_Sensitivity_GYRO: %f, LSB_Sensitivity_ACC: %f\n",LSB_Sensitivity_GYRO,LSB_Sensitivity_ACC);
	mpu6050->acc_x = mpu6050->acc_x_raw / LSB_Sensitivity_ACC;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168e:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <MPU6050_DataConvert+0x108>)
 8001690:	ed93 7a00 	vldr	s14, [r3]
 8001694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu6050->acc_y = mpu6050->acc_y_raw / LSB_Sensitivity_ACC;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <MPU6050_DataConvert+0x108>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu6050->acc_z = mpu6050->acc_z_raw / LSB_Sensitivity_ACC;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <MPU6050_DataConvert+0x108>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edc3 7a06 	vstr	s15, [r3, #24]

	mpu6050->temperature = (float)(mpu6050->temperature_raw)/340+36.53;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001784 <MPU6050_DataConvert+0x10c>
 80016ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016f0:	ee16 0a90 	vmov	r0, s13
 80016f4:	f7fe ff28 	bl	8000548 <__aeabi_f2d>
 80016f8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001778 <MPU6050_DataConvert+0x100>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe fdc5 	bl	800028c <__adddf3>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff fa4d 	bl	8000ba8 <__aeabi_d2f>
 800170e:	4602      	mov	r2, r0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	61da      	str	r2, [r3, #28]

	mpu6050->gyro_x = mpu6050->gyro_x_raw / LSB_Sensitivity_GYRO;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MPU6050_DataConvert+0x110>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu6050->gyro_y = mpu6050->gyro_y_raw / LSB_Sensitivity_GYRO;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MPU6050_DataConvert+0x110>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->gyro_z = mpu6050->gyro_z_raw / LSB_Sensitivity_GYRO;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <MPU6050_DataConvert+0x110>)
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0a3d70a4 	.word	0x0a3d70a4
 800177c:	404243d7 	.word	0x404243d7
 8001780:	20000274 	.word	0x20000274
 8001784:	43aa0000 	.word	0x43aa0000
 8001788:	20000278 	.word	0x20000278

0800178c <MPU6050_DataReady>:


int MPU6050_DataReady(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
			return 1;
		}
	}
	return 0;
	 */
	return HAL_GPIO_ReadPin(MPU6050_INT_PORT, MPU6050_INT_PIN);
 8001790:	2120      	movs	r1, #32
 8001792:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <MPU6050_DataReady+0x14>)
 8001794:	f000 fdac 	bl	80022f0 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40020400 	.word	0x40020400

080017a4 <MPU6050_ProcessData>:

void MPU6050_ProcessData(Struct_MPU6050* mpu6050)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	MPU6050_Get6AxisRawData(mpu6050);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff feb3 	bl	8001518 <MPU6050_Get6AxisRawData>
	MPU6050_DataConvert(mpu6050);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff ff60 	bl	8001678 <MPU6050_DataConvert>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <HAL_MspInit+0x4c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <HAL_MspInit+0x4c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017fe:	2007      	movs	r0, #7
 8001800:	f000 fb06 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <NMI_Handler+0x4>

08001818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <MemManage_Handler+0x4>

08001828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <UsageFault_Handler+0x4>

08001838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f000 f9bf 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <USART2_IRQHandler+0x10>)
 8001876:	f002 fb0f 	bl	8003e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000280 	.word	0x20000280

08001884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_kill>:

int _kill(int pid, int sig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800189e:	f004 f919 	bl	8005ad4 <__errno>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2216      	movs	r2, #22
 80018a6:	601a      	str	r2, [r3, #0]
  return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_exit>:

void _exit (int status)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffe7 	bl	8001894 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c6:	bf00      	nop
 80018c8:	e7fd      	b.n	80018c6 <_exit+0x12>

080018ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	e00a      	b.n	80018f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018dc:	f3af 8000 	nop.w
 80018e0:	4601      	mov	r1, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	60ba      	str	r2, [r7, #8]
 80018e8:	b2ca      	uxtb	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbf0      	blt.n	80018dc <_read+0x12>
  }

  return len;
 80018fa:	687b      	ldr	r3, [r7, #4]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	605a      	str	r2, [r3, #4]
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_isatty>:

int _isatty(int file)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f004 f89a 	bl	8005ad4 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	@ (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20020000 	.word	0x20020000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	2000027c 	.word	0x2000027c
 80019d4:	20000418 	.word	0x20000418

080019d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SystemInit+0x20>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <SystemInit+0x20>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <MX_USART2_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a34:	f002 f930 	bl	8003c98 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f7ff fc59 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000280 	.word	0x20000280
 8001a4c:	40004400 	.word	0x40004400

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae4 <HAL_UART_MspInit+0x94>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d133      	bne.n	8001ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_UART_MspInit+0x98>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	@ (8001aec <HAL_UART_MspInit+0x9c>)
 8001ac6:	f000 fa77 	bl	8001fb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2026      	movs	r0, #38	@ 0x26
 8001ad0:	f000 f9a9 	bl	8001e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ad4:	2026      	movs	r0, #38	@ 0x26
 8001ad6:	f000 f9c2 	bl	8001e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40004400 	.word	0x40004400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001af4:	f7ff ff70 	bl	80019d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001afa:	490d      	ldr	r1, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b00:	e002      	b.n	8001b08 <LoopCopyDataInit>

08001b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b06:	3304      	adds	r3, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b0c:	d3f9      	bcc.n	8001b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b10:	4c0a      	ldr	r4, [pc, #40]	@ (8001b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b14:	e001      	b.n	8001b1a <LoopFillZerobss>

08001b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b18:	3204      	adds	r2, #4

08001b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b1c:	d3fb      	bcc.n	8001b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f003 ffdf 	bl	8005ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff faf3 	bl	800110c <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b34:	08007c54 	.word	0x08007c54
  ldr r2, =_sbss
 8001b38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b3c:	20000418 	.word	0x20000418

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f94f 	bl	8001e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fe22 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f967 	bl	8001e7a <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc4:	f000 f92f 	bl	8001e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	@ (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	@ (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	200002c8 	.word	0x200002c8

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200002c8 	.word	0x200002c8

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	@ (8001d0c <__NVIC_EnableIRQ+0x38>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ddc:	d301      	bcc.n	8001de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <SysTick_Config+0x40>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dea:	210f      	movs	r1, #15
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001df0:	f7ff ff8e 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <SysTick_Config+0x40>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfa:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <SysTick_Config+0x40>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	e000e010 	.word	0xe000e010

08001e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff29 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e38:	f7ff ff3e 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	6978      	ldr	r0, [r7, #20]
 8001e44:	f7ff ff8e 	bl	8001d64 <NVIC_EncodePriority>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff5d 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e56:	bf00      	nop
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff31 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffa2 	bl	8001dcc <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff feb6 	bl	8001c10 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d008      	beq.n	8001ec4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e052      	b.n	8001f6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0216 	bic.w	r2, r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_DMA_Abort+0x62>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0208 	bic.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f14:	e013      	b.n	8001f3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f16:	f7ff fe7b 	bl	8001c10 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d90c      	bls.n	8001f3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e015      	b.n	8001f6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e4      	bne.n	8001f16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	223f      	movs	r2, #63	@ 0x3f
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00c      	b.n	8001faa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2205      	movs	r2, #5
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	e16b      	b.n	80022ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f040 815a 	bne.w	80022a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d005      	beq.n	800200a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	2b02      	cmp	r3, #2
 8002008:	d130      	bne.n	800206c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 0201 	and.w	r2, r3, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b03      	cmp	r3, #3
 8002076:	d017      	beq.n	80020a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d123      	bne.n	80020fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	220f      	movs	r2, #15
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80b4 	beq.w	80022a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b60      	ldr	r3, [pc, #384]	@ (80022c4 <HAL_GPIO_Init+0x30c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	4a5f      	ldr	r2, [pc, #380]	@ (80022c4 <HAL_GPIO_Init+0x30c>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800214c:	6453      	str	r3, [r2, #68]	@ 0x44
 800214e:	4b5d      	ldr	r3, [pc, #372]	@ (80022c4 <HAL_GPIO_Init+0x30c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215a:	4a5b      	ldr	r2, [pc, #364]	@ (80022c8 <HAL_GPIO_Init+0x310>)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	@ (80022cc <HAL_GPIO_Init+0x314>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <HAL_GPIO_Init+0x226>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a51      	ldr	r2, [pc, #324]	@ (80022d0 <HAL_GPIO_Init+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d025      	beq.n	80021da <HAL_GPIO_Init+0x222>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <HAL_GPIO_Init+0x31c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <HAL_GPIO_Init+0x21e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4f      	ldr	r2, [pc, #316]	@ (80022d8 <HAL_GPIO_Init+0x320>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_Init+0x21a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	@ (80022dc <HAL_GPIO_Init+0x324>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_Init+0x216>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4d      	ldr	r2, [pc, #308]	@ (80022e0 <HAL_GPIO_Init+0x328>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_Init+0x212>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	@ (80022e4 <HAL_GPIO_Init+0x32c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_Init+0x20e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	@ (80022e8 <HAL_GPIO_Init+0x330>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_Init+0x20a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00e      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021c2:	2308      	movs	r3, #8
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x228>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	@ (80022c8 <HAL_GPIO_Init+0x310>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_GPIO_Init+0x334>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <HAL_GPIO_Init+0x334>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b30      	ldr	r3, [pc, #192]	@ (80022ec <HAL_GPIO_Init+0x334>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_GPIO_Init+0x334>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b26      	ldr	r3, [pc, #152]	@ (80022ec <HAL_GPIO_Init+0x334>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_GPIO_Init+0x334>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_GPIO_Init+0x334>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a12      	ldr	r2, [pc, #72]	@ (80022ec <HAL_GPIO_Init+0x334>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae90 	bls.w	8001fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e001      	b.n	8002312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12b      	b.n	800258a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fe7e 	bl	8001048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	@ 0x24
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002384:	f001 fc60 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8002388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a81      	ldr	r2, [pc, #516]	@ (8002594 <HAL_I2C_Init+0x274>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d807      	bhi.n	80023a4 <HAL_I2C_Init+0x84>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a80      	ldr	r2, [pc, #512]	@ (8002598 <HAL_I2C_Init+0x278>)
 8002398:	4293      	cmp	r3, r2
 800239a:	bf94      	ite	ls
 800239c:	2301      	movls	r3, #1
 800239e:	2300      	movhi	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e006      	b.n	80023b2 <HAL_I2C_Init+0x92>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a7d      	ldr	r2, [pc, #500]	@ (800259c <HAL_I2C_Init+0x27c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0e7      	b.n	800258a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a78      	ldr	r2, [pc, #480]	@ (80025a0 <HAL_I2C_Init+0x280>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002594 <HAL_I2C_Init+0x274>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d802      	bhi.n	80023f4 <HAL_I2C_Init+0xd4>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	e009      	b.n	8002408 <HAL_I2C_Init+0xe8>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4a69      	ldr	r2, [pc, #420]	@ (80025a4 <HAL_I2C_Init+0x284>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	3301      	adds	r3, #1
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800241a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	495c      	ldr	r1, [pc, #368]	@ (8002594 <HAL_I2C_Init+0x274>)
 8002424:	428b      	cmp	r3, r1
 8002426:	d819      	bhi.n	800245c <HAL_I2C_Init+0x13c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e59      	subs	r1, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fbb1 f3f3 	udiv	r3, r1, r3
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800243c:	400b      	ands	r3, r1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_I2C_Init+0x138>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1e59      	subs	r1, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	e051      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 8002458:	2304      	movs	r3, #4
 800245a:	e04f      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <HAL_I2C_Init+0x168>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e012      	b.n	80024ae <HAL_I2C_Init+0x18e>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	0099      	lsls	r1, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Init+0x196>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e022      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10e      	bne.n	80024dc <HAL_I2C_Init+0x1bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e58      	subs	r0, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	440b      	add	r3, r1
 80024cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024da:	e00f      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6809      	ldr	r1, [r1, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800252a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6911      	ldr	r1, [r2, #16]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	000186a0 	.word	0x000186a0
 8002598:	001e847f 	.word	0x001e847f
 800259c:	003d08ff 	.word	0x003d08ff
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c2:	f7ff fb25 	bl	8001c10 <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	f040 80d9 	bne.w	8002788 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2319      	movs	r3, #25
 80025dc:	2201      	movs	r2, #1
 80025de:	496d      	ldr	r1, [pc, #436]	@ (8002794 <HAL_I2C_Mem_Write+0x1ec>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fc8b 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
 80025ee:	e0cc      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Mem_Write+0x56>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0c5      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d007      	beq.n	8002624 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2221      	movs	r2, #33	@ 0x21
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2240      	movs	r2, #64	@ 0x40
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a4d      	ldr	r2, [pc, #308]	@ (8002798 <HAL_I2C_Mem_Write+0x1f0>)
 8002664:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002666:	88f8      	ldrh	r0, [r7, #6]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4603      	mov	r3, r0
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fac2 	bl	8002c00 <I2C_RequestMemoryWrite>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d052      	beq.n	8002728 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e081      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fd50 	bl	8003130 <I2C_WaitOnTXEFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	2b04      	cmp	r3, #4
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d11b      	bne.n	8002728 <HAL_I2C_Mem_Write+0x180>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d017      	beq.n	8002728 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1aa      	bne.n	8002686 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fd43 	bl	80031c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002756:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e016      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	00100002 	.word	0x00100002
 8002798:	ffff0000 	.word	0xffff0000

0800279c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	@ 0x30
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b6:	f7ff fa2b 	bl	8001c10 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	f040 8214 	bne.w	8002bf2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2319      	movs	r3, #25
 80027d0:	2201      	movs	r2, #1
 80027d2:	497b      	ldr	r1, [pc, #492]	@ (80029c0 <HAL_I2C_Mem_Read+0x224>)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fb91 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	e207      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x56>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e200      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d007      	beq.n	8002818 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2222      	movs	r2, #34	@ 0x22
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	@ 0x40
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a5b      	ldr	r2, [pc, #364]	@ (80029c4 <HAL_I2C_Mem_Read+0x228>)
 8002858:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285a:	88f8      	ldrh	r0, [r7, #6]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa5e 	bl	8002d2c <I2C_RequestMemoryRead>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1bc      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e190      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11b      	bne.n	80028ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e170      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002900:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	e150      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002940:	e144      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	2b03      	cmp	r3, #3
 8002948:	f200 80f1 	bhi.w	8002b2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	2b01      	cmp	r3, #1
 8002952:	d123      	bne.n	800299c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002956:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fc79 	bl	8003250 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e145      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800299a:	e117      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d14e      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	2200      	movs	r2, #0
 80029ac:	4906      	ldr	r1, [pc, #24]	@ (80029c8 <HAL_I2C_Mem_Read+0x22c>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 faa4 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e11a      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
 80029be:	bf00      	nop
 80029c0:	00100002 	.word	0x00100002
 80029c4:	ffff0000 	.word	0xffff0000
 80029c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a40:	e0c4      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	2200      	movs	r2, #0
 8002a4a:	496c      	ldr	r1, [pc, #432]	@ (8002bfc <HAL_I2C_Mem_Read+0x460>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa55 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0cb      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4955      	ldr	r1, [pc, #340]	@ (8002bfc <HAL_I2C_Mem_Read+0x460>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa27 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e09d      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b2c:	e04e      	b.n	8002bcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb8c 	bl	8003250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e058      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d124      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f aeb6 	bne.w	8002942 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3728      	adds	r7, #40	@ 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	00010004 	.word	0x00010004

08002c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	817b      	strh	r3, [r7, #10]
 8002c12:	460b      	mov	r3, r1
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f960 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c50:	d103      	bne.n	8002c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e05f      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	6a3a      	ldr	r2, [r7, #32]
 8002c72:	492d      	ldr	r1, [pc, #180]	@ (8002d28 <I2C_RequestMemoryWrite+0x128>)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f9bb 	bl	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e04c      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa46 	bl	8003130 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d107      	bne.n	8002cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e02b      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	e021      	b.n	8002d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa20 	bl	8003130 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e005      	b.n	8002d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	00010002 	.word	0x00010002

08002d2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f8c2 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d8c:	d103      	bne.n	8002d96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0aa      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	4952      	ldr	r1, [pc, #328]	@ (8002ef8 <I2C_RequestMemoryRead+0x1cc>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f91d 	bl	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e097      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f9a8 	bl	8003130 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e076      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e08:	893b      	ldrh	r3, [r7, #8]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	e021      	b.n	8002e58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f982 	bl	8003130 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e050      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4e:	893b      	ldrh	r3, [r7, #8]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5a:	6a39      	ldr	r1, [r7, #32]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f967 	bl	8003130 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d107      	bne.n	8002e80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e035      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f82b 	bl	8002efc <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eba:	d103      	bne.n	8002ec4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e013      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	6a3a      	ldr	r2, [r7, #32]
 8002edc:	4906      	ldr	r1, [pc, #24]	@ (8002ef8 <I2C_RequestMemoryRead+0x1cc>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f886 	bl	8002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010002 	.word	0x00010002

08002efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f0c:	e048      	b.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f14:	d044      	beq.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe fe7b 	bl	8001c10 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d139      	bne.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10d      	bne.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	e00c      	b.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d116      	bne.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e023      	b.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	0c1b      	lsrs	r3, r3, #16
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d10d      	bne.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	e00c      	b.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d093      	beq.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffe:	e071      	b.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d123      	bne.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003028:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f043 0204 	orr.w	r2, r3, #4
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e067      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800305e:	d041      	beq.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fe fdd6 	bl	8001c10 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d136      	bne.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d10c      	bne.n	800309a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e00b      	b.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	43da      	mvns	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e021      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10c      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e00b      	b.n	8003120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	f47f af6d 	bne.w	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313c:	e034      	b.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f8e3 	bl	800330a <I2C_IsAcknowledgeFailed>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e034      	b.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003154:	d028      	beq.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fe fd5b 	bl	8001c10 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d11d      	bne.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003176:	2b80      	cmp	r3, #128	@ 0x80
 8003178:	d016      	beq.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e007      	b.n	80031b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	2b80      	cmp	r3, #128	@ 0x80
 80031b4:	d1c3      	bne.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031cc:	e034      	b.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f89b 	bl	800330a <I2C_IsAcknowledgeFailed>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e034      	b.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031e4:	d028      	beq.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fe fd13 	bl	8001c10 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11d      	bne.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d016      	beq.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e007      	b.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d1c3      	bne.n	80031ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800325c:	e049      	b.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b10      	cmp	r3, #16
 800326a:	d119      	bne.n	80032a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0210 	mvn.w	r2, #16
 8003274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e030      	b.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a0:	f7fe fcb6 	bl	8001c10 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11d      	bne.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d016      	beq.n	80032f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e007      	b.n	8003302 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b40      	cmp	r3, #64	@ 0x40
 80032fe:	d1ae      	bne.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003320:	d11b      	bne.n	800335a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800332a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f043 0204 	orr.w	r2, r3, #4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e267      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d075      	beq.n	8003472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003386:	4b88      	ldr	r3, [pc, #544]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d00c      	beq.n	80033ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003392:	4b85      	ldr	r3, [pc, #532]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800339a:	2b08      	cmp	r3, #8
 800339c:	d112      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b82      	ldr	r3, [pc, #520]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ac:	4b7e      	ldr	r3, [pc, #504]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05b      	beq.n	8003470 <HAL_RCC_OscConfig+0x108>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d157      	bne.n	8003470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e242      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033cc:	d106      	bne.n	80033dc <HAL_RCC_OscConfig+0x74>
 80033ce:	4b76      	ldr	r3, [pc, #472]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e01d      	b.n	8003418 <HAL_RCC_OscConfig+0xb0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x98>
 80033e6:	4b70      	ldr	r3, [pc, #448]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6f      	ldr	r2, [pc, #444]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b6d      	ldr	r3, [pc, #436]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6c      	ldr	r2, [pc, #432]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xb0>
 8003400:	4b69      	ldr	r3, [pc, #420]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a68      	ldr	r2, [pc, #416]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b66      	ldr	r3, [pc, #408]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a65      	ldr	r2, [pc, #404]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fbf6 	bl	8001c10 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe fbf2 	bl	8001c10 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	@ 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e207      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b5b      	ldr	r3, [pc, #364]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xc0>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fbe2 	bl	8001c10 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe fbde 	bl	8001c10 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1f3      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	4b51      	ldr	r3, [pc, #324]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0xe8>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800347e:	4b4a      	ldr	r3, [pc, #296]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800348a:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003492:	2b08      	cmp	r3, #8
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b44      	ldr	r3, [pc, #272]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCC_OscConfig+0x152>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e1c7      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ba:	4b3b      	ldr	r3, [pc, #236]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4937      	ldr	r1, [pc, #220]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e03a      	b.n	8003546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x244>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fe fb97 	bl	8001c10 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fe fb93 	bl	8001c10 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1a8      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b28      	ldr	r3, [pc, #160]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4925      	ldr	r1, [pc, #148]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e015      	b.n	8003546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351a:	4b24      	ldr	r3, [pc, #144]	@ (80035ac <HAL_RCC_OscConfig+0x244>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fb76 	bl	8001c10 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003528:	f7fe fb72 	bl	8001c10 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e187      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d036      	beq.n	80035c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <HAL_RCC_OscConfig+0x248>)
 800355c:	2201      	movs	r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fe fb56 	bl	8001c10 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fe fb52 	bl	8001c10 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e167      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_OscConfig+0x240>)
 800357c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x200>
 8003586:	e01b      	b.n	80035c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_RCC_OscConfig+0x248>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7fe fb3f 	bl	8001c10 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	e00e      	b.n	80035b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003596:	f7fe fb3b 	bl	8001c10 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d907      	bls.n	80035b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e150      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	42470000 	.word	0x42470000
 80035b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b88      	ldr	r3, [pc, #544]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ea      	bne.n	8003596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8097 	beq.w	80036fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b81      	ldr	r3, [pc, #516]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b7d      	ldr	r3, [pc, #500]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a7c      	ldr	r2, [pc, #496]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b7a      	ldr	r3, [pc, #488]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b77      	ldr	r3, [pc, #476]	@ (80037dc <HAL_RCC_OscConfig+0x474>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b74      	ldr	r3, [pc, #464]	@ (80037dc <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a73      	ldr	r2, [pc, #460]	@ (80037dc <HAL_RCC_OscConfig+0x474>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe fafb 	bl	8001c10 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe faf7 	bl	8001c10 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e10c      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_OscConfig+0x474>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x2ea>
 8003644:	4b64      	ldr	r3, [pc, #400]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a63      	ldr	r2, [pc, #396]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x324>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b05      	cmp	r3, #5
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x30c>
 800365a:	4b5f      	ldr	r3, [pc, #380]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a5e      	ldr	r2, [pc, #376]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003660:	f043 0304 	orr.w	r3, r3, #4
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70
 8003666:	4b5c      	ldr	r3, [pc, #368]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a5b      	ldr	r2, [pc, #364]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0x324>
 8003674:	4b58      	ldr	r3, [pc, #352]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	4a57      	ldr	r2, [pc, #348]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003680:	4b55      	ldr	r3, [pc, #340]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	4a54      	ldr	r2, [pc, #336]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe fabc 	bl	8001c10 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369c:	f7fe fab8 	bl	8001c10 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e0cb      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b2:	4b49      	ldr	r3, [pc, #292]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ee      	beq.n	800369c <HAL_RCC_OscConfig+0x334>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fe faa6 	bl	8001c10 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe faa2 	bl	8001c10 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0b5      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	4b3e      	ldr	r3, [pc, #248]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ee      	bne.n	80036c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d105      	bne.n	80036fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f0:	4b39      	ldr	r3, [pc, #228]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	4a38      	ldr	r2, [pc, #224]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a1 	beq.w	8003848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003706:	4b34      	ldr	r3, [pc, #208]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d05c      	beq.n	80037cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d141      	bne.n	800379e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <HAL_RCC_OscConfig+0x478>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe fa76 	bl	8001c10 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fe fa72 	bl	8001c10 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e087      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	4b27      	ldr	r3, [pc, #156]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	491b      	ldr	r1, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x478>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fa4b 	bl	8001c10 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fa47 	bl	8001c10 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e05c      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x416>
 800379c:	e054      	b.n	8003848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <HAL_RCC_OscConfig+0x478>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fa34 	bl	8001c10 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe fa30 	bl	8001c10 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e045      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x444>
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e038      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000
 80037e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <HAL_RCC_OscConfig+0x4ec>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d121      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11a      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800381a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381c:	4293      	cmp	r3, r2
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d107      	bne.n	8003844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800

08003858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0cc      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b68      	ldr	r3, [pc, #416]	@ (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d90c      	bls.n	8003894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b65      	ldr	r3, [pc, #404]	@ (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	@ (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a58      	ldr	r2, [pc, #352]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a52      	ldr	r2, [pc, #328]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d044      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d119      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d003      	beq.n	8003916 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	2b03      	cmp	r3, #3
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b3f      	ldr	r3, [pc, #252]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e067      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4934      	ldr	r1, [pc, #208]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe f962 	bl	8001c10 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe f95e 	bl	8001c10 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e04f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2b      	ldr	r3, [pc, #172]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d20c      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b22      	ldr	r3, [pc, #136]	@ (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	@ (8003a10 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ca:	4b12      	ldr	r3, [pc, #72]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	490a      	ldr	r1, [pc, #40]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	fa22 f303 	lsr.w	r3, r2, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe f8c2 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023c00 	.word	0x40023c00
 8003a14:	40023800 	.word	0x40023800
 8003a18:	080078b8 	.word	0x080078b8
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000004 	.word	0x20000004

08003a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b094      	sub	sp, #80	@ 0x50
 8003a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3c:	4b79      	ldr	r3, [pc, #484]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d00d      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	f200 80e1 	bhi.w	8003c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x34>
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a56:	e0db      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b73      	ldr	r3, [pc, #460]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5c:	e0db      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5e:	4b73      	ldr	r3, [pc, #460]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a62:	e0d8      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a64:	4b6f      	ldr	r3, [pc, #444]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d063      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	2200      	movs	r2, #0
 8003a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8e:	2300      	movs	r3, #0
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a96:	4622      	mov	r2, r4
 8003a98:	462b      	mov	r3, r5
 8003a9a:	f04f 0000 	mov.w	r0, #0
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	0159      	lsls	r1, r3, #5
 8003aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa8:	0150      	lsls	r0, r2, #5
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4621      	mov	r1, r4
 8003ab0:	1a51      	subs	r1, r2, r1
 8003ab2:	6139      	str	r1, [r7, #16]
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac8:	4659      	mov	r1, fp
 8003aca:	018b      	lsls	r3, r1, #6
 8003acc:	4651      	mov	r1, sl
 8003ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	018a      	lsls	r2, r1, #6
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8003adc:	4659      	mov	r1, fp
 8003ade:	eb63 0901 	sbc.w	r9, r3, r1
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af6:	4690      	mov	r8, r2
 8003af8:	4699      	mov	r9, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	eb18 0303 	adds.w	r3, r8, r3
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	462b      	mov	r3, r5
 8003b04:	eb49 0303 	adc.w	r3, r9, r3
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b16:	4629      	mov	r1, r5
 8003b18:	024b      	lsls	r3, r1, #9
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b20:	4621      	mov	r1, r4
 8003b22:	024a      	lsls	r2, r1, #9
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b34:	f7fd f888 	bl	8000c48 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b40:	e058      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	f04f 0000 	mov.w	r0, #0
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	0159      	lsls	r1, r3, #5
 8003b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6e:	0150      	lsls	r0, r2, #5
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4641      	mov	r1, r8
 8003b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b94:	ebb2 040a 	subs.w	r4, r2, sl
 8003b98:	eb63 050b 	sbc.w	r5, r3, fp
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	00eb      	lsls	r3, r5, #3
 8003ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003baa:	00e2      	lsls	r2, r4, #3
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	18e3      	adds	r3, r4, r3
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	eb45 0303 	adc.w	r3, r5, r3
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	028b      	lsls	r3, r1, #10
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	028a      	lsls	r2, r1, #10
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	61fa      	str	r2, [r7, #28]
 8003be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be8:	f7fd f82e 	bl	8000c48 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3750      	adds	r7, #80	@ 0x50
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	007a1200 	.word	0x007a1200

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b03      	ldr	r3, [pc, #12]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff0 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	@ (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	080078c8 	.word	0x080078c8

08003c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	f7ff ffdc 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	0b5b      	lsrs	r3, r3, #13
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	4903      	ldr	r1, [pc, #12]	@ (8003c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40023800 	.word	0x40023800
 8003c94:	080078c8 	.word	0x080078c8

08003c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e042      	b.n	8003d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fec6 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	@ 0x24
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fdd3 	bl	8004888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	@ 0x28
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d175      	bne.n	8003e44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_UART_Transmit+0x2c>
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e06e      	b.n	8003e46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2221      	movs	r2, #33	@ 0x21
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d76:	f7fd ff4b 	bl	8001c10 <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	88fa      	ldrh	r2, [r7, #6]
 8003d80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d90:	d108      	bne.n	8003da4 <HAL_UART_Transmit+0x6c>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e003      	b.n	8003dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dac:	e02e      	b.n	8003e0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	2180      	movs	r1, #128	@ 0x80
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fb37 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e03a      	b.n	8003e46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10b      	bne.n	8003dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3302      	adds	r3, #2
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e007      	b.n	8003dfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1cb      	bne.n	8003dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2140      	movs	r1, #64	@ 0x40
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fb03 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d112      	bne.n	8003e8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Receive_IT+0x26>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e00b      	b.n	8003e90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fb2a 	bl	80044de <UART_Start_Receive_IT>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	e000      	b.n	8003e90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_UART_IRQHandler+0x66>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fc07 	bl	800470a <UART_Receive_IT>
      return;
 8003efc:	e273      	b.n	80043e6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80de 	beq.w	80040c4 <HAL_UART_IRQHandler+0x22c>
 8003f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80d1 	beq.w	80040c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xae>
 8003f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xd2>
 8003f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0xf6>
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_UART_IRQHandler+0x126>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	f043 0208 	orr.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 820a 	beq.w	80043dc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x14e>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fb92 	bl	800470a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_UART_IRQHandler+0x17a>
 800400a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04f      	beq.n	80040b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa9d 	bl	8004552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d141      	bne.n	80040aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800403c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3314      	adds	r3, #20
 800404e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004052:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800405e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800406a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1d9      	bne.n	8004026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d013      	beq.n	80040a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	4a8a      	ldr	r2, [pc, #552]	@ (80042a8 <HAL_UART_IRQHandler+0x410>)
 8004080:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd ff73 	bl	8001f72 <HAL_DMA_Abort_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800409c:	4610      	mov	r0, r2
 800409e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e00e      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9ac 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	e00a      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9a8 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	e006      	b.n	80040c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9a4 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040be:	e18d      	b.n	80043dc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	bf00      	nop
    return;
 80040c2:	e18b      	b.n	80043dc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	f040 8167 	bne.w	800439c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8160 	beq.w	800439c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8159 	beq.w	800439c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410a:	2b40      	cmp	r3, #64	@ 0x40
 800410c:	f040 80ce 	bne.w	80042ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800411c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80a9 	beq.w	8004278 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800412a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800412e:	429a      	cmp	r2, r3
 8004130:	f080 80a2 	bcs.w	8004278 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800413a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004146:	f000 8088 	beq.w	800425a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004176:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800417a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004182:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1d9      	bne.n	800414a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e1      	bne.n	8004196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800423c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800423e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004242:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800424a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e3      	bne.n	8004218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd fe1c 	bl	8001e92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004268:	b29b      	uxth	r3, r3
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b29b      	uxth	r3, r3
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8cf 	bl	8004414 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004276:	e0b3      	b.n	80043e0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800427c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004280:	429a      	cmp	r2, r3
 8004282:	f040 80ad 	bne.w	80043e0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004290:	f040 80a6 	bne.w	80043e0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8b7 	bl	8004414 <HAL_UARTEx_RxEventCallback>
      return;
 80042a6:	e09b      	b.n	80043e0 <HAL_UART_IRQHandler+0x548>
 80042a8:	08004619 	.word	0x08004619
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 808e 	beq.w	80043e4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80042c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8089 	beq.w	80043e4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	623b      	str	r3, [r7, #32]
   return(result);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800432e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e3      	bne.n	8004350 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f83d 	bl	8004414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800439a:	e023      	b.n	80043e4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_UART_IRQHandler+0x524>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f940 	bl	800463a <UART_Transmit_IT>
    return;
 80043ba:	e014      	b.n	80043e6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00e      	beq.n	80043e6 <HAL_UART_IRQHandler+0x54e>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f980 	bl	80046da <UART_EndTransmit_IT>
    return;
 80043da:	e004      	b.n	80043e6 <HAL_UART_IRQHandler+0x54e>
    return;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043e4:	bf00      	nop
  }
}
 80043e6:	37e8      	adds	r7, #232	@ 0xe8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443c:	e03b      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004444:	d037      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fd fbe3 	bl	8001c10 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <UART_WaitOnFlagUntilTimeout+0x30>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e03a      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d023      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d020      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d01d      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b08      	cmp	r3, #8
 8004486:	d116      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f857 	bl	8004552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2208      	movs	r2, #8
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e00f      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d0b4      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044de:	b480      	push	{r7}
 80044e0:	b085      	sub	sp, #20
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	4613      	mov	r3, r2
 80044ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2222      	movs	r2, #34	@ 0x22
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004522:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0220 	orr.w	r2, r2, #32
 8004542:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004552:	b480      	push	{r7}
 8004554:	b095      	sub	sp, #84	@ 0x54
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800457a:	643a      	str	r2, [r7, #64]	@ 0x40
 800457c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	61fb      	str	r3, [r7, #28]
   return(result);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3314      	adds	r3, #20
 80045ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d119      	bne.n	80045fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ea:	61ba      	str	r2, [r7, #24]
 80045ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	613b      	str	r3, [r7, #16]
   return(result);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800460c:	bf00      	nop
 800460e:	3754      	adds	r7, #84	@ 0x54
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fee7 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b21      	cmp	r3, #33	@ 0x21
 800464c:	d13e      	bne.n	80046cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004656:	d114      	bne.n	8004682 <UART_Transmit_IT+0x48>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d110      	bne.n	8004682 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004674:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	1c9a      	adds	r2, r3, #2
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]
 8004680:	e008      	b.n	8004694 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	1c59      	adds	r1, r3, #1
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6211      	str	r1, [r2, #32]
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29b      	uxth	r3, r3
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4619      	mov	r1, r3
 80046a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10f      	bne.n	80046c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fe76 	bl	80043ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b08c      	sub	sp, #48	@ 0x30
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b22      	cmp	r3, #34	@ 0x22
 8004724:	f040 80aa 	bne.w	800487c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004730:	d115      	bne.n	800475e <UART_Receive_IT+0x54>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d111      	bne.n	800475e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474c:	b29a      	uxth	r2, r3
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28
 800475c:	e024      	b.n	80047a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476c:	d007      	beq.n	800477e <UART_Receive_IT+0x74>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <UART_Receive_IT+0x82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	e008      	b.n	800479e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004798:	b2da      	uxtb	r2, r3
 800479a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4619      	mov	r1, r3
 80047b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d15d      	bne.n	8004878 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0220 	bic.w	r2, r2, #32
 80047ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d135      	bne.n	800486e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	613b      	str	r3, [r7, #16]
   return(result);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004828:	623a      	str	r2, [r7, #32]
 800482a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	69f9      	ldr	r1, [r7, #28]
 800482e:	6a3a      	ldr	r2, [r7, #32]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	61bb      	str	r3, [r7, #24]
   return(result);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e5      	bne.n	8004808 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b10      	cmp	r3, #16
 8004848:	d10a      	bne.n	8004860 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fdd4 	bl	8004414 <HAL_UARTEx_RxEventCallback>
 800486c:	e002      	b.n	8004874 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc fd22 	bl	80012b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	e002      	b.n	800487e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e000      	b.n	800487e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800487c:	2302      	movs	r3, #2
  }
}
 800487e:	4618      	mov	r0, r3
 8004880:	3730      	adds	r7, #48	@ 0x30
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b0c0      	sub	sp, #256	@ 0x100
 800488e:	af00      	add	r7, sp, #0
 8004890:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	ea40 0301 	orr.w	r3, r0, r1
 80048b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	431a      	orrs	r2, r3
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048e0:	f021 010c 	bic.w	r1, r1, #12
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048ee:	430b      	orrs	r3, r1
 80048f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004902:	6999      	ldr	r1, [r3, #24]
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	ea40 0301 	orr.w	r3, r0, r1
 800490e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b8f      	ldr	r3, [pc, #572]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d005      	beq.n	8004928 <UART_SetConfig+0xa0>
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8d      	ldr	r3, [pc, #564]	@ (8004b58 <UART_SetConfig+0x2d0>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d104      	bne.n	8004932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004928:	f7ff f9a2 	bl	8003c70 <HAL_RCC_GetPCLK2Freq>
 800492c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004930:	e003      	b.n	800493a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004932:	f7ff f989 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8004936:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004944:	f040 810c 	bne.w	8004b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004952:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800495a:	4622      	mov	r2, r4
 800495c:	462b      	mov	r3, r5
 800495e:	1891      	adds	r1, r2, r2
 8004960:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004962:	415b      	adcs	r3, r3
 8004964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800496a:	4621      	mov	r1, r4
 800496c:	eb12 0801 	adds.w	r8, r2, r1
 8004970:	4629      	mov	r1, r5
 8004972:	eb43 0901 	adc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004998:	462b      	mov	r3, r5
 800499a:	eb49 0303 	adc.w	r3, r9, r3
 800499e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049b6:	460b      	mov	r3, r1
 80049b8:	18db      	adds	r3, r3, r3
 80049ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80049bc:	4613      	mov	r3, r2
 80049be:	eb42 0303 	adc.w	r3, r2, r3
 80049c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049cc:	f7fc f93c 	bl	8000c48 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b61      	ldr	r3, [pc, #388]	@ (8004b5c <UART_SetConfig+0x2d4>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049f8:	415b      	adcs	r3, r3
 80049fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a00:	4641      	mov	r1, r8
 8004a02:	eb12 0a01 	adds.w	sl, r2, r1
 8004a06:	4649      	mov	r1, r9
 8004a08:	eb43 0b01 	adc.w	fp, r3, r1
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a20:	4692      	mov	sl, r2
 8004a22:	469b      	mov	fp, r3
 8004a24:	4643      	mov	r3, r8
 8004a26:	eb1a 0303 	adds.w	r3, sl, r3
 8004a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	eb4b 0303 	adc.w	r3, fp, r3
 8004a34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	18db      	adds	r3, r3, r3
 8004a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a52:	4613      	mov	r3, r2
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a62:	f7fc f8f1 	bl	8000c48 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2264      	movs	r2, #100	@ 0x64
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	1acb      	subs	r3, r1, r3
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a82:	4b36      	ldr	r3, [pc, #216]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004a84:	fba3 2302 	umull	r2, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a90:	441c      	add	r4, r3
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004aac:	415b      	adcs	r3, r3
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	1851      	adds	r1, r2, r1
 8004ab8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004aba:	4649      	mov	r1, r9
 8004abc:	414b      	adcs	r3, r1
 8004abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004acc:	4659      	mov	r1, fp
 8004ace:	00cb      	lsls	r3, r1, #3
 8004ad0:	4651      	mov	r1, sl
 8004ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	00ca      	lsls	r2, r1, #3
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ae8:	464b      	mov	r3, r9
 8004aea:	460a      	mov	r2, r1
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b08:	460b      	mov	r3, r1
 8004b0a:	18db      	adds	r3, r3, r3
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b0e:	4613      	mov	r3, r2
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b1e:	f7fc f893 	bl	8000c48 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2164      	movs	r1, #100	@ 0x64
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	3332      	adds	r3, #50	@ 0x32
 8004b3a:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 0207 	and.w	r2, r3, #7
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4422      	add	r2, r4
 8004b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b50:	e106      	b.n	8004d60 <UART_SetConfig+0x4d8>
 8004b52:	bf00      	nop
 8004b54:	40011000 	.word	0x40011000
 8004b58:	40011400 	.word	0x40011400
 8004b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	6239      	str	r1, [r7, #32]
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b82:	4641      	mov	r1, r8
 8004b84:	1854      	adds	r4, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb43 0501 	adc.w	r5, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ba8:	464b      	mov	r3, r9
 8004baa:	eb45 0303 	adc.w	r3, r5, r3
 8004bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bce:	4629      	mov	r1, r5
 8004bd0:	008b      	lsls	r3, r1, #2
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd8:	4621      	mov	r1, r4
 8004bda:	008a      	lsls	r2, r1, #2
 8004bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004be0:	f7fc f832 	bl	8000c48 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b60      	ldr	r3, [pc, #384]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004bea:	fba3 2302 	umull	r2, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	011c      	lsls	r4, r3, #4
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	61b9      	str	r1, [r7, #24]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6139      	str	r1, [r7, #16]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c48:	464b      	mov	r3, r9
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	008b      	lsls	r3, r1, #2
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c76:	4641      	mov	r1, r8
 8004c78:	008a      	lsls	r2, r1, #2
 8004c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c7e:	f7fb ffe3 	bl	8000c48 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	4b38      	ldr	r3, [pc, #224]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2264      	movs	r2, #100	@ 0x64
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	1acb      	subs	r3, r1, r3
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	3332      	adds	r3, #50	@ 0x32
 8004c9c:	4a33      	ldr	r2, [pc, #204]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca8:	441c      	add	r4, r3
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6039      	str	r1, [r7, #0]
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	460a      	mov	r2, r1
 8004cfe:	eb42 0303 	adc.w	r3, r2, r3
 8004d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	008b      	lsls	r3, r1, #2
 8004d20:	4641      	mov	r1, r8
 8004d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d26:	4641      	mov	r1, r8
 8004d28:	008a      	lsls	r2, r1, #2
 8004d2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d2e:	f7fb ff8b 	bl	8000c48 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	2164      	movs	r1, #100	@ 0x64
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	3332      	adds	r3, #50	@ 0x32
 8004d4a:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	f003 020f 	and.w	r2, r3, #15
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4422      	add	r2, r4
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d66:	46bd      	mov	sp, r7
 8004d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6c:	51eb851f 	.word	0x51eb851f

08004d70 <__cvt>:
 8004d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	ec57 6b10 	vmov	r6, r7, d0
 8004d78:	2f00      	cmp	r7, #0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	463b      	mov	r3, r7
 8004d80:	bfbb      	ittet	lt
 8004d82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d86:	461f      	movlt	r7, r3
 8004d88:	2300      	movge	r3, #0
 8004d8a:	232d      	movlt	r3, #45	@ 0x2d
 8004d8c:	700b      	strb	r3, [r1, #0]
 8004d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d94:	4691      	mov	r9, r2
 8004d96:	f023 0820 	bic.w	r8, r3, #32
 8004d9a:	bfbc      	itt	lt
 8004d9c:	4632      	movlt	r2, r6
 8004d9e:	4616      	movlt	r6, r2
 8004da0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004da4:	d005      	beq.n	8004db2 <__cvt+0x42>
 8004da6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004daa:	d100      	bne.n	8004dae <__cvt+0x3e>
 8004dac:	3401      	adds	r4, #1
 8004dae:	2102      	movs	r1, #2
 8004db0:	e000      	b.n	8004db4 <__cvt+0x44>
 8004db2:	2103      	movs	r1, #3
 8004db4:	ab03      	add	r3, sp, #12
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	ab02      	add	r3, sp, #8
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	ec47 6b10 	vmov	d0, r6, r7
 8004dc0:	4653      	mov	r3, sl
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	f000 ff3c 	bl	8005c40 <_dtoa_r>
 8004dc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dcc:	4605      	mov	r5, r0
 8004dce:	d119      	bne.n	8004e04 <__cvt+0x94>
 8004dd0:	f019 0f01 	tst.w	r9, #1
 8004dd4:	d00e      	beq.n	8004df4 <__cvt+0x84>
 8004dd6:	eb00 0904 	add.w	r9, r0, r4
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4630      	mov	r0, r6
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004de6:	b108      	cbz	r0, 8004dec <__cvt+0x7c>
 8004de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dec:	2230      	movs	r2, #48	@ 0x30
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	454b      	cmp	r3, r9
 8004df2:	d31e      	bcc.n	8004e32 <__cvt+0xc2>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004df8:	1b5b      	subs	r3, r3, r5
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	b004      	add	sp, #16
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e08:	eb00 0904 	add.w	r9, r0, r4
 8004e0c:	d1e5      	bne.n	8004dda <__cvt+0x6a>
 8004e0e:	7803      	ldrb	r3, [r0, #0]
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d10a      	bne.n	8004e2a <__cvt+0xba>
 8004e14:	2200      	movs	r2, #0
 8004e16:	2300      	movs	r3, #0
 8004e18:	4630      	mov	r0, r6
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	f7fb fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e20:	b918      	cbnz	r0, 8004e2a <__cvt+0xba>
 8004e22:	f1c4 0401 	rsb	r4, r4, #1
 8004e26:	f8ca 4000 	str.w	r4, [sl]
 8004e2a:	f8da 3000 	ldr.w	r3, [sl]
 8004e2e:	4499      	add	r9, r3
 8004e30:	e7d3      	b.n	8004dda <__cvt+0x6a>
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	9103      	str	r1, [sp, #12]
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e7d9      	b.n	8004dee <__cvt+0x7e>

08004e3a <__exponent>:
 8004e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	bfba      	itte	lt
 8004e40:	4249      	neglt	r1, r1
 8004e42:	232d      	movlt	r3, #45	@ 0x2d
 8004e44:	232b      	movge	r3, #43	@ 0x2b
 8004e46:	2909      	cmp	r1, #9
 8004e48:	7002      	strb	r2, [r0, #0]
 8004e4a:	7043      	strb	r3, [r0, #1]
 8004e4c:	dd29      	ble.n	8004ea2 <__exponent+0x68>
 8004e4e:	f10d 0307 	add.w	r3, sp, #7
 8004e52:	461d      	mov	r5, r3
 8004e54:	270a      	movs	r7, #10
 8004e56:	461a      	mov	r2, r3
 8004e58:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e5c:	fb07 1416 	mls	r4, r7, r6, r1
 8004e60:	3430      	adds	r4, #48	@ 0x30
 8004e62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e66:	460c      	mov	r4, r1
 8004e68:	2c63      	cmp	r4, #99	@ 0x63
 8004e6a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004e6e:	4631      	mov	r1, r6
 8004e70:	dcf1      	bgt.n	8004e56 <__exponent+0x1c>
 8004e72:	3130      	adds	r1, #48	@ 0x30
 8004e74:	1e94      	subs	r4, r2, #2
 8004e76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e7a:	1c41      	adds	r1, r0, #1
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	42ab      	cmp	r3, r5
 8004e80:	d30a      	bcc.n	8004e98 <__exponent+0x5e>
 8004e82:	f10d 0309 	add.w	r3, sp, #9
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	42ac      	cmp	r4, r5
 8004e8a:	bf88      	it	hi
 8004e8c:	2300      	movhi	r3, #0
 8004e8e:	3302      	adds	r3, #2
 8004e90:	4403      	add	r3, r0
 8004e92:	1a18      	subs	r0, r3, r0
 8004e94:	b003      	add	sp, #12
 8004e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ea0:	e7ed      	b.n	8004e7e <__exponent+0x44>
 8004ea2:	2330      	movs	r3, #48	@ 0x30
 8004ea4:	3130      	adds	r1, #48	@ 0x30
 8004ea6:	7083      	strb	r3, [r0, #2]
 8004ea8:	70c1      	strb	r1, [r0, #3]
 8004eaa:	1d03      	adds	r3, r0, #4
 8004eac:	e7f1      	b.n	8004e92 <__exponent+0x58>
	...

08004eb0 <_printf_float>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	b08d      	sub	sp, #52	@ 0x34
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	461f      	mov	r7, r3
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	f000 fdbd 	bl	8005a40 <_localeconv_r>
 8004ec6:	6803      	ldr	r3, [r0, #0]
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb f9d0 	bl	8000270 <strlen>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed8:	9005      	str	r0, [sp, #20]
 8004eda:	3307      	adds	r3, #7
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	f103 0208 	add.w	r2, r3, #8
 8004ee4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ee8:	f8d4 b000 	ldr.w	fp, [r4]
 8004eec:	f8c8 2000 	str.w	r2, [r8]
 8004ef0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ef4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ef8:	9307      	str	r3, [sp, #28]
 8004efa:	f8cd 8018 	str.w	r8, [sp, #24]
 8004efe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f06:	4b9c      	ldr	r3, [pc, #624]	@ (8005178 <_printf_float+0x2c8>)
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f0c:	f7fb fe0e 	bl	8000b2c <__aeabi_dcmpun>
 8004f10:	bb70      	cbnz	r0, 8004f70 <_printf_float+0xc0>
 8004f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f16:	4b98      	ldr	r3, [pc, #608]	@ (8005178 <_printf_float+0x2c8>)
 8004f18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f1c:	f7fb fde8 	bl	8000af0 <__aeabi_dcmple>
 8004f20:	bb30      	cbnz	r0, 8004f70 <_printf_float+0xc0>
 8004f22:	2200      	movs	r2, #0
 8004f24:	2300      	movs	r3, #0
 8004f26:	4640      	mov	r0, r8
 8004f28:	4649      	mov	r1, r9
 8004f2a:	f7fb fdd7 	bl	8000adc <__aeabi_dcmplt>
 8004f2e:	b110      	cbz	r0, 8004f36 <_printf_float+0x86>
 8004f30:	232d      	movs	r3, #45	@ 0x2d
 8004f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f36:	4a91      	ldr	r2, [pc, #580]	@ (800517c <_printf_float+0x2cc>)
 8004f38:	4b91      	ldr	r3, [pc, #580]	@ (8005180 <_printf_float+0x2d0>)
 8004f3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f3e:	bf8c      	ite	hi
 8004f40:	4690      	movhi	r8, r2
 8004f42:	4698      	movls	r8, r3
 8004f44:	2303      	movs	r3, #3
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	f02b 0304 	bic.w	r3, fp, #4
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	f04f 0900 	mov.w	r9, #0
 8004f52:	9700      	str	r7, [sp, #0]
 8004f54:	4633      	mov	r3, r6
 8004f56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 f9d2 	bl	8005304 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	f040 808d 	bne.w	8005080 <_printf_float+0x1d0>
 8004f66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f6a:	b00d      	add	sp, #52	@ 0x34
 8004f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	f7fb fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8004f7c:	b140      	cbz	r0, 8004f90 <_printf_float+0xe0>
 8004f7e:	464b      	mov	r3, r9
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bfbc      	itt	lt
 8004f84:	232d      	movlt	r3, #45	@ 0x2d
 8004f86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8005184 <_printf_float+0x2d4>)
 8004f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8005188 <_printf_float+0x2d8>)
 8004f8e:	e7d4      	b.n	8004f3a <_printf_float+0x8a>
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f96:	9206      	str	r2, [sp, #24]
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	d13b      	bne.n	8005014 <_printf_float+0x164>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	6063      	str	r3, [r4, #4]
 8004fa0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6022      	str	r2, [r4, #0]
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	ab0a      	add	r3, sp, #40	@ 0x28
 8004fac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004fb0:	ab09      	add	r3, sp, #36	@ 0x24
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	6861      	ldr	r1, [r4, #4]
 8004fb6:	ec49 8b10 	vmov	d0, r8, r9
 8004fba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f7ff fed6 	bl	8004d70 <__cvt>
 8004fc4:	9b06      	ldr	r3, [sp, #24]
 8004fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fc8:	2b47      	cmp	r3, #71	@ 0x47
 8004fca:	4680      	mov	r8, r0
 8004fcc:	d129      	bne.n	8005022 <_printf_float+0x172>
 8004fce:	1cc8      	adds	r0, r1, #3
 8004fd0:	db02      	blt.n	8004fd8 <_printf_float+0x128>
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	dd41      	ble.n	800505c <_printf_float+0x1ac>
 8004fd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8004fe0:	3901      	subs	r1, #1
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fe8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fea:	f7ff ff26 	bl	8004e3a <__exponent>
 8004fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ff0:	1813      	adds	r3, r2, r0
 8004ff2:	2a01      	cmp	r2, #1
 8004ff4:	4681      	mov	r9, r0
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	dc02      	bgt.n	8005000 <_printf_float+0x150>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	07d2      	lsls	r2, r2, #31
 8004ffe:	d501      	bpl.n	8005004 <_printf_float+0x154>
 8005000:	3301      	adds	r3, #1
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0a2      	beq.n	8004f52 <_printf_float+0xa2>
 800500c:	232d      	movs	r3, #45	@ 0x2d
 800500e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005012:	e79e      	b.n	8004f52 <_printf_float+0xa2>
 8005014:	9a06      	ldr	r2, [sp, #24]
 8005016:	2a47      	cmp	r2, #71	@ 0x47
 8005018:	d1c2      	bne.n	8004fa0 <_printf_float+0xf0>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1c0      	bne.n	8004fa0 <_printf_float+0xf0>
 800501e:	2301      	movs	r3, #1
 8005020:	e7bd      	b.n	8004f9e <_printf_float+0xee>
 8005022:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005026:	d9db      	bls.n	8004fe0 <_printf_float+0x130>
 8005028:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800502c:	d118      	bne.n	8005060 <_printf_float+0x1b0>
 800502e:	2900      	cmp	r1, #0
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	dd0b      	ble.n	800504c <_printf_float+0x19c>
 8005034:	6121      	str	r1, [r4, #16]
 8005036:	b913      	cbnz	r3, 800503e <_printf_float+0x18e>
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	07d0      	lsls	r0, r2, #31
 800503c:	d502      	bpl.n	8005044 <_printf_float+0x194>
 800503e:	3301      	adds	r3, #1
 8005040:	440b      	add	r3, r1
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005046:	f04f 0900 	mov.w	r9, #0
 800504a:	e7db      	b.n	8005004 <_printf_float+0x154>
 800504c:	b913      	cbnz	r3, 8005054 <_printf_float+0x1a4>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	07d2      	lsls	r2, r2, #31
 8005052:	d501      	bpl.n	8005058 <_printf_float+0x1a8>
 8005054:	3302      	adds	r3, #2
 8005056:	e7f4      	b.n	8005042 <_printf_float+0x192>
 8005058:	2301      	movs	r3, #1
 800505a:	e7f2      	b.n	8005042 <_printf_float+0x192>
 800505c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005062:	4299      	cmp	r1, r3
 8005064:	db05      	blt.n	8005072 <_printf_float+0x1c2>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	6121      	str	r1, [r4, #16]
 800506a:	07d8      	lsls	r0, r3, #31
 800506c:	d5ea      	bpl.n	8005044 <_printf_float+0x194>
 800506e:	1c4b      	adds	r3, r1, #1
 8005070:	e7e7      	b.n	8005042 <_printf_float+0x192>
 8005072:	2900      	cmp	r1, #0
 8005074:	bfd4      	ite	le
 8005076:	f1c1 0202 	rsble	r2, r1, #2
 800507a:	2201      	movgt	r2, #1
 800507c:	4413      	add	r3, r2
 800507e:	e7e0      	b.n	8005042 <_printf_float+0x192>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	055a      	lsls	r2, r3, #21
 8005084:	d407      	bmi.n	8005096 <_printf_float+0x1e6>
 8005086:	6923      	ldr	r3, [r4, #16]
 8005088:	4642      	mov	r2, r8
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d12b      	bne.n	80050ec <_printf_float+0x23c>
 8005094:	e767      	b.n	8004f66 <_printf_float+0xb6>
 8005096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800509a:	f240 80dd 	bls.w	8005258 <_printf_float+0x3a8>
 800509e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050a2:	2200      	movs	r2, #0
 80050a4:	2300      	movs	r3, #0
 80050a6:	f7fb fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d033      	beq.n	8005116 <_printf_float+0x266>
 80050ae:	4a37      	ldr	r2, [pc, #220]	@ (800518c <_printf_float+0x2dc>)
 80050b0:	2301      	movs	r3, #1
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f af54 	beq.w	8004f66 <_printf_float+0xb6>
 80050be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80050c2:	4543      	cmp	r3, r8
 80050c4:	db02      	blt.n	80050cc <_printf_float+0x21c>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	07d8      	lsls	r0, r3, #31
 80050ca:	d50f      	bpl.n	80050ec <_printf_float+0x23c>
 80050cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f af45 	beq.w	8004f66 <_printf_float+0xb6>
 80050dc:	f04f 0900 	mov.w	r9, #0
 80050e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80050e4:	f104 0a1a 	add.w	sl, r4, #26
 80050e8:	45c8      	cmp	r8, r9
 80050ea:	dc09      	bgt.n	8005100 <_printf_float+0x250>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	f100 8103 	bmi.w	80052fa <_printf_float+0x44a>
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050f8:	4298      	cmp	r0, r3
 80050fa:	bfb8      	it	lt
 80050fc:	4618      	movlt	r0, r3
 80050fe:	e734      	b.n	8004f6a <_printf_float+0xba>
 8005100:	2301      	movs	r3, #1
 8005102:	4652      	mov	r2, sl
 8005104:	4631      	mov	r1, r6
 8005106:	4628      	mov	r0, r5
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	f43f af2b 	beq.w	8004f66 <_printf_float+0xb6>
 8005110:	f109 0901 	add.w	r9, r9, #1
 8005114:	e7e8      	b.n	80050e8 <_printf_float+0x238>
 8005116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	dc39      	bgt.n	8005190 <_printf_float+0x2e0>
 800511c:	4a1b      	ldr	r2, [pc, #108]	@ (800518c <_printf_float+0x2dc>)
 800511e:	2301      	movs	r3, #1
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	f43f af1d 	beq.w	8004f66 <_printf_float+0xb6>
 800512c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005130:	ea59 0303 	orrs.w	r3, r9, r3
 8005134:	d102      	bne.n	800513c <_printf_float+0x28c>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	07d9      	lsls	r1, r3, #31
 800513a:	d5d7      	bpl.n	80050ec <_printf_float+0x23c>
 800513c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f af0d 	beq.w	8004f66 <_printf_float+0xb6>
 800514c:	f04f 0a00 	mov.w	sl, #0
 8005150:	f104 0b1a 	add.w	fp, r4, #26
 8005154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005156:	425b      	negs	r3, r3
 8005158:	4553      	cmp	r3, sl
 800515a:	dc01      	bgt.n	8005160 <_printf_float+0x2b0>
 800515c:	464b      	mov	r3, r9
 800515e:	e793      	b.n	8005088 <_printf_float+0x1d8>
 8005160:	2301      	movs	r3, #1
 8005162:	465a      	mov	r2, fp
 8005164:	4631      	mov	r1, r6
 8005166:	4628      	mov	r0, r5
 8005168:	47b8      	blx	r7
 800516a:	3001      	adds	r0, #1
 800516c:	f43f aefb 	beq.w	8004f66 <_printf_float+0xb6>
 8005170:	f10a 0a01 	add.w	sl, sl, #1
 8005174:	e7ee      	b.n	8005154 <_printf_float+0x2a4>
 8005176:	bf00      	nop
 8005178:	7fefffff 	.word	0x7fefffff
 800517c:	080078d4 	.word	0x080078d4
 8005180:	080078d0 	.word	0x080078d0
 8005184:	080078dc 	.word	0x080078dc
 8005188:	080078d8 	.word	0x080078d8
 800518c:	080078e0 	.word	0x080078e0
 8005190:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005192:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005196:	4553      	cmp	r3, sl
 8005198:	bfa8      	it	ge
 800519a:	4653      	movge	r3, sl
 800519c:	2b00      	cmp	r3, #0
 800519e:	4699      	mov	r9, r3
 80051a0:	dc36      	bgt.n	8005210 <_printf_float+0x360>
 80051a2:	f04f 0b00 	mov.w	fp, #0
 80051a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051aa:	f104 021a 	add.w	r2, r4, #26
 80051ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051b0:	9306      	str	r3, [sp, #24]
 80051b2:	eba3 0309 	sub.w	r3, r3, r9
 80051b6:	455b      	cmp	r3, fp
 80051b8:	dc31      	bgt.n	800521e <_printf_float+0x36e>
 80051ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051bc:	459a      	cmp	sl, r3
 80051be:	dc3a      	bgt.n	8005236 <_printf_float+0x386>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	07da      	lsls	r2, r3, #31
 80051c4:	d437      	bmi.n	8005236 <_printf_float+0x386>
 80051c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c8:	ebaa 0903 	sub.w	r9, sl, r3
 80051cc:	9b06      	ldr	r3, [sp, #24]
 80051ce:	ebaa 0303 	sub.w	r3, sl, r3
 80051d2:	4599      	cmp	r9, r3
 80051d4:	bfa8      	it	ge
 80051d6:	4699      	movge	r9, r3
 80051d8:	f1b9 0f00 	cmp.w	r9, #0
 80051dc:	dc33      	bgt.n	8005246 <_printf_float+0x396>
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051e6:	f104 0b1a 	add.w	fp, r4, #26
 80051ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ec:	ebaa 0303 	sub.w	r3, sl, r3
 80051f0:	eba3 0309 	sub.w	r3, r3, r9
 80051f4:	4543      	cmp	r3, r8
 80051f6:	f77f af79 	ble.w	80050ec <_printf_float+0x23c>
 80051fa:	2301      	movs	r3, #1
 80051fc:	465a      	mov	r2, fp
 80051fe:	4631      	mov	r1, r6
 8005200:	4628      	mov	r0, r5
 8005202:	47b8      	blx	r7
 8005204:	3001      	adds	r0, #1
 8005206:	f43f aeae 	beq.w	8004f66 <_printf_float+0xb6>
 800520a:	f108 0801 	add.w	r8, r8, #1
 800520e:	e7ec      	b.n	80051ea <_printf_float+0x33a>
 8005210:	4642      	mov	r2, r8
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	d1c2      	bne.n	80051a2 <_printf_float+0x2f2>
 800521c:	e6a3      	b.n	8004f66 <_printf_float+0xb6>
 800521e:	2301      	movs	r3, #1
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	9206      	str	r2, [sp, #24]
 8005226:	47b8      	blx	r7
 8005228:	3001      	adds	r0, #1
 800522a:	f43f ae9c 	beq.w	8004f66 <_printf_float+0xb6>
 800522e:	9a06      	ldr	r2, [sp, #24]
 8005230:	f10b 0b01 	add.w	fp, fp, #1
 8005234:	e7bb      	b.n	80051ae <_printf_float+0x2fe>
 8005236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d1c0      	bne.n	80051c6 <_printf_float+0x316>
 8005244:	e68f      	b.n	8004f66 <_printf_float+0xb6>
 8005246:	9a06      	ldr	r2, [sp, #24]
 8005248:	464b      	mov	r3, r9
 800524a:	4442      	add	r2, r8
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	d1c3      	bne.n	80051de <_printf_float+0x32e>
 8005256:	e686      	b.n	8004f66 <_printf_float+0xb6>
 8005258:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800525c:	f1ba 0f01 	cmp.w	sl, #1
 8005260:	dc01      	bgt.n	8005266 <_printf_float+0x3b6>
 8005262:	07db      	lsls	r3, r3, #31
 8005264:	d536      	bpl.n	80052d4 <_printf_float+0x424>
 8005266:	2301      	movs	r3, #1
 8005268:	4642      	mov	r2, r8
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	f43f ae78 	beq.w	8004f66 <_printf_float+0xb6>
 8005276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800527a:	4631      	mov	r1, r6
 800527c:	4628      	mov	r0, r5
 800527e:	47b8      	blx	r7
 8005280:	3001      	adds	r0, #1
 8005282:	f43f ae70 	beq.w	8004f66 <_printf_float+0xb6>
 8005286:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800528a:	2200      	movs	r2, #0
 800528c:	2300      	movs	r3, #0
 800528e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005292:	f7fb fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005296:	b9c0      	cbnz	r0, 80052ca <_printf_float+0x41a>
 8005298:	4653      	mov	r3, sl
 800529a:	f108 0201 	add.w	r2, r8, #1
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	d10c      	bne.n	80052c2 <_printf_float+0x412>
 80052a8:	e65d      	b.n	8004f66 <_printf_float+0xb6>
 80052aa:	2301      	movs	r3, #1
 80052ac:	465a      	mov	r2, fp
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	f43f ae56 	beq.w	8004f66 <_printf_float+0xb6>
 80052ba:	f108 0801 	add.w	r8, r8, #1
 80052be:	45d0      	cmp	r8, sl
 80052c0:	dbf3      	blt.n	80052aa <_printf_float+0x3fa>
 80052c2:	464b      	mov	r3, r9
 80052c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052c8:	e6df      	b.n	800508a <_printf_float+0x1da>
 80052ca:	f04f 0800 	mov.w	r8, #0
 80052ce:	f104 0b1a 	add.w	fp, r4, #26
 80052d2:	e7f4      	b.n	80052be <_printf_float+0x40e>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4642      	mov	r2, r8
 80052d8:	e7e1      	b.n	800529e <_printf_float+0x3ee>
 80052da:	2301      	movs	r3, #1
 80052dc:	464a      	mov	r2, r9
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f ae3e 	beq.w	8004f66 <_printf_float+0xb6>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	4543      	cmp	r3, r8
 80052f6:	dcf0      	bgt.n	80052da <_printf_float+0x42a>
 80052f8:	e6fc      	b.n	80050f4 <_printf_float+0x244>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	f104 0919 	add.w	r9, r4, #25
 8005302:	e7f4      	b.n	80052ee <_printf_float+0x43e>

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4698      	mov	r8, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005320:	4607      	mov	r7, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc26      	bgt.n	800539a <_printf_common+0x96>
 800534c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	3b00      	subs	r3, #0
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d42b      	bmi.n	80053b4 <_printf_common+0xb0>
 800535c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005360:	4641      	mov	r1, r8
 8005362:	4638      	mov	r0, r7
 8005364:	47c8      	blx	r9
 8005366:	3001      	adds	r0, #1
 8005368:	d01e      	beq.n	80053a8 <_printf_common+0xa4>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	2b04      	cmp	r3, #4
 8005374:	bf02      	ittt	eq
 8005376:	68e5      	ldreq	r5, [r4, #12]
 8005378:	6833      	ldreq	r3, [r6, #0]
 800537a:	1aed      	subeq	r5, r5, r3
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	bf0c      	ite	eq
 8005380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005384:	2500      	movne	r5, #0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfc4      	itt	gt
 800538a:	1a9b      	subgt	r3, r3, r2
 800538c:	18ed      	addgt	r5, r5, r3
 800538e:	2600      	movs	r6, #0
 8005390:	341a      	adds	r4, #26
 8005392:	42b5      	cmp	r5, r6
 8005394:	d11a      	bne.n	80053cc <_printf_common+0xc8>
 8005396:	2000      	movs	r0, #0
 8005398:	e008      	b.n	80053ac <_printf_common+0xa8>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4641      	mov	r1, r8
 80053a0:	4638      	mov	r0, r7
 80053a2:	47c8      	blx	r9
 80053a4:	3001      	adds	r0, #1
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0xac>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7c6      	b.n	8005342 <_printf_common+0x3e>
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	2030      	movs	r0, #48	@ 0x30
 80053ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053be:	4422      	add	r2, r4
 80053c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053c8:	3302      	adds	r3, #2
 80053ca:	e7c7      	b.n	800535c <_printf_common+0x58>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4622      	mov	r2, r4
 80053d0:	4641      	mov	r1, r8
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c8      	blx	r9
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0e6      	beq.n	80053a8 <_printf_common+0xa4>
 80053da:	3601      	adds	r6, #1
 80053dc:	e7d9      	b.n	8005392 <_printf_common+0x8e>
	...

080053e0 <_printf_i>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	7e0f      	ldrb	r7, [r1, #24]
 80053e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053e8:	2f78      	cmp	r7, #120	@ 0x78
 80053ea:	4691      	mov	r9, r2
 80053ec:	4680      	mov	r8, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	469a      	mov	sl, r3
 80053f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053f6:	d807      	bhi.n	8005408 <_printf_i+0x28>
 80053f8:	2f62      	cmp	r7, #98	@ 0x62
 80053fa:	d80a      	bhi.n	8005412 <_printf_i+0x32>
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	f000 80d1 	beq.w	80055a4 <_printf_i+0x1c4>
 8005402:	2f58      	cmp	r7, #88	@ 0x58
 8005404:	f000 80b8 	beq.w	8005578 <_printf_i+0x198>
 8005408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800540c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005410:	e03a      	b.n	8005488 <_printf_i+0xa8>
 8005412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005416:	2b15      	cmp	r3, #21
 8005418:	d8f6      	bhi.n	8005408 <_printf_i+0x28>
 800541a:	a101      	add	r1, pc, #4	@ (adr r1, 8005420 <_printf_i+0x40>)
 800541c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005420:	08005479 	.word	0x08005479
 8005424:	0800548d 	.word	0x0800548d
 8005428:	08005409 	.word	0x08005409
 800542c:	08005409 	.word	0x08005409
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005409 	.word	0x08005409
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	0800558b 	.word	0x0800558b
 8005450:	080054b7 	.word	0x080054b7
 8005454:	08005545 	.word	0x08005545
 8005458:	08005409 	.word	0x08005409
 800545c:	08005409 	.word	0x08005409
 8005460:	080055ad 	.word	0x080055ad
 8005464:	08005409 	.word	0x08005409
 8005468:	080054b7 	.word	0x080054b7
 800546c:	08005409 	.word	0x08005409
 8005470:	08005409 	.word	0x08005409
 8005474:	0800554d 	.word	0x0800554d
 8005478:	6833      	ldr	r3, [r6, #0]
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6032      	str	r2, [r6, #0]
 8005480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e09c      	b.n	80055c6 <_printf_i+0x1e6>
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1d19      	adds	r1, r3, #4
 8005492:	6031      	str	r1, [r6, #0]
 8005494:	0606      	lsls	r6, r0, #24
 8005496:	d501      	bpl.n	800549c <_printf_i+0xbc>
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	e003      	b.n	80054a4 <_printf_i+0xc4>
 800549c:	0645      	lsls	r5, r0, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0xb8>
 80054a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	da03      	bge.n	80054b0 <_printf_i+0xd0>
 80054a8:	232d      	movs	r3, #45	@ 0x2d
 80054aa:	426d      	negs	r5, r5
 80054ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b0:	4858      	ldr	r0, [pc, #352]	@ (8005614 <_printf_i+0x234>)
 80054b2:	230a      	movs	r3, #10
 80054b4:	e011      	b.n	80054da <_printf_i+0xfa>
 80054b6:	6821      	ldr	r1, [r4, #0]
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	0608      	lsls	r0, r1, #24
 80054bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c0:	d402      	bmi.n	80054c8 <_printf_i+0xe8>
 80054c2:	0649      	lsls	r1, r1, #25
 80054c4:	bf48      	it	mi
 80054c6:	b2ad      	uxthmi	r5, r5
 80054c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80054ca:	4852      	ldr	r0, [pc, #328]	@ (8005614 <_printf_i+0x234>)
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	bf14      	ite	ne
 80054d0:	230a      	movne	r3, #10
 80054d2:	2308      	moveq	r3, #8
 80054d4:	2100      	movs	r1, #0
 80054d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054da:	6866      	ldr	r6, [r4, #4]
 80054dc:	60a6      	str	r6, [r4, #8]
 80054de:	2e00      	cmp	r6, #0
 80054e0:	db05      	blt.n	80054ee <_printf_i+0x10e>
 80054e2:	6821      	ldr	r1, [r4, #0]
 80054e4:	432e      	orrs	r6, r5
 80054e6:	f021 0104 	bic.w	r1, r1, #4
 80054ea:	6021      	str	r1, [r4, #0]
 80054ec:	d04b      	beq.n	8005586 <_printf_i+0x1a6>
 80054ee:	4616      	mov	r6, r2
 80054f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80054f4:	fb03 5711 	mls	r7, r3, r1, r5
 80054f8:	5dc7      	ldrb	r7, [r0, r7]
 80054fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054fe:	462f      	mov	r7, r5
 8005500:	42bb      	cmp	r3, r7
 8005502:	460d      	mov	r5, r1
 8005504:	d9f4      	bls.n	80054f0 <_printf_i+0x110>
 8005506:	2b08      	cmp	r3, #8
 8005508:	d10b      	bne.n	8005522 <_printf_i+0x142>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	07df      	lsls	r7, r3, #31
 800550e:	d508      	bpl.n	8005522 <_printf_i+0x142>
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	6861      	ldr	r1, [r4, #4]
 8005514:	4299      	cmp	r1, r3
 8005516:	bfde      	ittt	le
 8005518:	2330      	movle	r3, #48	@ 0x30
 800551a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800551e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005522:	1b92      	subs	r2, r2, r6
 8005524:	6122      	str	r2, [r4, #16]
 8005526:	f8cd a000 	str.w	sl, [sp]
 800552a:	464b      	mov	r3, r9
 800552c:	aa03      	add	r2, sp, #12
 800552e:	4621      	mov	r1, r4
 8005530:	4640      	mov	r0, r8
 8005532:	f7ff fee7 	bl	8005304 <_printf_common>
 8005536:	3001      	adds	r0, #1
 8005538:	d14a      	bne.n	80055d0 <_printf_i+0x1f0>
 800553a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800553e:	b004      	add	sp, #16
 8005540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f043 0320 	orr.w	r3, r3, #32
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	4832      	ldr	r0, [pc, #200]	@ (8005618 <_printf_i+0x238>)
 800554e:	2778      	movs	r7, #120	@ 0x78
 8005550:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	6831      	ldr	r1, [r6, #0]
 8005558:	061f      	lsls	r7, r3, #24
 800555a:	f851 5b04 	ldr.w	r5, [r1], #4
 800555e:	d402      	bmi.n	8005566 <_printf_i+0x186>
 8005560:	065f      	lsls	r7, r3, #25
 8005562:	bf48      	it	mi
 8005564:	b2ad      	uxthmi	r5, r5
 8005566:	6031      	str	r1, [r6, #0]
 8005568:	07d9      	lsls	r1, r3, #31
 800556a:	bf44      	itt	mi
 800556c:	f043 0320 	orrmi.w	r3, r3, #32
 8005570:	6023      	strmi	r3, [r4, #0]
 8005572:	b11d      	cbz	r5, 800557c <_printf_i+0x19c>
 8005574:	2310      	movs	r3, #16
 8005576:	e7ad      	b.n	80054d4 <_printf_i+0xf4>
 8005578:	4826      	ldr	r0, [pc, #152]	@ (8005614 <_printf_i+0x234>)
 800557a:	e7e9      	b.n	8005550 <_printf_i+0x170>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	f023 0320 	bic.w	r3, r3, #32
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	e7f6      	b.n	8005574 <_printf_i+0x194>
 8005586:	4616      	mov	r6, r2
 8005588:	e7bd      	b.n	8005506 <_printf_i+0x126>
 800558a:	6833      	ldr	r3, [r6, #0]
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	6961      	ldr	r1, [r4, #20]
 8005590:	1d18      	adds	r0, r3, #4
 8005592:	6030      	str	r0, [r6, #0]
 8005594:	062e      	lsls	r6, r5, #24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	d501      	bpl.n	800559e <_printf_i+0x1be>
 800559a:	6019      	str	r1, [r3, #0]
 800559c:	e002      	b.n	80055a4 <_printf_i+0x1c4>
 800559e:	0668      	lsls	r0, r5, #25
 80055a0:	d5fb      	bpl.n	800559a <_printf_i+0x1ba>
 80055a2:	8019      	strh	r1, [r3, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	4616      	mov	r6, r2
 80055aa:	e7bc      	b.n	8005526 <_printf_i+0x146>
 80055ac:	6833      	ldr	r3, [r6, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	6032      	str	r2, [r6, #0]
 80055b2:	681e      	ldr	r6, [r3, #0]
 80055b4:	6862      	ldr	r2, [r4, #4]
 80055b6:	2100      	movs	r1, #0
 80055b8:	4630      	mov	r0, r6
 80055ba:	f7fa fe09 	bl	80001d0 <memchr>
 80055be:	b108      	cbz	r0, 80055c4 <_printf_i+0x1e4>
 80055c0:	1b80      	subs	r0, r0, r6
 80055c2:	6060      	str	r0, [r4, #4]
 80055c4:	6863      	ldr	r3, [r4, #4]
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	2300      	movs	r3, #0
 80055ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ce:	e7aa      	b.n	8005526 <_printf_i+0x146>
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	4632      	mov	r2, r6
 80055d4:	4649      	mov	r1, r9
 80055d6:	4640      	mov	r0, r8
 80055d8:	47d0      	blx	sl
 80055da:	3001      	adds	r0, #1
 80055dc:	d0ad      	beq.n	800553a <_printf_i+0x15a>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	079b      	lsls	r3, r3, #30
 80055e2:	d413      	bmi.n	800560c <_printf_i+0x22c>
 80055e4:	68e0      	ldr	r0, [r4, #12]
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	4298      	cmp	r0, r3
 80055ea:	bfb8      	it	lt
 80055ec:	4618      	movlt	r0, r3
 80055ee:	e7a6      	b.n	800553e <_printf_i+0x15e>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4632      	mov	r2, r6
 80055f4:	4649      	mov	r1, r9
 80055f6:	4640      	mov	r0, r8
 80055f8:	47d0      	blx	sl
 80055fa:	3001      	adds	r0, #1
 80055fc:	d09d      	beq.n	800553a <_printf_i+0x15a>
 80055fe:	3501      	adds	r5, #1
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	9903      	ldr	r1, [sp, #12]
 8005604:	1a5b      	subs	r3, r3, r1
 8005606:	42ab      	cmp	r3, r5
 8005608:	dcf2      	bgt.n	80055f0 <_printf_i+0x210>
 800560a:	e7eb      	b.n	80055e4 <_printf_i+0x204>
 800560c:	2500      	movs	r5, #0
 800560e:	f104 0619 	add.w	r6, r4, #25
 8005612:	e7f5      	b.n	8005600 <_printf_i+0x220>
 8005614:	080078e2 	.word	0x080078e2
 8005618:	080078f3 	.word	0x080078f3

0800561c <std>:
 800561c:	2300      	movs	r3, #0
 800561e:	b510      	push	{r4, lr}
 8005620:	4604      	mov	r4, r0
 8005622:	e9c0 3300 	strd	r3, r3, [r0]
 8005626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800562a:	6083      	str	r3, [r0, #8]
 800562c:	8181      	strh	r1, [r0, #12]
 800562e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005630:	81c2      	strh	r2, [r0, #14]
 8005632:	6183      	str	r3, [r0, #24]
 8005634:	4619      	mov	r1, r3
 8005636:	2208      	movs	r2, #8
 8005638:	305c      	adds	r0, #92	@ 0x5c
 800563a:	f000 f9f9 	bl	8005a30 <memset>
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <std+0x58>)
 8005640:	6263      	str	r3, [r4, #36]	@ 0x24
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <std+0x5c>)
 8005644:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <std+0x60>)
 8005648:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <std+0x64>)
 800564c:	6323      	str	r3, [r4, #48]	@ 0x30
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <std+0x68>)
 8005650:	6224      	str	r4, [r4, #32]
 8005652:	429c      	cmp	r4, r3
 8005654:	d006      	beq.n	8005664 <std+0x48>
 8005656:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800565a:	4294      	cmp	r4, r2
 800565c:	d002      	beq.n	8005664 <std+0x48>
 800565e:	33d0      	adds	r3, #208	@ 0xd0
 8005660:	429c      	cmp	r4, r3
 8005662:	d105      	bne.n	8005670 <std+0x54>
 8005664:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800566c:	f000 ba5c 	b.w	8005b28 <__retarget_lock_init_recursive>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	bf00      	nop
 8005674:	08005881 	.word	0x08005881
 8005678:	080058a3 	.word	0x080058a3
 800567c:	080058db 	.word	0x080058db
 8005680:	080058ff 	.word	0x080058ff
 8005684:	200002cc 	.word	0x200002cc

08005688 <stdio_exit_handler>:
 8005688:	4a02      	ldr	r2, [pc, #8]	@ (8005694 <stdio_exit_handler+0xc>)
 800568a:	4903      	ldr	r1, [pc, #12]	@ (8005698 <stdio_exit_handler+0x10>)
 800568c:	4803      	ldr	r0, [pc, #12]	@ (800569c <stdio_exit_handler+0x14>)
 800568e:	f000 b869 	b.w	8005764 <_fwalk_sglue>
 8005692:	bf00      	nop
 8005694:	2000000c 	.word	0x2000000c
 8005698:	08007461 	.word	0x08007461
 800569c:	2000001c 	.word	0x2000001c

080056a0 <cleanup_stdio>:
 80056a0:	6841      	ldr	r1, [r0, #4]
 80056a2:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <cleanup_stdio+0x34>)
 80056a4:	4299      	cmp	r1, r3
 80056a6:	b510      	push	{r4, lr}
 80056a8:	4604      	mov	r4, r0
 80056aa:	d001      	beq.n	80056b0 <cleanup_stdio+0x10>
 80056ac:	f001 fed8 	bl	8007460 <_fflush_r>
 80056b0:	68a1      	ldr	r1, [r4, #8]
 80056b2:	4b09      	ldr	r3, [pc, #36]	@ (80056d8 <cleanup_stdio+0x38>)
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d002      	beq.n	80056be <cleanup_stdio+0x1e>
 80056b8:	4620      	mov	r0, r4
 80056ba:	f001 fed1 	bl	8007460 <_fflush_r>
 80056be:	68e1      	ldr	r1, [r4, #12]
 80056c0:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <cleanup_stdio+0x3c>)
 80056c2:	4299      	cmp	r1, r3
 80056c4:	d004      	beq.n	80056d0 <cleanup_stdio+0x30>
 80056c6:	4620      	mov	r0, r4
 80056c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056cc:	f001 bec8 	b.w	8007460 <_fflush_r>
 80056d0:	bd10      	pop	{r4, pc}
 80056d2:	bf00      	nop
 80056d4:	200002cc 	.word	0x200002cc
 80056d8:	20000334 	.word	0x20000334
 80056dc:	2000039c 	.word	0x2000039c

080056e0 <global_stdio_init.part.0>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <global_stdio_init.part.0+0x30>)
 80056e4:	4c0b      	ldr	r4, [pc, #44]	@ (8005714 <global_stdio_init.part.0+0x34>)
 80056e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005718 <global_stdio_init.part.0+0x38>)
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	4620      	mov	r0, r4
 80056ec:	2200      	movs	r2, #0
 80056ee:	2104      	movs	r1, #4
 80056f0:	f7ff ff94 	bl	800561c <std>
 80056f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056f8:	2201      	movs	r2, #1
 80056fa:	2109      	movs	r1, #9
 80056fc:	f7ff ff8e 	bl	800561c <std>
 8005700:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005704:	2202      	movs	r2, #2
 8005706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570a:	2112      	movs	r1, #18
 800570c:	f7ff bf86 	b.w	800561c <std>
 8005710:	20000404 	.word	0x20000404
 8005714:	200002cc 	.word	0x200002cc
 8005718:	08005689 	.word	0x08005689

0800571c <__sfp_lock_acquire>:
 800571c:	4801      	ldr	r0, [pc, #4]	@ (8005724 <__sfp_lock_acquire+0x8>)
 800571e:	f000 ba04 	b.w	8005b2a <__retarget_lock_acquire_recursive>
 8005722:	bf00      	nop
 8005724:	2000040d 	.word	0x2000040d

08005728 <__sfp_lock_release>:
 8005728:	4801      	ldr	r0, [pc, #4]	@ (8005730 <__sfp_lock_release+0x8>)
 800572a:	f000 b9ff 	b.w	8005b2c <__retarget_lock_release_recursive>
 800572e:	bf00      	nop
 8005730:	2000040d 	.word	0x2000040d

08005734 <__sinit>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4604      	mov	r4, r0
 8005738:	f7ff fff0 	bl	800571c <__sfp_lock_acquire>
 800573c:	6a23      	ldr	r3, [r4, #32]
 800573e:	b11b      	cbz	r3, 8005748 <__sinit+0x14>
 8005740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005744:	f7ff bff0 	b.w	8005728 <__sfp_lock_release>
 8005748:	4b04      	ldr	r3, [pc, #16]	@ (800575c <__sinit+0x28>)
 800574a:	6223      	str	r3, [r4, #32]
 800574c:	4b04      	ldr	r3, [pc, #16]	@ (8005760 <__sinit+0x2c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f5      	bne.n	8005740 <__sinit+0xc>
 8005754:	f7ff ffc4 	bl	80056e0 <global_stdio_init.part.0>
 8005758:	e7f2      	b.n	8005740 <__sinit+0xc>
 800575a:	bf00      	nop
 800575c:	080056a1 	.word	0x080056a1
 8005760:	20000404 	.word	0x20000404

08005764 <_fwalk_sglue>:
 8005764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005768:	4607      	mov	r7, r0
 800576a:	4688      	mov	r8, r1
 800576c:	4614      	mov	r4, r2
 800576e:	2600      	movs	r6, #0
 8005770:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005774:	f1b9 0901 	subs.w	r9, r9, #1
 8005778:	d505      	bpl.n	8005786 <_fwalk_sglue+0x22>
 800577a:	6824      	ldr	r4, [r4, #0]
 800577c:	2c00      	cmp	r4, #0
 800577e:	d1f7      	bne.n	8005770 <_fwalk_sglue+0xc>
 8005780:	4630      	mov	r0, r6
 8005782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005786:	89ab      	ldrh	r3, [r5, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d907      	bls.n	800579c <_fwalk_sglue+0x38>
 800578c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005790:	3301      	adds	r3, #1
 8005792:	d003      	beq.n	800579c <_fwalk_sglue+0x38>
 8005794:	4629      	mov	r1, r5
 8005796:	4638      	mov	r0, r7
 8005798:	47c0      	blx	r8
 800579a:	4306      	orrs	r6, r0
 800579c:	3568      	adds	r5, #104	@ 0x68
 800579e:	e7e9      	b.n	8005774 <_fwalk_sglue+0x10>

080057a0 <iprintf>:
 80057a0:	b40f      	push	{r0, r1, r2, r3}
 80057a2:	b507      	push	{r0, r1, r2, lr}
 80057a4:	4906      	ldr	r1, [pc, #24]	@ (80057c0 <iprintf+0x20>)
 80057a6:	ab04      	add	r3, sp, #16
 80057a8:	6808      	ldr	r0, [r1, #0]
 80057aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ae:	6881      	ldr	r1, [r0, #8]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	f001 fcb9 	bl	8007128 <_vfiprintf_r>
 80057b6:	b003      	add	sp, #12
 80057b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057bc:	b004      	add	sp, #16
 80057be:	4770      	bx	lr
 80057c0:	20000018 	.word	0x20000018

080057c4 <_puts_r>:
 80057c4:	6a03      	ldr	r3, [r0, #32]
 80057c6:	b570      	push	{r4, r5, r6, lr}
 80057c8:	6884      	ldr	r4, [r0, #8]
 80057ca:	4605      	mov	r5, r0
 80057cc:	460e      	mov	r6, r1
 80057ce:	b90b      	cbnz	r3, 80057d4 <_puts_r+0x10>
 80057d0:	f7ff ffb0 	bl	8005734 <__sinit>
 80057d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057d6:	07db      	lsls	r3, r3, #31
 80057d8:	d405      	bmi.n	80057e6 <_puts_r+0x22>
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	0598      	lsls	r0, r3, #22
 80057de:	d402      	bmi.n	80057e6 <_puts_r+0x22>
 80057e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057e2:	f000 f9a2 	bl	8005b2a <__retarget_lock_acquire_recursive>
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	0719      	lsls	r1, r3, #28
 80057ea:	d502      	bpl.n	80057f2 <_puts_r+0x2e>
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d135      	bne.n	800585e <_puts_r+0x9a>
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f8c5 	bl	8005984 <__swsetup_r>
 80057fa:	b380      	cbz	r0, 800585e <_puts_r+0x9a>
 80057fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005802:	07da      	lsls	r2, r3, #31
 8005804:	d405      	bmi.n	8005812 <_puts_r+0x4e>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	059b      	lsls	r3, r3, #22
 800580a:	d402      	bmi.n	8005812 <_puts_r+0x4e>
 800580c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800580e:	f000 f98d 	bl	8005b2c <__retarget_lock_release_recursive>
 8005812:	4628      	mov	r0, r5
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	2b00      	cmp	r3, #0
 8005818:	da04      	bge.n	8005824 <_puts_r+0x60>
 800581a:	69a2      	ldr	r2, [r4, #24]
 800581c:	429a      	cmp	r2, r3
 800581e:	dc17      	bgt.n	8005850 <_puts_r+0x8c>
 8005820:	290a      	cmp	r1, #10
 8005822:	d015      	beq.n	8005850 <_puts_r+0x8c>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	6022      	str	r2, [r4, #0]
 800582a:	7019      	strb	r1, [r3, #0]
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005832:	3b01      	subs	r3, #1
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	2900      	cmp	r1, #0
 8005838:	d1ed      	bne.n	8005816 <_puts_r+0x52>
 800583a:	2b00      	cmp	r3, #0
 800583c:	da11      	bge.n	8005862 <_puts_r+0x9e>
 800583e:	4622      	mov	r2, r4
 8005840:	210a      	movs	r1, #10
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f85f 	bl	8005906 <__swbuf_r>
 8005848:	3001      	adds	r0, #1
 800584a:	d0d7      	beq.n	80057fc <_puts_r+0x38>
 800584c:	250a      	movs	r5, #10
 800584e:	e7d7      	b.n	8005800 <_puts_r+0x3c>
 8005850:	4622      	mov	r2, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f857 	bl	8005906 <__swbuf_r>
 8005858:	3001      	adds	r0, #1
 800585a:	d1e7      	bne.n	800582c <_puts_r+0x68>
 800585c:	e7ce      	b.n	80057fc <_puts_r+0x38>
 800585e:	3e01      	subs	r6, #1
 8005860:	e7e4      	b.n	800582c <_puts_r+0x68>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	6022      	str	r2, [r4, #0]
 8005868:	220a      	movs	r2, #10
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e7ee      	b.n	800584c <_puts_r+0x88>
	...

08005870 <puts>:
 8005870:	4b02      	ldr	r3, [pc, #8]	@ (800587c <puts+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f7ff bfa5 	b.w	80057c4 <_puts_r>
 800587a:	bf00      	nop
 800587c:	20000018 	.word	0x20000018

08005880 <__sread>:
 8005880:	b510      	push	{r4, lr}
 8005882:	460c      	mov	r4, r1
 8005884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005888:	f000 f900 	bl	8005a8c <_read_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	bfab      	itete	ge
 8005890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005892:	89a3      	ldrhlt	r3, [r4, #12]
 8005894:	181b      	addge	r3, r3, r0
 8005896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800589a:	bfac      	ite	ge
 800589c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800589e:	81a3      	strhlt	r3, [r4, #12]
 80058a0:	bd10      	pop	{r4, pc}

080058a2 <__swrite>:
 80058a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	461f      	mov	r7, r3
 80058a8:	898b      	ldrh	r3, [r1, #12]
 80058aa:	05db      	lsls	r3, r3, #23
 80058ac:	4605      	mov	r5, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	4616      	mov	r6, r2
 80058b2:	d505      	bpl.n	80058c0 <__swrite+0x1e>
 80058b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b8:	2302      	movs	r3, #2
 80058ba:	2200      	movs	r2, #0
 80058bc:	f000 f8d4 	bl	8005a68 <_lseek_r>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	4632      	mov	r2, r6
 80058ce:	463b      	mov	r3, r7
 80058d0:	4628      	mov	r0, r5
 80058d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	f000 b8eb 	b.w	8005ab0 <_write_r>

080058da <__sseek>:
 80058da:	b510      	push	{r4, lr}
 80058dc:	460c      	mov	r4, r1
 80058de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e2:	f000 f8c1 	bl	8005a68 <_lseek_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	bf15      	itete	ne
 80058ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058f6:	81a3      	strheq	r3, [r4, #12]
 80058f8:	bf18      	it	ne
 80058fa:	81a3      	strhne	r3, [r4, #12]
 80058fc:	bd10      	pop	{r4, pc}

080058fe <__sclose>:
 80058fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005902:	f000 b8a1 	b.w	8005a48 <_close_r>

08005906 <__swbuf_r>:
 8005906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005908:	460e      	mov	r6, r1
 800590a:	4614      	mov	r4, r2
 800590c:	4605      	mov	r5, r0
 800590e:	b118      	cbz	r0, 8005918 <__swbuf_r+0x12>
 8005910:	6a03      	ldr	r3, [r0, #32]
 8005912:	b90b      	cbnz	r3, 8005918 <__swbuf_r+0x12>
 8005914:	f7ff ff0e 	bl	8005734 <__sinit>
 8005918:	69a3      	ldr	r3, [r4, #24]
 800591a:	60a3      	str	r3, [r4, #8]
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	071a      	lsls	r2, r3, #28
 8005920:	d501      	bpl.n	8005926 <__swbuf_r+0x20>
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	b943      	cbnz	r3, 8005938 <__swbuf_r+0x32>
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	f000 f82b 	bl	8005984 <__swsetup_r>
 800592e:	b118      	cbz	r0, 8005938 <__swbuf_r+0x32>
 8005930:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005934:	4638      	mov	r0, r7
 8005936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	6922      	ldr	r2, [r4, #16]
 800593c:	1a98      	subs	r0, r3, r2
 800593e:	6963      	ldr	r3, [r4, #20]
 8005940:	b2f6      	uxtb	r6, r6
 8005942:	4283      	cmp	r3, r0
 8005944:	4637      	mov	r7, r6
 8005946:	dc05      	bgt.n	8005954 <__swbuf_r+0x4e>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f001 fd88 	bl	8007460 <_fflush_r>
 8005950:	2800      	cmp	r0, #0
 8005952:	d1ed      	bne.n	8005930 <__swbuf_r+0x2a>
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	3b01      	subs	r3, #1
 8005958:	60a3      	str	r3, [r4, #8]
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	6022      	str	r2, [r4, #0]
 8005960:	701e      	strb	r6, [r3, #0]
 8005962:	6962      	ldr	r2, [r4, #20]
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	429a      	cmp	r2, r3
 8005968:	d004      	beq.n	8005974 <__swbuf_r+0x6e>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	07db      	lsls	r3, r3, #31
 800596e:	d5e1      	bpl.n	8005934 <__swbuf_r+0x2e>
 8005970:	2e0a      	cmp	r6, #10
 8005972:	d1df      	bne.n	8005934 <__swbuf_r+0x2e>
 8005974:	4621      	mov	r1, r4
 8005976:	4628      	mov	r0, r5
 8005978:	f001 fd72 	bl	8007460 <_fflush_r>
 800597c:	2800      	cmp	r0, #0
 800597e:	d0d9      	beq.n	8005934 <__swbuf_r+0x2e>
 8005980:	e7d6      	b.n	8005930 <__swbuf_r+0x2a>
	...

08005984 <__swsetup_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4b29      	ldr	r3, [pc, #164]	@ (8005a2c <__swsetup_r+0xa8>)
 8005988:	4605      	mov	r5, r0
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	460c      	mov	r4, r1
 800598e:	b118      	cbz	r0, 8005998 <__swsetup_r+0x14>
 8005990:	6a03      	ldr	r3, [r0, #32]
 8005992:	b90b      	cbnz	r3, 8005998 <__swsetup_r+0x14>
 8005994:	f7ff fece 	bl	8005734 <__sinit>
 8005998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599c:	0719      	lsls	r1, r3, #28
 800599e:	d422      	bmi.n	80059e6 <__swsetup_r+0x62>
 80059a0:	06da      	lsls	r2, r3, #27
 80059a2:	d407      	bmi.n	80059b4 <__swsetup_r+0x30>
 80059a4:	2209      	movs	r2, #9
 80059a6:	602a      	str	r2, [r5, #0]
 80059a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059b2:	e033      	b.n	8005a1c <__swsetup_r+0x98>
 80059b4:	0758      	lsls	r0, r3, #29
 80059b6:	d512      	bpl.n	80059de <__swsetup_r+0x5a>
 80059b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ba:	b141      	cbz	r1, 80059ce <__swsetup_r+0x4a>
 80059bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059c0:	4299      	cmp	r1, r3
 80059c2:	d002      	beq.n	80059ca <__swsetup_r+0x46>
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 ff0b 	bl	80067e0 <_free_r>
 80059ca:	2300      	movs	r3, #0
 80059cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	2300      	movs	r3, #0
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f043 0308 	orr.w	r3, r3, #8
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	b94b      	cbnz	r3, 80059fe <__swsetup_r+0x7a>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f4:	d003      	beq.n	80059fe <__swsetup_r+0x7a>
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f001 fd7f 	bl	80074fc <__smakebuf_r>
 80059fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a02:	f013 0201 	ands.w	r2, r3, #1
 8005a06:	d00a      	beq.n	8005a1e <__swsetup_r+0x9a>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	60a2      	str	r2, [r4, #8]
 8005a0c:	6962      	ldr	r2, [r4, #20]
 8005a0e:	4252      	negs	r2, r2
 8005a10:	61a2      	str	r2, [r4, #24]
 8005a12:	6922      	ldr	r2, [r4, #16]
 8005a14:	b942      	cbnz	r2, 8005a28 <__swsetup_r+0xa4>
 8005a16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a1a:	d1c5      	bne.n	80059a8 <__swsetup_r+0x24>
 8005a1c:	bd38      	pop	{r3, r4, r5, pc}
 8005a1e:	0799      	lsls	r1, r3, #30
 8005a20:	bf58      	it	pl
 8005a22:	6962      	ldrpl	r2, [r4, #20]
 8005a24:	60a2      	str	r2, [r4, #8]
 8005a26:	e7f4      	b.n	8005a12 <__swsetup_r+0x8e>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	e7f7      	b.n	8005a1c <__swsetup_r+0x98>
 8005a2c:	20000018 	.word	0x20000018

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <_localeconv_r>:
 8005a40:	4800      	ldr	r0, [pc, #0]	@ (8005a44 <_localeconv_r+0x4>)
 8005a42:	4770      	bx	lr
 8005a44:	20000158 	.word	0x20000158

08005a48 <_close_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4d06      	ldr	r5, [pc, #24]	@ (8005a64 <_close_r+0x1c>)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4604      	mov	r4, r0
 8005a50:	4608      	mov	r0, r1
 8005a52:	602b      	str	r3, [r5, #0]
 8005a54:	f7fb ff56 	bl	8001904 <_close>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d102      	bne.n	8005a62 <_close_r+0x1a>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	b103      	cbz	r3, 8005a62 <_close_r+0x1a>
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	bd38      	pop	{r3, r4, r5, pc}
 8005a64:	20000408 	.word	0x20000408

08005a68 <_lseek_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d07      	ldr	r5, [pc, #28]	@ (8005a88 <_lseek_r+0x20>)
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	4608      	mov	r0, r1
 8005a70:	4611      	mov	r1, r2
 8005a72:	2200      	movs	r2, #0
 8005a74:	602a      	str	r2, [r5, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f7fb ff6b 	bl	8001952 <_lseek>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_lseek_r+0x1e>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_lseek_r+0x1e>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20000408 	.word	0x20000408

08005a8c <_read_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d07      	ldr	r5, [pc, #28]	@ (8005aac <_read_r+0x20>)
 8005a90:	4604      	mov	r4, r0
 8005a92:	4608      	mov	r0, r1
 8005a94:	4611      	mov	r1, r2
 8005a96:	2200      	movs	r2, #0
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f7fb ff15 	bl	80018ca <_read>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_read_r+0x1e>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_read_r+0x1e>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20000408 	.word	0x20000408

08005ab0 <_write_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	@ (8005ad0 <_write_r+0x20>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4611      	mov	r1, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7fb fb0a 	bl	80010d8 <_write>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_write_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_write_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000408 	.word	0x20000408

08005ad4 <__errno>:
 8005ad4:	4b01      	ldr	r3, [pc, #4]	@ (8005adc <__errno+0x8>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000018 	.word	0x20000018

08005ae0 <__libc_init_array>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b18 <__libc_init_array+0x38>)
 8005ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b1c <__libc_init_array+0x3c>)
 8005ae6:	1b64      	subs	r4, r4, r5
 8005ae8:	10a4      	asrs	r4, r4, #2
 8005aea:	2600      	movs	r6, #0
 8005aec:	42a6      	cmp	r6, r4
 8005aee:	d109      	bne.n	8005b04 <__libc_init_array+0x24>
 8005af0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b20 <__libc_init_array+0x40>)
 8005af2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b24 <__libc_init_array+0x44>)
 8005af4:	f001 fe2e 	bl	8007754 <_init>
 8005af8:	1b64      	subs	r4, r4, r5
 8005afa:	10a4      	asrs	r4, r4, #2
 8005afc:	2600      	movs	r6, #0
 8005afe:	42a6      	cmp	r6, r4
 8005b00:	d105      	bne.n	8005b0e <__libc_init_array+0x2e>
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b08:	4798      	blx	r3
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	e7ee      	b.n	8005aec <__libc_init_array+0xc>
 8005b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b12:	4798      	blx	r3
 8005b14:	3601      	adds	r6, #1
 8005b16:	e7f2      	b.n	8005afe <__libc_init_array+0x1e>
 8005b18:	08007c4c 	.word	0x08007c4c
 8005b1c:	08007c4c 	.word	0x08007c4c
 8005b20:	08007c4c 	.word	0x08007c4c
 8005b24:	08007c50 	.word	0x08007c50

08005b28 <__retarget_lock_init_recursive>:
 8005b28:	4770      	bx	lr

08005b2a <__retarget_lock_acquire_recursive>:
 8005b2a:	4770      	bx	lr

08005b2c <__retarget_lock_release_recursive>:
 8005b2c:	4770      	bx	lr

08005b2e <quorem>:
 8005b2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b32:	6903      	ldr	r3, [r0, #16]
 8005b34:	690c      	ldr	r4, [r1, #16]
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	4607      	mov	r7, r0
 8005b3a:	db7e      	blt.n	8005c3a <quorem+0x10c>
 8005b3c:	3c01      	subs	r4, #1
 8005b3e:	f101 0814 	add.w	r8, r1, #20
 8005b42:	00a3      	lsls	r3, r4, #2
 8005b44:	f100 0514 	add.w	r5, r0, #20
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b60:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b64:	d32e      	bcc.n	8005bc4 <quorem+0x96>
 8005b66:	f04f 0a00 	mov.w	sl, #0
 8005b6a:	46c4      	mov	ip, r8
 8005b6c:	46ae      	mov	lr, r5
 8005b6e:	46d3      	mov	fp, sl
 8005b70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b74:	b298      	uxth	r0, r3
 8005b76:	fb06 a000 	mla	r0, r6, r0, sl
 8005b7a:	0c02      	lsrs	r2, r0, #16
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	fb06 2303 	mla	r3, r6, r3, r2
 8005b82:	f8de 2000 	ldr.w	r2, [lr]
 8005b86:	b280      	uxth	r0, r0
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	1a12      	subs	r2, r2, r0
 8005b8c:	445a      	add	r2, fp
 8005b8e:	f8de 0000 	ldr.w	r0, [lr]
 8005b92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b9c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ba0:	b292      	uxth	r2, r2
 8005ba2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ba6:	45e1      	cmp	r9, ip
 8005ba8:	f84e 2b04 	str.w	r2, [lr], #4
 8005bac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bb0:	d2de      	bcs.n	8005b70 <quorem+0x42>
 8005bb2:	9b00      	ldr	r3, [sp, #0]
 8005bb4:	58eb      	ldr	r3, [r5, r3]
 8005bb6:	b92b      	cbnz	r3, 8005bc4 <quorem+0x96>
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	429d      	cmp	r5, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	d32f      	bcc.n	8005c22 <quorem+0xf4>
 8005bc2:	613c      	str	r4, [r7, #16]
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f001 f97d 	bl	8006ec4 <__mcmp>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	db25      	blt.n	8005c1a <quorem+0xec>
 8005bce:	4629      	mov	r1, r5
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bd6:	f8d1 c000 	ldr.w	ip, [r1]
 8005bda:	fa1f fe82 	uxth.w	lr, r2
 8005bde:	fa1f f38c 	uxth.w	r3, ip
 8005be2:	eba3 030e 	sub.w	r3, r3, lr
 8005be6:	4403      	add	r3, r0
 8005be8:	0c12      	lsrs	r2, r2, #16
 8005bea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bf8:	45c1      	cmp	r9, r8
 8005bfa:	f841 3b04 	str.w	r3, [r1], #4
 8005bfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c02:	d2e6      	bcs.n	8005bd2 <quorem+0xa4>
 8005c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c0c:	b922      	cbnz	r2, 8005c18 <quorem+0xea>
 8005c0e:	3b04      	subs	r3, #4
 8005c10:	429d      	cmp	r5, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	d30b      	bcc.n	8005c2e <quorem+0x100>
 8005c16:	613c      	str	r4, [r7, #16]
 8005c18:	3601      	adds	r6, #1
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	b003      	add	sp, #12
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	3b04      	subs	r3, #4
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	d1cb      	bne.n	8005bc2 <quorem+0x94>
 8005c2a:	3c01      	subs	r4, #1
 8005c2c:	e7c6      	b.n	8005bbc <quorem+0x8e>
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	3b04      	subs	r3, #4
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d1ef      	bne.n	8005c16 <quorem+0xe8>
 8005c36:	3c01      	subs	r4, #1
 8005c38:	e7ea      	b.n	8005c10 <quorem+0xe2>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e7ee      	b.n	8005c1c <quorem+0xee>
	...

08005c40 <_dtoa_r>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	69c7      	ldr	r7, [r0, #28]
 8005c46:	b097      	sub	sp, #92	@ 0x5c
 8005c48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c4c:	ec55 4b10 	vmov	r4, r5, d0
 8005c50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005c52:	9107      	str	r1, [sp, #28]
 8005c54:	4681      	mov	r9, r0
 8005c56:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c5a:	b97f      	cbnz	r7, 8005c7c <_dtoa_r+0x3c>
 8005c5c:	2010      	movs	r0, #16
 8005c5e:	f000 fe09 	bl	8006874 <malloc>
 8005c62:	4602      	mov	r2, r0
 8005c64:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c68:	b920      	cbnz	r0, 8005c74 <_dtoa_r+0x34>
 8005c6a:	4ba9      	ldr	r3, [pc, #676]	@ (8005f10 <_dtoa_r+0x2d0>)
 8005c6c:	21ef      	movs	r1, #239	@ 0xef
 8005c6e:	48a9      	ldr	r0, [pc, #676]	@ (8005f14 <_dtoa_r+0x2d4>)
 8005c70:	f001 fcc0 	bl	80075f4 <__assert_func>
 8005c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c78:	6007      	str	r7, [r0, #0]
 8005c7a:	60c7      	str	r7, [r0, #12]
 8005c7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	b159      	cbz	r1, 8005c9c <_dtoa_r+0x5c>
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	604a      	str	r2, [r1, #4]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4093      	lsls	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
 8005c8e:	4648      	mov	r0, r9
 8005c90:	f000 fee6 	bl	8006a60 <_Bfree>
 8005c94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	1e2b      	subs	r3, r5, #0
 8005c9e:	bfb9      	ittee	lt
 8005ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ca4:	9305      	strlt	r3, [sp, #20]
 8005ca6:	2300      	movge	r3, #0
 8005ca8:	6033      	strge	r3, [r6, #0]
 8005caa:	9f05      	ldr	r7, [sp, #20]
 8005cac:	4b9a      	ldr	r3, [pc, #616]	@ (8005f18 <_dtoa_r+0x2d8>)
 8005cae:	bfbc      	itt	lt
 8005cb0:	2201      	movlt	r2, #1
 8005cb2:	6032      	strlt	r2, [r6, #0]
 8005cb4:	43bb      	bics	r3, r7
 8005cb6:	d112      	bne.n	8005cde <_dtoa_r+0x9e>
 8005cb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cc4:	4323      	orrs	r3, r4
 8005cc6:	f000 855a 	beq.w	800677e <_dtoa_r+0xb3e>
 8005cca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ccc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005f2c <_dtoa_r+0x2ec>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 855c 	beq.w	800678e <_dtoa_r+0xb4e>
 8005cd6:	f10a 0303 	add.w	r3, sl, #3
 8005cda:	f000 bd56 	b.w	800678a <_dtoa_r+0xb4a>
 8005cde:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	ec51 0b17 	vmov	r0, r1, d7
 8005ce8:	2300      	movs	r3, #0
 8005cea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005cee:	f7fa feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	b158      	cbz	r0, 8005d0e <_dtoa_r+0xce>
 8005cf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cfe:	b113      	cbz	r3, 8005d06 <_dtoa_r+0xc6>
 8005d00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005d02:	4b86      	ldr	r3, [pc, #536]	@ (8005f1c <_dtoa_r+0x2dc>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005f30 <_dtoa_r+0x2f0>
 8005d0a:	f000 bd40 	b.w	800678e <_dtoa_r+0xb4e>
 8005d0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005d12:	aa14      	add	r2, sp, #80	@ 0x50
 8005d14:	a915      	add	r1, sp, #84	@ 0x54
 8005d16:	4648      	mov	r0, r9
 8005d18:	f001 f984 	bl	8007024 <__d2b>
 8005d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d20:	9002      	str	r0, [sp, #8]
 8005d22:	2e00      	cmp	r6, #0
 8005d24:	d078      	beq.n	8005e18 <_dtoa_r+0x1d8>
 8005d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d40:	4619      	mov	r1, r3
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b76      	ldr	r3, [pc, #472]	@ (8005f20 <_dtoa_r+0x2e0>)
 8005d46:	f7fa fa9f 	bl	8000288 <__aeabi_dsub>
 8005d4a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005ef8 <_dtoa_r+0x2b8>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fc52 	bl	80005f8 <__aeabi_dmul>
 8005d54:	a36a      	add	r3, pc, #424	@ (adr r3, 8005f00 <_dtoa_r+0x2c0>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fa97 	bl	800028c <__adddf3>
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4630      	mov	r0, r6
 8005d62:	460d      	mov	r5, r1
 8005d64:	f7fa fbde 	bl	8000524 <__aeabi_i2d>
 8005d68:	a367      	add	r3, pc, #412	@ (adr r3, 8005f08 <_dtoa_r+0x2c8>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fc43 	bl	80005f8 <__aeabi_dmul>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fa87 	bl	800028c <__adddf3>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	f7fa fee9 	bl	8000b58 <__aeabi_d2iz>
 8005d86:	2200      	movs	r2, #0
 8005d88:	4607      	mov	r7, r0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fea4 	bl	8000adc <__aeabi_dcmplt>
 8005d94:	b140      	cbz	r0, 8005da8 <_dtoa_r+0x168>
 8005d96:	4638      	mov	r0, r7
 8005d98:	f7fa fbc4 	bl	8000524 <__aeabi_i2d>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	462b      	mov	r3, r5
 8005da0:	f7fa fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005da4:	b900      	cbnz	r0, 8005da8 <_dtoa_r+0x168>
 8005da6:	3f01      	subs	r7, #1
 8005da8:	2f16      	cmp	r7, #22
 8005daa:	d852      	bhi.n	8005e52 <_dtoa_r+0x212>
 8005dac:	4b5d      	ldr	r3, [pc, #372]	@ (8005f24 <_dtoa_r+0x2e4>)
 8005dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dba:	f7fa fe8f 	bl	8000adc <__aeabi_dcmplt>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d049      	beq.n	8005e56 <_dtoa_r+0x216>
 8005dc2:	3f01      	subs	r7, #1
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005dc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dca:	1b9b      	subs	r3, r3, r6
 8005dcc:	1e5a      	subs	r2, r3, #1
 8005dce:	bf45      	ittet	mi
 8005dd0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005dd4:	9300      	strmi	r3, [sp, #0]
 8005dd6:	2300      	movpl	r3, #0
 8005dd8:	2300      	movmi	r3, #0
 8005dda:	9206      	str	r2, [sp, #24]
 8005ddc:	bf54      	ite	pl
 8005dde:	9300      	strpl	r3, [sp, #0]
 8005de0:	9306      	strmi	r3, [sp, #24]
 8005de2:	2f00      	cmp	r7, #0
 8005de4:	db39      	blt.n	8005e5a <_dtoa_r+0x21a>
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005dea:	443b      	add	r3, r7
 8005dec:	9306      	str	r3, [sp, #24]
 8005dee:	2300      	movs	r3, #0
 8005df0:	9308      	str	r3, [sp, #32]
 8005df2:	9b07      	ldr	r3, [sp, #28]
 8005df4:	2b09      	cmp	r3, #9
 8005df6:	d863      	bhi.n	8005ec0 <_dtoa_r+0x280>
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	bfc4      	itt	gt
 8005dfc:	3b04      	subgt	r3, #4
 8005dfe:	9307      	strgt	r3, [sp, #28]
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	f1a3 0302 	sub.w	r3, r3, #2
 8005e06:	bfcc      	ite	gt
 8005e08:	2400      	movgt	r4, #0
 8005e0a:	2401      	movle	r4, #1
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d863      	bhi.n	8005ed8 <_dtoa_r+0x298>
 8005e10:	e8df f003 	tbb	[pc, r3]
 8005e14:	2b375452 	.word	0x2b375452
 8005e18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e1c:	441e      	add	r6, r3
 8005e1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	bfc1      	itttt	gt
 8005e26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e2a:	409f      	lslgt	r7, r3
 8005e2c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e30:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e34:	bfd6      	itet	le
 8005e36:	f1c3 0320 	rsble	r3, r3, #32
 8005e3a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e3e:	fa04 f003 	lslle.w	r0, r4, r3
 8005e42:	f7fa fb5f 	bl	8000504 <__aeabi_ui2d>
 8005e46:	2201      	movs	r2, #1
 8005e48:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e4c:	3e01      	subs	r6, #1
 8005e4e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e50:	e776      	b.n	8005d40 <_dtoa_r+0x100>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e7b7      	b.n	8005dc6 <_dtoa_r+0x186>
 8005e56:	9010      	str	r0, [sp, #64]	@ 0x40
 8005e58:	e7b6      	b.n	8005dc8 <_dtoa_r+0x188>
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	1bdb      	subs	r3, r3, r7
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	427b      	negs	r3, r7
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	2300      	movs	r3, #0
 8005e66:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e68:	e7c3      	b.n	8005df2 <_dtoa_r+0x1b2>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e70:	eb07 0b03 	add.w	fp, r7, r3
 8005e74:	f10b 0301 	add.w	r3, fp, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	bfb8      	it	lt
 8005e7e:	2301      	movlt	r3, #1
 8005e80:	e006      	b.n	8005e90 <_dtoa_r+0x250>
 8005e82:	2301      	movs	r3, #1
 8005e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dd28      	ble.n	8005ede <_dtoa_r+0x29e>
 8005e8c:	469b      	mov	fp, r3
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005e94:	2100      	movs	r1, #0
 8005e96:	2204      	movs	r2, #4
 8005e98:	f102 0514 	add.w	r5, r2, #20
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	d926      	bls.n	8005eee <_dtoa_r+0x2ae>
 8005ea0:	6041      	str	r1, [r0, #4]
 8005ea2:	4648      	mov	r0, r9
 8005ea4:	f000 fd9c 	bl	80069e0 <_Balloc>
 8005ea8:	4682      	mov	sl, r0
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d142      	bne.n	8005f34 <_dtoa_r+0x2f4>
 8005eae:	4b1e      	ldr	r3, [pc, #120]	@ (8005f28 <_dtoa_r+0x2e8>)
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eb6:	e6da      	b.n	8005c6e <_dtoa_r+0x2e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e7e3      	b.n	8005e84 <_dtoa_r+0x244>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e7d5      	b.n	8005e6c <_dtoa_r+0x22c>
 8005ec0:	2401      	movs	r4, #1
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ec8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ed2:	2312      	movs	r3, #18
 8005ed4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ed6:	e7db      	b.n	8005e90 <_dtoa_r+0x250>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005edc:	e7f4      	b.n	8005ec8 <_dtoa_r+0x288>
 8005ede:	f04f 0b01 	mov.w	fp, #1
 8005ee2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ee6:	465b      	mov	r3, fp
 8005ee8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005eec:	e7d0      	b.n	8005e90 <_dtoa_r+0x250>
 8005eee:	3101      	adds	r1, #1
 8005ef0:	0052      	lsls	r2, r2, #1
 8005ef2:	e7d1      	b.n	8005e98 <_dtoa_r+0x258>
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	636f4361 	.word	0x636f4361
 8005efc:	3fd287a7 	.word	0x3fd287a7
 8005f00:	8b60c8b3 	.word	0x8b60c8b3
 8005f04:	3fc68a28 	.word	0x3fc68a28
 8005f08:	509f79fb 	.word	0x509f79fb
 8005f0c:	3fd34413 	.word	0x3fd34413
 8005f10:	08007911 	.word	0x08007911
 8005f14:	08007928 	.word	0x08007928
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	080078e1 	.word	0x080078e1
 8005f20:	3ff80000 	.word	0x3ff80000
 8005f24:	08007a78 	.word	0x08007a78
 8005f28:	08007980 	.word	0x08007980
 8005f2c:	0800790d 	.word	0x0800790d
 8005f30:	080078e0 	.word	0x080078e0
 8005f34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f38:	6018      	str	r0, [r3, #0]
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	2b0e      	cmp	r3, #14
 8005f3e:	f200 80a1 	bhi.w	8006084 <_dtoa_r+0x444>
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	f000 809e 	beq.w	8006084 <_dtoa_r+0x444>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	dd33      	ble.n	8005fb4 <_dtoa_r+0x374>
 8005f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80061c0 <_dtoa_r+0x580>)
 8005f4e:	f007 020f 	and.w	r2, r7, #15
 8005f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f56:	ed93 7b00 	vldr	d7, [r3]
 8005f5a:	05f8      	lsls	r0, r7, #23
 8005f5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005f60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f64:	d516      	bpl.n	8005f94 <_dtoa_r+0x354>
 8005f66:	4b97      	ldr	r3, [pc, #604]	@ (80061c4 <_dtoa_r+0x584>)
 8005f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f70:	f7fa fc6c 	bl	800084c <__aeabi_ddiv>
 8005f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f78:	f004 040f 	and.w	r4, r4, #15
 8005f7c:	2603      	movs	r6, #3
 8005f7e:	4d91      	ldr	r5, [pc, #580]	@ (80061c4 <_dtoa_r+0x584>)
 8005f80:	b954      	cbnz	r4, 8005f98 <_dtoa_r+0x358>
 8005f82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8a:	f7fa fc5f 	bl	800084c <__aeabi_ddiv>
 8005f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f92:	e028      	b.n	8005fe6 <_dtoa_r+0x3a6>
 8005f94:	2602      	movs	r6, #2
 8005f96:	e7f2      	b.n	8005f7e <_dtoa_r+0x33e>
 8005f98:	07e1      	lsls	r1, r4, #31
 8005f9a:	d508      	bpl.n	8005fae <_dtoa_r+0x36e>
 8005f9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fa4:	f7fa fb28 	bl	80005f8 <__aeabi_dmul>
 8005fa8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fac:	3601      	adds	r6, #1
 8005fae:	1064      	asrs	r4, r4, #1
 8005fb0:	3508      	adds	r5, #8
 8005fb2:	e7e5      	b.n	8005f80 <_dtoa_r+0x340>
 8005fb4:	f000 80af 	beq.w	8006116 <_dtoa_r+0x4d6>
 8005fb8:	427c      	negs	r4, r7
 8005fba:	4b81      	ldr	r3, [pc, #516]	@ (80061c0 <_dtoa_r+0x580>)
 8005fbc:	4d81      	ldr	r5, [pc, #516]	@ (80061c4 <_dtoa_r+0x584>)
 8005fbe:	f004 020f 	and.w	r2, r4, #15
 8005fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fce:	f7fa fb13 	bl	80005f8 <__aeabi_dmul>
 8005fd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd6:	1124      	asrs	r4, r4, #4
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2602      	movs	r6, #2
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	f040 808f 	bne.w	8006100 <_dtoa_r+0x4c0>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d3      	bne.n	8005f8e <_dtoa_r+0x34e>
 8005fe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fe8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8094 	beq.w	800611a <_dtoa_r+0x4da>
 8005ff2:	4b75      	ldr	r3, [pc, #468]	@ (80061c8 <_dtoa_r+0x588>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa fd6f 	bl	8000adc <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f000 808b 	beq.w	800611a <_dtoa_r+0x4da>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8087 	beq.w	800611a <_dtoa_r+0x4da>
 800600c:	f1bb 0f00 	cmp.w	fp, #0
 8006010:	dd34      	ble.n	800607c <_dtoa_r+0x43c>
 8006012:	4620      	mov	r0, r4
 8006014:	4b6d      	ldr	r3, [pc, #436]	@ (80061cc <_dtoa_r+0x58c>)
 8006016:	2200      	movs	r2, #0
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006022:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006026:	3601      	adds	r6, #1
 8006028:	465c      	mov	r4, fp
 800602a:	4630      	mov	r0, r6
 800602c:	f7fa fa7a 	bl	8000524 <__aeabi_i2d>
 8006030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006034:	f7fa fae0 	bl	80005f8 <__aeabi_dmul>
 8006038:	4b65      	ldr	r3, [pc, #404]	@ (80061d0 <_dtoa_r+0x590>)
 800603a:	2200      	movs	r2, #0
 800603c:	f7fa f926 	bl	800028c <__adddf3>
 8006040:	4605      	mov	r5, r0
 8006042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006046:	2c00      	cmp	r4, #0
 8006048:	d16a      	bne.n	8006120 <_dtoa_r+0x4e0>
 800604a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800604e:	4b61      	ldr	r3, [pc, #388]	@ (80061d4 <_dtoa_r+0x594>)
 8006050:	2200      	movs	r2, #0
 8006052:	f7fa f919 	bl	8000288 <__aeabi_dsub>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800605e:	462a      	mov	r2, r5
 8006060:	4633      	mov	r3, r6
 8006062:	f7fa fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8006066:	2800      	cmp	r0, #0
 8006068:	f040 8298 	bne.w	800659c <_dtoa_r+0x95c>
 800606c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006070:	462a      	mov	r2, r5
 8006072:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006076:	f7fa fd31 	bl	8000adc <__aeabi_dcmplt>
 800607a:	bb38      	cbnz	r0, 80060cc <_dtoa_r+0x48c>
 800607c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006080:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006086:	2b00      	cmp	r3, #0
 8006088:	f2c0 8157 	blt.w	800633a <_dtoa_r+0x6fa>
 800608c:	2f0e      	cmp	r7, #14
 800608e:	f300 8154 	bgt.w	800633a <_dtoa_r+0x6fa>
 8006092:	4b4b      	ldr	r3, [pc, #300]	@ (80061c0 <_dtoa_r+0x580>)
 8006094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006098:	ed93 7b00 	vldr	d7, [r3]
 800609c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800609e:	2b00      	cmp	r3, #0
 80060a0:	ed8d 7b00 	vstr	d7, [sp]
 80060a4:	f280 80e5 	bge.w	8006272 <_dtoa_r+0x632>
 80060a8:	9b03      	ldr	r3, [sp, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f300 80e1 	bgt.w	8006272 <_dtoa_r+0x632>
 80060b0:	d10c      	bne.n	80060cc <_dtoa_r+0x48c>
 80060b2:	4b48      	ldr	r3, [pc, #288]	@ (80061d4 <_dtoa_r+0x594>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	ec51 0b17 	vmov	r0, r1, d7
 80060ba:	f7fa fa9d 	bl	80005f8 <__aeabi_dmul>
 80060be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c2:	f7fa fd1f 	bl	8000b04 <__aeabi_dcmpge>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	f000 8266 	beq.w	8006598 <_dtoa_r+0x958>
 80060cc:	2400      	movs	r4, #0
 80060ce:	4625      	mov	r5, r4
 80060d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060d2:	4656      	mov	r6, sl
 80060d4:	ea6f 0803 	mvn.w	r8, r3
 80060d8:	2700      	movs	r7, #0
 80060da:	4621      	mov	r1, r4
 80060dc:	4648      	mov	r0, r9
 80060de:	f000 fcbf 	bl	8006a60 <_Bfree>
 80060e2:	2d00      	cmp	r5, #0
 80060e4:	f000 80bd 	beq.w	8006262 <_dtoa_r+0x622>
 80060e8:	b12f      	cbz	r7, 80060f6 <_dtoa_r+0x4b6>
 80060ea:	42af      	cmp	r7, r5
 80060ec:	d003      	beq.n	80060f6 <_dtoa_r+0x4b6>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4648      	mov	r0, r9
 80060f2:	f000 fcb5 	bl	8006a60 <_Bfree>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4648      	mov	r0, r9
 80060fa:	f000 fcb1 	bl	8006a60 <_Bfree>
 80060fe:	e0b0      	b.n	8006262 <_dtoa_r+0x622>
 8006100:	07e2      	lsls	r2, r4, #31
 8006102:	d505      	bpl.n	8006110 <_dtoa_r+0x4d0>
 8006104:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006108:	f7fa fa76 	bl	80005f8 <__aeabi_dmul>
 800610c:	3601      	adds	r6, #1
 800610e:	2301      	movs	r3, #1
 8006110:	1064      	asrs	r4, r4, #1
 8006112:	3508      	adds	r5, #8
 8006114:	e762      	b.n	8005fdc <_dtoa_r+0x39c>
 8006116:	2602      	movs	r6, #2
 8006118:	e765      	b.n	8005fe6 <_dtoa_r+0x3a6>
 800611a:	9c03      	ldr	r4, [sp, #12]
 800611c:	46b8      	mov	r8, r7
 800611e:	e784      	b.n	800602a <_dtoa_r+0x3ea>
 8006120:	4b27      	ldr	r3, [pc, #156]	@ (80061c0 <_dtoa_r+0x580>)
 8006122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800612c:	4454      	add	r4, sl
 800612e:	2900      	cmp	r1, #0
 8006130:	d054      	beq.n	80061dc <_dtoa_r+0x59c>
 8006132:	4929      	ldr	r1, [pc, #164]	@ (80061d8 <_dtoa_r+0x598>)
 8006134:	2000      	movs	r0, #0
 8006136:	f7fa fb89 	bl	800084c <__aeabi_ddiv>
 800613a:	4633      	mov	r3, r6
 800613c:	462a      	mov	r2, r5
 800613e:	f7fa f8a3 	bl	8000288 <__aeabi_dsub>
 8006142:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006146:	4656      	mov	r6, sl
 8006148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800614c:	f7fa fd04 	bl	8000b58 <__aeabi_d2iz>
 8006150:	4605      	mov	r5, r0
 8006152:	f7fa f9e7 	bl	8000524 <__aeabi_i2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800615e:	f7fa f893 	bl	8000288 <__aeabi_dsub>
 8006162:	3530      	adds	r5, #48	@ 0x30
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800616c:	f806 5b01 	strb.w	r5, [r6], #1
 8006170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006174:	f7fa fcb2 	bl	8000adc <__aeabi_dcmplt>
 8006178:	2800      	cmp	r0, #0
 800617a:	d172      	bne.n	8006262 <_dtoa_r+0x622>
 800617c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006180:	4911      	ldr	r1, [pc, #68]	@ (80061c8 <_dtoa_r+0x588>)
 8006182:	2000      	movs	r0, #0
 8006184:	f7fa f880 	bl	8000288 <__aeabi_dsub>
 8006188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800618c:	f7fa fca6 	bl	8000adc <__aeabi_dcmplt>
 8006190:	2800      	cmp	r0, #0
 8006192:	f040 80b4 	bne.w	80062fe <_dtoa_r+0x6be>
 8006196:	42a6      	cmp	r6, r4
 8006198:	f43f af70 	beq.w	800607c <_dtoa_r+0x43c>
 800619c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061a0:	4b0a      	ldr	r3, [pc, #40]	@ (80061cc <_dtoa_r+0x58c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa fa28 	bl	80005f8 <__aeabi_dmul>
 80061a8:	4b08      	ldr	r3, [pc, #32]	@ (80061cc <_dtoa_r+0x58c>)
 80061aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061ae:	2200      	movs	r2, #0
 80061b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b4:	f7fa fa20 	bl	80005f8 <__aeabi_dmul>
 80061b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061bc:	e7c4      	b.n	8006148 <_dtoa_r+0x508>
 80061be:	bf00      	nop
 80061c0:	08007a78 	.word	0x08007a78
 80061c4:	08007a50 	.word	0x08007a50
 80061c8:	3ff00000 	.word	0x3ff00000
 80061cc:	40240000 	.word	0x40240000
 80061d0:	401c0000 	.word	0x401c0000
 80061d4:	40140000 	.word	0x40140000
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061ea:	4656      	mov	r6, sl
 80061ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f0:	f7fa fcb2 	bl	8000b58 <__aeabi_d2iz>
 80061f4:	4605      	mov	r5, r0
 80061f6:	f7fa f995 	bl	8000524 <__aeabi_i2d>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006202:	f7fa f841 	bl	8000288 <__aeabi_dsub>
 8006206:	3530      	adds	r5, #48	@ 0x30
 8006208:	f806 5b01 	strb.w	r5, [r6], #1
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	42a6      	cmp	r6, r4
 8006212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	d124      	bne.n	8006266 <_dtoa_r+0x626>
 800621c:	4baf      	ldr	r3, [pc, #700]	@ (80064dc <_dtoa_r+0x89c>)
 800621e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006222:	f7fa f833 	bl	800028c <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800622e:	f7fa fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8006232:	2800      	cmp	r0, #0
 8006234:	d163      	bne.n	80062fe <_dtoa_r+0x6be>
 8006236:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800623a:	49a8      	ldr	r1, [pc, #672]	@ (80064dc <_dtoa_r+0x89c>)
 800623c:	2000      	movs	r0, #0
 800623e:	f7fa f823 	bl	8000288 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624a:	f7fa fc47 	bl	8000adc <__aeabi_dcmplt>
 800624e:	2800      	cmp	r0, #0
 8006250:	f43f af14 	beq.w	800607c <_dtoa_r+0x43c>
 8006254:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006256:	1e73      	subs	r3, r6, #1
 8006258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800625a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800625e:	2b30      	cmp	r3, #48	@ 0x30
 8006260:	d0f8      	beq.n	8006254 <_dtoa_r+0x614>
 8006262:	4647      	mov	r7, r8
 8006264:	e03b      	b.n	80062de <_dtoa_r+0x69e>
 8006266:	4b9e      	ldr	r3, [pc, #632]	@ (80064e0 <_dtoa_r+0x8a0>)
 8006268:	f7fa f9c6 	bl	80005f8 <__aeabi_dmul>
 800626c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006270:	e7bc      	b.n	80061ec <_dtoa_r+0x5ac>
 8006272:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006276:	4656      	mov	r6, sl
 8006278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f7fa fae4 	bl	800084c <__aeabi_ddiv>
 8006284:	f7fa fc68 	bl	8000b58 <__aeabi_d2iz>
 8006288:	4680      	mov	r8, r0
 800628a:	f7fa f94b 	bl	8000524 <__aeabi_i2d>
 800628e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006292:	f7fa f9b1 	bl	80005f8 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4620      	mov	r0, r4
 800629c:	4629      	mov	r1, r5
 800629e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062a2:	f7f9 fff1 	bl	8000288 <__aeabi_dsub>
 80062a6:	f806 4b01 	strb.w	r4, [r6], #1
 80062aa:	9d03      	ldr	r5, [sp, #12]
 80062ac:	eba6 040a 	sub.w	r4, r6, sl
 80062b0:	42a5      	cmp	r5, r4
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	d133      	bne.n	8006320 <_dtoa_r+0x6e0>
 80062b8:	f7f9 ffe8 	bl	800028c <__adddf3>
 80062bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa fc28 	bl	8000b18 <__aeabi_dcmpgt>
 80062c8:	b9c0      	cbnz	r0, 80062fc <_dtoa_r+0x6bc>
 80062ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80062d6:	b110      	cbz	r0, 80062de <_dtoa_r+0x69e>
 80062d8:	f018 0f01 	tst.w	r8, #1
 80062dc:	d10e      	bne.n	80062fc <_dtoa_r+0x6bc>
 80062de:	9902      	ldr	r1, [sp, #8]
 80062e0:	4648      	mov	r0, r9
 80062e2:	f000 fbbd 	bl	8006a60 <_Bfree>
 80062e6:	2300      	movs	r3, #0
 80062e8:	7033      	strb	r3, [r6, #0]
 80062ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062ec:	3701      	adds	r7, #1
 80062ee:	601f      	str	r7, [r3, #0]
 80062f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 824b 	beq.w	800678e <_dtoa_r+0xb4e>
 80062f8:	601e      	str	r6, [r3, #0]
 80062fa:	e248      	b.n	800678e <_dtoa_r+0xb4e>
 80062fc:	46b8      	mov	r8, r7
 80062fe:	4633      	mov	r3, r6
 8006300:	461e      	mov	r6, r3
 8006302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006306:	2a39      	cmp	r2, #57	@ 0x39
 8006308:	d106      	bne.n	8006318 <_dtoa_r+0x6d8>
 800630a:	459a      	cmp	sl, r3
 800630c:	d1f8      	bne.n	8006300 <_dtoa_r+0x6c0>
 800630e:	2230      	movs	r2, #48	@ 0x30
 8006310:	f108 0801 	add.w	r8, r8, #1
 8006314:	f88a 2000 	strb.w	r2, [sl]
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	3201      	adds	r2, #1
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e7a0      	b.n	8006262 <_dtoa_r+0x622>
 8006320:	4b6f      	ldr	r3, [pc, #444]	@ (80064e0 <_dtoa_r+0x8a0>)
 8006322:	2200      	movs	r2, #0
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	f7fa fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006334:	2800      	cmp	r0, #0
 8006336:	d09f      	beq.n	8006278 <_dtoa_r+0x638>
 8006338:	e7d1      	b.n	80062de <_dtoa_r+0x69e>
 800633a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 80ea 	beq.w	8006516 <_dtoa_r+0x8d6>
 8006342:	9a07      	ldr	r2, [sp, #28]
 8006344:	2a01      	cmp	r2, #1
 8006346:	f300 80cd 	bgt.w	80064e4 <_dtoa_r+0x8a4>
 800634a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800634c:	2a00      	cmp	r2, #0
 800634e:	f000 80c1 	beq.w	80064d4 <_dtoa_r+0x894>
 8006352:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006356:	9c08      	ldr	r4, [sp, #32]
 8006358:	9e00      	ldr	r6, [sp, #0]
 800635a:	9a00      	ldr	r2, [sp, #0]
 800635c:	441a      	add	r2, r3
 800635e:	9200      	str	r2, [sp, #0]
 8006360:	9a06      	ldr	r2, [sp, #24]
 8006362:	2101      	movs	r1, #1
 8006364:	441a      	add	r2, r3
 8006366:	4648      	mov	r0, r9
 8006368:	9206      	str	r2, [sp, #24]
 800636a:	f000 fc2d 	bl	8006bc8 <__i2b>
 800636e:	4605      	mov	r5, r0
 8006370:	b166      	cbz	r6, 800638c <_dtoa_r+0x74c>
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd09      	ble.n	800638c <_dtoa_r+0x74c>
 8006378:	42b3      	cmp	r3, r6
 800637a:	9a00      	ldr	r2, [sp, #0]
 800637c:	bfa8      	it	ge
 800637e:	4633      	movge	r3, r6
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	9200      	str	r2, [sp, #0]
 8006384:	9a06      	ldr	r2, [sp, #24]
 8006386:	1af6      	subs	r6, r6, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	9306      	str	r3, [sp, #24]
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	b30b      	cbz	r3, 80063d4 <_dtoa_r+0x794>
 8006390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80c6 	beq.w	8006524 <_dtoa_r+0x8e4>
 8006398:	2c00      	cmp	r4, #0
 800639a:	f000 80c0 	beq.w	800651e <_dtoa_r+0x8de>
 800639e:	4629      	mov	r1, r5
 80063a0:	4622      	mov	r2, r4
 80063a2:	4648      	mov	r0, r9
 80063a4:	f000 fcc8 	bl	8006d38 <__pow5mult>
 80063a8:	9a02      	ldr	r2, [sp, #8]
 80063aa:	4601      	mov	r1, r0
 80063ac:	4605      	mov	r5, r0
 80063ae:	4648      	mov	r0, r9
 80063b0:	f000 fc20 	bl	8006bf4 <__multiply>
 80063b4:	9902      	ldr	r1, [sp, #8]
 80063b6:	4680      	mov	r8, r0
 80063b8:	4648      	mov	r0, r9
 80063ba:	f000 fb51 	bl	8006a60 <_Bfree>
 80063be:	9b08      	ldr	r3, [sp, #32]
 80063c0:	1b1b      	subs	r3, r3, r4
 80063c2:	9308      	str	r3, [sp, #32]
 80063c4:	f000 80b1 	beq.w	800652a <_dtoa_r+0x8ea>
 80063c8:	9a08      	ldr	r2, [sp, #32]
 80063ca:	4641      	mov	r1, r8
 80063cc:	4648      	mov	r0, r9
 80063ce:	f000 fcb3 	bl	8006d38 <__pow5mult>
 80063d2:	9002      	str	r0, [sp, #8]
 80063d4:	2101      	movs	r1, #1
 80063d6:	4648      	mov	r0, r9
 80063d8:	f000 fbf6 	bl	8006bc8 <__i2b>
 80063dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063de:	4604      	mov	r4, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 81d8 	beq.w	8006796 <_dtoa_r+0xb56>
 80063e6:	461a      	mov	r2, r3
 80063e8:	4601      	mov	r1, r0
 80063ea:	4648      	mov	r0, r9
 80063ec:	f000 fca4 	bl	8006d38 <__pow5mult>
 80063f0:	9b07      	ldr	r3, [sp, #28]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	4604      	mov	r4, r0
 80063f6:	f300 809f 	bgt.w	8006538 <_dtoa_r+0x8f8>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8097 	bne.w	8006530 <_dtoa_r+0x8f0>
 8006402:	9b05      	ldr	r3, [sp, #20]
 8006404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006408:	2b00      	cmp	r3, #0
 800640a:	f040 8093 	bne.w	8006534 <_dtoa_r+0x8f4>
 800640e:	9b05      	ldr	r3, [sp, #20]
 8006410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006414:	0d1b      	lsrs	r3, r3, #20
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	b133      	cbz	r3, 8006428 <_dtoa_r+0x7e8>
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	9b06      	ldr	r3, [sp, #24]
 8006422:	3301      	adds	r3, #1
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	2301      	movs	r3, #1
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 81b8 	beq.w	80067a2 <_dtoa_r+0xb62>
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006438:	6918      	ldr	r0, [r3, #16]
 800643a:	f000 fb79 	bl	8006b30 <__hi0bits>
 800643e:	f1c0 0020 	rsb	r0, r0, #32
 8006442:	9b06      	ldr	r3, [sp, #24]
 8006444:	4418      	add	r0, r3
 8006446:	f010 001f 	ands.w	r0, r0, #31
 800644a:	f000 8082 	beq.w	8006552 <_dtoa_r+0x912>
 800644e:	f1c0 0320 	rsb	r3, r0, #32
 8006452:	2b04      	cmp	r3, #4
 8006454:	dd73      	ble.n	800653e <_dtoa_r+0x8fe>
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	f1c0 001c 	rsb	r0, r0, #28
 800645c:	4403      	add	r3, r0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	4403      	add	r3, r0
 8006464:	4406      	add	r6, r0
 8006466:	9306      	str	r3, [sp, #24]
 8006468:	9b00      	ldr	r3, [sp, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dd05      	ble.n	800647a <_dtoa_r+0x83a>
 800646e:	9902      	ldr	r1, [sp, #8]
 8006470:	461a      	mov	r2, r3
 8006472:	4648      	mov	r0, r9
 8006474:	f000 fcba 	bl	8006dec <__lshift>
 8006478:	9002      	str	r0, [sp, #8]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd05      	ble.n	800648c <_dtoa_r+0x84c>
 8006480:	4621      	mov	r1, r4
 8006482:	461a      	mov	r2, r3
 8006484:	4648      	mov	r0, r9
 8006486:	f000 fcb1 	bl	8006dec <__lshift>
 800648a:	4604      	mov	r4, r0
 800648c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d061      	beq.n	8006556 <_dtoa_r+0x916>
 8006492:	9802      	ldr	r0, [sp, #8]
 8006494:	4621      	mov	r1, r4
 8006496:	f000 fd15 	bl	8006ec4 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	da5b      	bge.n	8006556 <_dtoa_r+0x916>
 800649e:	2300      	movs	r3, #0
 80064a0:	9902      	ldr	r1, [sp, #8]
 80064a2:	220a      	movs	r2, #10
 80064a4:	4648      	mov	r0, r9
 80064a6:	f000 fafd 	bl	8006aa4 <__multadd>
 80064aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8177 	beq.w	80067a6 <_dtoa_r+0xb66>
 80064b8:	4629      	mov	r1, r5
 80064ba:	2300      	movs	r3, #0
 80064bc:	220a      	movs	r2, #10
 80064be:	4648      	mov	r0, r9
 80064c0:	f000 faf0 	bl	8006aa4 <__multadd>
 80064c4:	f1bb 0f00 	cmp.w	fp, #0
 80064c8:	4605      	mov	r5, r0
 80064ca:	dc6f      	bgt.n	80065ac <_dtoa_r+0x96c>
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	dc49      	bgt.n	8006566 <_dtoa_r+0x926>
 80064d2:	e06b      	b.n	80065ac <_dtoa_r+0x96c>
 80064d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064da:	e73c      	b.n	8006356 <_dtoa_r+0x716>
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	40240000 	.word	0x40240000
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	1e5c      	subs	r4, r3, #1
 80064e8:	9b08      	ldr	r3, [sp, #32]
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	db09      	blt.n	8006502 <_dtoa_r+0x8c2>
 80064ee:	1b1c      	subs	r4, r3, r4
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f6bf af30 	bge.w	8006358 <_dtoa_r+0x718>
 80064f8:	9b00      	ldr	r3, [sp, #0]
 80064fa:	9a03      	ldr	r2, [sp, #12]
 80064fc:	1a9e      	subs	r6, r3, r2
 80064fe:	2300      	movs	r3, #0
 8006500:	e72b      	b.n	800635a <_dtoa_r+0x71a>
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006506:	9408      	str	r4, [sp, #32]
 8006508:	1ae3      	subs	r3, r4, r3
 800650a:	441a      	add	r2, r3
 800650c:	9e00      	ldr	r6, [sp, #0]
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	920d      	str	r2, [sp, #52]	@ 0x34
 8006512:	2400      	movs	r4, #0
 8006514:	e721      	b.n	800635a <_dtoa_r+0x71a>
 8006516:	9c08      	ldr	r4, [sp, #32]
 8006518:	9e00      	ldr	r6, [sp, #0]
 800651a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800651c:	e728      	b.n	8006370 <_dtoa_r+0x730>
 800651e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006522:	e751      	b.n	80063c8 <_dtoa_r+0x788>
 8006524:	9a08      	ldr	r2, [sp, #32]
 8006526:	9902      	ldr	r1, [sp, #8]
 8006528:	e750      	b.n	80063cc <_dtoa_r+0x78c>
 800652a:	f8cd 8008 	str.w	r8, [sp, #8]
 800652e:	e751      	b.n	80063d4 <_dtoa_r+0x794>
 8006530:	2300      	movs	r3, #0
 8006532:	e779      	b.n	8006428 <_dtoa_r+0x7e8>
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	e777      	b.n	8006428 <_dtoa_r+0x7e8>
 8006538:	2300      	movs	r3, #0
 800653a:	9308      	str	r3, [sp, #32]
 800653c:	e779      	b.n	8006432 <_dtoa_r+0x7f2>
 800653e:	d093      	beq.n	8006468 <_dtoa_r+0x828>
 8006540:	9a00      	ldr	r2, [sp, #0]
 8006542:	331c      	adds	r3, #28
 8006544:	441a      	add	r2, r3
 8006546:	9200      	str	r2, [sp, #0]
 8006548:	9a06      	ldr	r2, [sp, #24]
 800654a:	441a      	add	r2, r3
 800654c:	441e      	add	r6, r3
 800654e:	9206      	str	r2, [sp, #24]
 8006550:	e78a      	b.n	8006468 <_dtoa_r+0x828>
 8006552:	4603      	mov	r3, r0
 8006554:	e7f4      	b.n	8006540 <_dtoa_r+0x900>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	46b8      	mov	r8, r7
 800655c:	dc20      	bgt.n	80065a0 <_dtoa_r+0x960>
 800655e:	469b      	mov	fp, r3
 8006560:	9b07      	ldr	r3, [sp, #28]
 8006562:	2b02      	cmp	r3, #2
 8006564:	dd1e      	ble.n	80065a4 <_dtoa_r+0x964>
 8006566:	f1bb 0f00 	cmp.w	fp, #0
 800656a:	f47f adb1 	bne.w	80060d0 <_dtoa_r+0x490>
 800656e:	4621      	mov	r1, r4
 8006570:	465b      	mov	r3, fp
 8006572:	2205      	movs	r2, #5
 8006574:	4648      	mov	r0, r9
 8006576:	f000 fa95 	bl	8006aa4 <__multadd>
 800657a:	4601      	mov	r1, r0
 800657c:	4604      	mov	r4, r0
 800657e:	9802      	ldr	r0, [sp, #8]
 8006580:	f000 fca0 	bl	8006ec4 <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	f77f ada3 	ble.w	80060d0 <_dtoa_r+0x490>
 800658a:	4656      	mov	r6, sl
 800658c:	2331      	movs	r3, #49	@ 0x31
 800658e:	f806 3b01 	strb.w	r3, [r6], #1
 8006592:	f108 0801 	add.w	r8, r8, #1
 8006596:	e59f      	b.n	80060d8 <_dtoa_r+0x498>
 8006598:	9c03      	ldr	r4, [sp, #12]
 800659a:	46b8      	mov	r8, r7
 800659c:	4625      	mov	r5, r4
 800659e:	e7f4      	b.n	800658a <_dtoa_r+0x94a>
 80065a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80065a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8101 	beq.w	80067ae <_dtoa_r+0xb6e>
 80065ac:	2e00      	cmp	r6, #0
 80065ae:	dd05      	ble.n	80065bc <_dtoa_r+0x97c>
 80065b0:	4629      	mov	r1, r5
 80065b2:	4632      	mov	r2, r6
 80065b4:	4648      	mov	r0, r9
 80065b6:	f000 fc19 	bl	8006dec <__lshift>
 80065ba:	4605      	mov	r5, r0
 80065bc:	9b08      	ldr	r3, [sp, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d05c      	beq.n	800667c <_dtoa_r+0xa3c>
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	4648      	mov	r0, r9
 80065c6:	f000 fa0b 	bl	80069e0 <_Balloc>
 80065ca:	4606      	mov	r6, r0
 80065cc:	b928      	cbnz	r0, 80065da <_dtoa_r+0x99a>
 80065ce:	4b82      	ldr	r3, [pc, #520]	@ (80067d8 <_dtoa_r+0xb98>)
 80065d0:	4602      	mov	r2, r0
 80065d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065d6:	f7ff bb4a 	b.w	8005c6e <_dtoa_r+0x2e>
 80065da:	692a      	ldr	r2, [r5, #16]
 80065dc:	3202      	adds	r2, #2
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	f105 010c 	add.w	r1, r5, #12
 80065e4:	300c      	adds	r0, #12
 80065e6:	f000 fff7 	bl	80075d8 <memcpy>
 80065ea:	2201      	movs	r2, #1
 80065ec:	4631      	mov	r1, r6
 80065ee:	4648      	mov	r0, r9
 80065f0:	f000 fbfc 	bl	8006dec <__lshift>
 80065f4:	f10a 0301 	add.w	r3, sl, #1
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	eb0a 030b 	add.w	r3, sl, fp
 80065fe:	9308      	str	r3, [sp, #32]
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	462f      	mov	r7, r5
 8006608:	9306      	str	r3, [sp, #24]
 800660a:	4605      	mov	r5, r0
 800660c:	9b00      	ldr	r3, [sp, #0]
 800660e:	9802      	ldr	r0, [sp, #8]
 8006610:	4621      	mov	r1, r4
 8006612:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006616:	f7ff fa8a 	bl	8005b2e <quorem>
 800661a:	4603      	mov	r3, r0
 800661c:	3330      	adds	r3, #48	@ 0x30
 800661e:	9003      	str	r0, [sp, #12]
 8006620:	4639      	mov	r1, r7
 8006622:	9802      	ldr	r0, [sp, #8]
 8006624:	9309      	str	r3, [sp, #36]	@ 0x24
 8006626:	f000 fc4d 	bl	8006ec4 <__mcmp>
 800662a:	462a      	mov	r2, r5
 800662c:	9004      	str	r0, [sp, #16]
 800662e:	4621      	mov	r1, r4
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fc63 	bl	8006efc <__mdiff>
 8006636:	68c2      	ldr	r2, [r0, #12]
 8006638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800663a:	4606      	mov	r6, r0
 800663c:	bb02      	cbnz	r2, 8006680 <_dtoa_r+0xa40>
 800663e:	4601      	mov	r1, r0
 8006640:	9802      	ldr	r0, [sp, #8]
 8006642:	f000 fc3f 	bl	8006ec4 <__mcmp>
 8006646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006648:	4602      	mov	r2, r0
 800664a:	4631      	mov	r1, r6
 800664c:	4648      	mov	r0, r9
 800664e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006650:	9309      	str	r3, [sp, #36]	@ 0x24
 8006652:	f000 fa05 	bl	8006a60 <_Bfree>
 8006656:	9b07      	ldr	r3, [sp, #28]
 8006658:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800665a:	9e00      	ldr	r6, [sp, #0]
 800665c:	ea42 0103 	orr.w	r1, r2, r3
 8006660:	9b06      	ldr	r3, [sp, #24]
 8006662:	4319      	orrs	r1, r3
 8006664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006666:	d10d      	bne.n	8006684 <_dtoa_r+0xa44>
 8006668:	2b39      	cmp	r3, #57	@ 0x39
 800666a:	d027      	beq.n	80066bc <_dtoa_r+0xa7c>
 800666c:	9a04      	ldr	r2, [sp, #16]
 800666e:	2a00      	cmp	r2, #0
 8006670:	dd01      	ble.n	8006676 <_dtoa_r+0xa36>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	3331      	adds	r3, #49	@ 0x31
 8006676:	f88b 3000 	strb.w	r3, [fp]
 800667a:	e52e      	b.n	80060da <_dtoa_r+0x49a>
 800667c:	4628      	mov	r0, r5
 800667e:	e7b9      	b.n	80065f4 <_dtoa_r+0x9b4>
 8006680:	2201      	movs	r2, #1
 8006682:	e7e2      	b.n	800664a <_dtoa_r+0xa0a>
 8006684:	9904      	ldr	r1, [sp, #16]
 8006686:	2900      	cmp	r1, #0
 8006688:	db04      	blt.n	8006694 <_dtoa_r+0xa54>
 800668a:	9807      	ldr	r0, [sp, #28]
 800668c:	4301      	orrs	r1, r0
 800668e:	9806      	ldr	r0, [sp, #24]
 8006690:	4301      	orrs	r1, r0
 8006692:	d120      	bne.n	80066d6 <_dtoa_r+0xa96>
 8006694:	2a00      	cmp	r2, #0
 8006696:	ddee      	ble.n	8006676 <_dtoa_r+0xa36>
 8006698:	9902      	ldr	r1, [sp, #8]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2201      	movs	r2, #1
 800669e:	4648      	mov	r0, r9
 80066a0:	f000 fba4 	bl	8006dec <__lshift>
 80066a4:	4621      	mov	r1, r4
 80066a6:	9002      	str	r0, [sp, #8]
 80066a8:	f000 fc0c 	bl	8006ec4 <__mcmp>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	dc02      	bgt.n	80066b8 <_dtoa_r+0xa78>
 80066b2:	d1e0      	bne.n	8006676 <_dtoa_r+0xa36>
 80066b4:	07da      	lsls	r2, r3, #31
 80066b6:	d5de      	bpl.n	8006676 <_dtoa_r+0xa36>
 80066b8:	2b39      	cmp	r3, #57	@ 0x39
 80066ba:	d1da      	bne.n	8006672 <_dtoa_r+0xa32>
 80066bc:	2339      	movs	r3, #57	@ 0x39
 80066be:	f88b 3000 	strb.w	r3, [fp]
 80066c2:	4633      	mov	r3, r6
 80066c4:	461e      	mov	r6, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066cc:	2a39      	cmp	r2, #57	@ 0x39
 80066ce:	d04e      	beq.n	800676e <_dtoa_r+0xb2e>
 80066d0:	3201      	adds	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e501      	b.n	80060da <_dtoa_r+0x49a>
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	dd03      	ble.n	80066e2 <_dtoa_r+0xaa2>
 80066da:	2b39      	cmp	r3, #57	@ 0x39
 80066dc:	d0ee      	beq.n	80066bc <_dtoa_r+0xa7c>
 80066de:	3301      	adds	r3, #1
 80066e0:	e7c9      	b.n	8006676 <_dtoa_r+0xa36>
 80066e2:	9a00      	ldr	r2, [sp, #0]
 80066e4:	9908      	ldr	r1, [sp, #32]
 80066e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066ea:	428a      	cmp	r2, r1
 80066ec:	d028      	beq.n	8006740 <_dtoa_r+0xb00>
 80066ee:	9902      	ldr	r1, [sp, #8]
 80066f0:	2300      	movs	r3, #0
 80066f2:	220a      	movs	r2, #10
 80066f4:	4648      	mov	r0, r9
 80066f6:	f000 f9d5 	bl	8006aa4 <__multadd>
 80066fa:	42af      	cmp	r7, r5
 80066fc:	9002      	str	r0, [sp, #8]
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	f04f 020a 	mov.w	r2, #10
 8006706:	4639      	mov	r1, r7
 8006708:	4648      	mov	r0, r9
 800670a:	d107      	bne.n	800671c <_dtoa_r+0xadc>
 800670c:	f000 f9ca 	bl	8006aa4 <__multadd>
 8006710:	4607      	mov	r7, r0
 8006712:	4605      	mov	r5, r0
 8006714:	9b00      	ldr	r3, [sp, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	e777      	b.n	800660c <_dtoa_r+0x9cc>
 800671c:	f000 f9c2 	bl	8006aa4 <__multadd>
 8006720:	4629      	mov	r1, r5
 8006722:	4607      	mov	r7, r0
 8006724:	2300      	movs	r3, #0
 8006726:	220a      	movs	r2, #10
 8006728:	4648      	mov	r0, r9
 800672a:	f000 f9bb 	bl	8006aa4 <__multadd>
 800672e:	4605      	mov	r5, r0
 8006730:	e7f0      	b.n	8006714 <_dtoa_r+0xad4>
 8006732:	f1bb 0f00 	cmp.w	fp, #0
 8006736:	bfcc      	ite	gt
 8006738:	465e      	movgt	r6, fp
 800673a:	2601      	movle	r6, #1
 800673c:	4456      	add	r6, sl
 800673e:	2700      	movs	r7, #0
 8006740:	9902      	ldr	r1, [sp, #8]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4648      	mov	r0, r9
 8006748:	f000 fb50 	bl	8006dec <__lshift>
 800674c:	4621      	mov	r1, r4
 800674e:	9002      	str	r0, [sp, #8]
 8006750:	f000 fbb8 	bl	8006ec4 <__mcmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	dcb4      	bgt.n	80066c2 <_dtoa_r+0xa82>
 8006758:	d102      	bne.n	8006760 <_dtoa_r+0xb20>
 800675a:	9b00      	ldr	r3, [sp, #0]
 800675c:	07db      	lsls	r3, r3, #31
 800675e:	d4b0      	bmi.n	80066c2 <_dtoa_r+0xa82>
 8006760:	4633      	mov	r3, r6
 8006762:	461e      	mov	r6, r3
 8006764:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006768:	2a30      	cmp	r2, #48	@ 0x30
 800676a:	d0fa      	beq.n	8006762 <_dtoa_r+0xb22>
 800676c:	e4b5      	b.n	80060da <_dtoa_r+0x49a>
 800676e:	459a      	cmp	sl, r3
 8006770:	d1a8      	bne.n	80066c4 <_dtoa_r+0xa84>
 8006772:	2331      	movs	r3, #49	@ 0x31
 8006774:	f108 0801 	add.w	r8, r8, #1
 8006778:	f88a 3000 	strb.w	r3, [sl]
 800677c:	e4ad      	b.n	80060da <_dtoa_r+0x49a>
 800677e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006780:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80067dc <_dtoa_r+0xb9c>
 8006784:	b11b      	cbz	r3, 800678e <_dtoa_r+0xb4e>
 8006786:	f10a 0308 	add.w	r3, sl, #8
 800678a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4650      	mov	r0, sl
 8006790:	b017      	add	sp, #92	@ 0x5c
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	9b07      	ldr	r3, [sp, #28]
 8006798:	2b01      	cmp	r3, #1
 800679a:	f77f ae2e 	ble.w	80063fa <_dtoa_r+0x7ba>
 800679e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	2001      	movs	r0, #1
 80067a4:	e64d      	b.n	8006442 <_dtoa_r+0x802>
 80067a6:	f1bb 0f00 	cmp.w	fp, #0
 80067aa:	f77f aed9 	ble.w	8006560 <_dtoa_r+0x920>
 80067ae:	4656      	mov	r6, sl
 80067b0:	9802      	ldr	r0, [sp, #8]
 80067b2:	4621      	mov	r1, r4
 80067b4:	f7ff f9bb 	bl	8005b2e <quorem>
 80067b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067bc:	f806 3b01 	strb.w	r3, [r6], #1
 80067c0:	eba6 020a 	sub.w	r2, r6, sl
 80067c4:	4593      	cmp	fp, r2
 80067c6:	ddb4      	ble.n	8006732 <_dtoa_r+0xaf2>
 80067c8:	9902      	ldr	r1, [sp, #8]
 80067ca:	2300      	movs	r3, #0
 80067cc:	220a      	movs	r2, #10
 80067ce:	4648      	mov	r0, r9
 80067d0:	f000 f968 	bl	8006aa4 <__multadd>
 80067d4:	9002      	str	r0, [sp, #8]
 80067d6:	e7eb      	b.n	80067b0 <_dtoa_r+0xb70>
 80067d8:	08007980 	.word	0x08007980
 80067dc:	08007904 	.word	0x08007904

080067e0 <_free_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4605      	mov	r5, r0
 80067e4:	2900      	cmp	r1, #0
 80067e6:	d041      	beq.n	800686c <_free_r+0x8c>
 80067e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ec:	1f0c      	subs	r4, r1, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	18e4      	addlt	r4, r4, r3
 80067f4:	f000 f8e8 	bl	80069c8 <__malloc_lock>
 80067f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <_free_r+0x90>)
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	b933      	cbnz	r3, 800680c <_free_r+0x2c>
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	4628      	mov	r0, r5
 8006804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006808:	f000 b8e4 	b.w	80069d4 <__malloc_unlock>
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x42>
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	1821      	adds	r1, r4, r0
 8006814:	428b      	cmp	r3, r1
 8006816:	bf01      	itttt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	1809      	addeq	r1, r1, r0
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	e7ed      	b.n	80067fe <_free_r+0x1e>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x4c>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x42>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1850      	adds	r0, r2, r1
 8006830:	42a0      	cmp	r0, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x6c>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	4401      	add	r1, r0
 8006838:	1850      	adds	r0, r2, r1
 800683a:	4283      	cmp	r3, r0
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1e0      	bne.n	8006802 <_free_r+0x22>
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4408      	add	r0, r1
 8006848:	6010      	str	r0, [r2, #0]
 800684a:	e7da      	b.n	8006802 <_free_r+0x22>
 800684c:	d902      	bls.n	8006854 <_free_r+0x74>
 800684e:	230c      	movs	r3, #12
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	e7d6      	b.n	8006802 <_free_r+0x22>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	1821      	adds	r1, r4, r0
 8006858:	428b      	cmp	r3, r1
 800685a:	bf04      	itt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	bf04      	itt	eq
 8006864:	1809      	addeq	r1, r1, r0
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	6054      	str	r4, [r2, #4]
 800686a:	e7ca      	b.n	8006802 <_free_r+0x22>
 800686c:	bd38      	pop	{r3, r4, r5, pc}
 800686e:	bf00      	nop
 8006870:	20000414 	.word	0x20000414

08006874 <malloc>:
 8006874:	4b02      	ldr	r3, [pc, #8]	@ (8006880 <malloc+0xc>)
 8006876:	4601      	mov	r1, r0
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f000 b825 	b.w	80068c8 <_malloc_r>
 800687e:	bf00      	nop
 8006880:	20000018 	.word	0x20000018

08006884 <sbrk_aligned>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4e0f      	ldr	r6, [pc, #60]	@ (80068c4 <sbrk_aligned+0x40>)
 8006888:	460c      	mov	r4, r1
 800688a:	6831      	ldr	r1, [r6, #0]
 800688c:	4605      	mov	r5, r0
 800688e:	b911      	cbnz	r1, 8006896 <sbrk_aligned+0x12>
 8006890:	f000 fe92 	bl	80075b8 <_sbrk_r>
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f000 fe8d 	bl	80075b8 <_sbrk_r>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d103      	bne.n	80068aa <sbrk_aligned+0x26>
 80068a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80068a6:	4620      	mov	r0, r4
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	f024 0403 	bic.w	r4, r4, #3
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d0f8      	beq.n	80068a6 <sbrk_aligned+0x22>
 80068b4:	1a21      	subs	r1, r4, r0
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fe7e 	bl	80075b8 <_sbrk_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d1f2      	bne.n	80068a6 <sbrk_aligned+0x22>
 80068c0:	e7ef      	b.n	80068a2 <sbrk_aligned+0x1e>
 80068c2:	bf00      	nop
 80068c4:	20000410 	.word	0x20000410

080068c8 <_malloc_r>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	1ccd      	adds	r5, r1, #3
 80068ce:	f025 0503 	bic.w	r5, r5, #3
 80068d2:	3508      	adds	r5, #8
 80068d4:	2d0c      	cmp	r5, #12
 80068d6:	bf38      	it	cc
 80068d8:	250c      	movcc	r5, #12
 80068da:	2d00      	cmp	r5, #0
 80068dc:	4606      	mov	r6, r0
 80068de:	db01      	blt.n	80068e4 <_malloc_r+0x1c>
 80068e0:	42a9      	cmp	r1, r5
 80068e2:	d904      	bls.n	80068ee <_malloc_r+0x26>
 80068e4:	230c      	movs	r3, #12
 80068e6:	6033      	str	r3, [r6, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c4 <_malloc_r+0xfc>
 80068f2:	f000 f869 	bl	80069c8 <__malloc_lock>
 80068f6:	f8d8 3000 	ldr.w	r3, [r8]
 80068fa:	461c      	mov	r4, r3
 80068fc:	bb44      	cbnz	r4, 8006950 <_malloc_r+0x88>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ffbf 	bl	8006884 <sbrk_aligned>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	4604      	mov	r4, r0
 800690a:	d158      	bne.n	80069be <_malloc_r+0xf6>
 800690c:	f8d8 4000 	ldr.w	r4, [r8]
 8006910:	4627      	mov	r7, r4
 8006912:	2f00      	cmp	r7, #0
 8006914:	d143      	bne.n	800699e <_malloc_r+0xd6>
 8006916:	2c00      	cmp	r4, #0
 8006918:	d04b      	beq.n	80069b2 <_malloc_r+0xea>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	4639      	mov	r1, r7
 800691e:	4630      	mov	r0, r6
 8006920:	eb04 0903 	add.w	r9, r4, r3
 8006924:	f000 fe48 	bl	80075b8 <_sbrk_r>
 8006928:	4581      	cmp	r9, r0
 800692a:	d142      	bne.n	80069b2 <_malloc_r+0xea>
 800692c:	6821      	ldr	r1, [r4, #0]
 800692e:	1a6d      	subs	r5, r5, r1
 8006930:	4629      	mov	r1, r5
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff ffa6 	bl	8006884 <sbrk_aligned>
 8006938:	3001      	adds	r0, #1
 800693a:	d03a      	beq.n	80069b2 <_malloc_r+0xea>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	442b      	add	r3, r5
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	f8d8 3000 	ldr.w	r3, [r8]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	bb62      	cbnz	r2, 80069a4 <_malloc_r+0xdc>
 800694a:	f8c8 7000 	str.w	r7, [r8]
 800694e:	e00f      	b.n	8006970 <_malloc_r+0xa8>
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	1b52      	subs	r2, r2, r5
 8006954:	d420      	bmi.n	8006998 <_malloc_r+0xd0>
 8006956:	2a0b      	cmp	r2, #11
 8006958:	d917      	bls.n	800698a <_malloc_r+0xc2>
 800695a:	1961      	adds	r1, r4, r5
 800695c:	42a3      	cmp	r3, r4
 800695e:	6025      	str	r5, [r4, #0]
 8006960:	bf18      	it	ne
 8006962:	6059      	strne	r1, [r3, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	bf08      	it	eq
 8006968:	f8c8 1000 	streq.w	r1, [r8]
 800696c:	5162      	str	r2, [r4, r5]
 800696e:	604b      	str	r3, [r1, #4]
 8006970:	4630      	mov	r0, r6
 8006972:	f000 f82f 	bl	80069d4 <__malloc_unlock>
 8006976:	f104 000b 	add.w	r0, r4, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	f020 0007 	bic.w	r0, r0, #7
 8006980:	1ac2      	subs	r2, r0, r3
 8006982:	bf1c      	itt	ne
 8006984:	1a1b      	subne	r3, r3, r0
 8006986:	50a3      	strne	r3, [r4, r2]
 8006988:	e7af      	b.n	80068ea <_malloc_r+0x22>
 800698a:	6862      	ldr	r2, [r4, #4]
 800698c:	42a3      	cmp	r3, r4
 800698e:	bf0c      	ite	eq
 8006990:	f8c8 2000 	streq.w	r2, [r8]
 8006994:	605a      	strne	r2, [r3, #4]
 8006996:	e7eb      	b.n	8006970 <_malloc_r+0xa8>
 8006998:	4623      	mov	r3, r4
 800699a:	6864      	ldr	r4, [r4, #4]
 800699c:	e7ae      	b.n	80068fc <_malloc_r+0x34>
 800699e:	463c      	mov	r4, r7
 80069a0:	687f      	ldr	r7, [r7, #4]
 80069a2:	e7b6      	b.n	8006912 <_malloc_r+0x4a>
 80069a4:	461a      	mov	r2, r3
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d1fb      	bne.n	80069a4 <_malloc_r+0xdc>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6053      	str	r3, [r2, #4]
 80069b0:	e7de      	b.n	8006970 <_malloc_r+0xa8>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 f80c 	bl	80069d4 <__malloc_unlock>
 80069bc:	e794      	b.n	80068e8 <_malloc_r+0x20>
 80069be:	6005      	str	r5, [r0, #0]
 80069c0:	e7d6      	b.n	8006970 <_malloc_r+0xa8>
 80069c2:	bf00      	nop
 80069c4:	20000414 	.word	0x20000414

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	@ (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff b8ae 	b.w	8005b2a <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	2000040c 	.word	0x2000040c

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff b8a9 	b.w	8005b2c <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	2000040c 	.word	0x2000040c

080069e0 <_Balloc>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	69c6      	ldr	r6, [r0, #28]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	b976      	cbnz	r6, 8006a08 <_Balloc+0x28>
 80069ea:	2010      	movs	r0, #16
 80069ec:	f7ff ff42 	bl	8006874 <malloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	61e0      	str	r0, [r4, #28]
 80069f4:	b920      	cbnz	r0, 8006a00 <_Balloc+0x20>
 80069f6:	4b18      	ldr	r3, [pc, #96]	@ (8006a58 <_Balloc+0x78>)
 80069f8:	4818      	ldr	r0, [pc, #96]	@ (8006a5c <_Balloc+0x7c>)
 80069fa:	216b      	movs	r1, #107	@ 0x6b
 80069fc:	f000 fdfa 	bl	80075f4 <__assert_func>
 8006a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a04:	6006      	str	r6, [r0, #0]
 8006a06:	60c6      	str	r6, [r0, #12]
 8006a08:	69e6      	ldr	r6, [r4, #28]
 8006a0a:	68f3      	ldr	r3, [r6, #12]
 8006a0c:	b183      	cbz	r3, 8006a30 <_Balloc+0x50>
 8006a0e:	69e3      	ldr	r3, [r4, #28]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a16:	b9b8      	cbnz	r0, 8006a48 <_Balloc+0x68>
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a1e:	1d72      	adds	r2, r6, #5
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fe04 	bl	8007630 <_calloc_r>
 8006a28:	b160      	cbz	r0, 8006a44 <_Balloc+0x64>
 8006a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a2e:	e00e      	b.n	8006a4e <_Balloc+0x6e>
 8006a30:	2221      	movs	r2, #33	@ 0x21
 8006a32:	2104      	movs	r1, #4
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 fdfb 	bl	8007630 <_calloc_r>
 8006a3a:	69e3      	ldr	r3, [r4, #28]
 8006a3c:	60f0      	str	r0, [r6, #12]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <_Balloc+0x2e>
 8006a44:	2000      	movs	r0, #0
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	6802      	ldr	r2, [r0, #0]
 8006a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a54:	e7f7      	b.n	8006a46 <_Balloc+0x66>
 8006a56:	bf00      	nop
 8006a58:	08007911 	.word	0x08007911
 8006a5c:	08007991 	.word	0x08007991

08006a60 <_Bfree>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	69c6      	ldr	r6, [r0, #28]
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b976      	cbnz	r6, 8006a88 <_Bfree+0x28>
 8006a6a:	2010      	movs	r0, #16
 8006a6c:	f7ff ff02 	bl	8006874 <malloc>
 8006a70:	4602      	mov	r2, r0
 8006a72:	61e8      	str	r0, [r5, #28]
 8006a74:	b920      	cbnz	r0, 8006a80 <_Bfree+0x20>
 8006a76:	4b09      	ldr	r3, [pc, #36]	@ (8006a9c <_Bfree+0x3c>)
 8006a78:	4809      	ldr	r0, [pc, #36]	@ (8006aa0 <_Bfree+0x40>)
 8006a7a:	218f      	movs	r1, #143	@ 0x8f
 8006a7c:	f000 fdba 	bl	80075f4 <__assert_func>
 8006a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a84:	6006      	str	r6, [r0, #0]
 8006a86:	60c6      	str	r6, [r0, #12]
 8006a88:	b13c      	cbz	r4, 8006a9a <_Bfree+0x3a>
 8006a8a:	69eb      	ldr	r3, [r5, #28]
 8006a8c:	6862      	ldr	r2, [r4, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a94:	6021      	str	r1, [r4, #0]
 8006a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	08007911 	.word	0x08007911
 8006aa0:	08007991 	.word	0x08007991

08006aa4 <__multadd>:
 8006aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa8:	690d      	ldr	r5, [r1, #16]
 8006aaa:	4607      	mov	r7, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	461e      	mov	r6, r3
 8006ab0:	f101 0c14 	add.w	ip, r1, #20
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8006aba:	b299      	uxth	r1, r3
 8006abc:	fb02 6101 	mla	r1, r2, r1, r6
 8006ac0:	0c1e      	lsrs	r6, r3, #16
 8006ac2:	0c0b      	lsrs	r3, r1, #16
 8006ac4:	fb02 3306 	mla	r3, r2, r6, r3
 8006ac8:	b289      	uxth	r1, r1
 8006aca:	3001      	adds	r0, #1
 8006acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ad0:	4285      	cmp	r5, r0
 8006ad2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ada:	dcec      	bgt.n	8006ab6 <__multadd+0x12>
 8006adc:	b30e      	cbz	r6, 8006b22 <__multadd+0x7e>
 8006ade:	68a3      	ldr	r3, [r4, #8]
 8006ae0:	42ab      	cmp	r3, r5
 8006ae2:	dc19      	bgt.n	8006b18 <__multadd+0x74>
 8006ae4:	6861      	ldr	r1, [r4, #4]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	3101      	adds	r1, #1
 8006aea:	f7ff ff79 	bl	80069e0 <_Balloc>
 8006aee:	4680      	mov	r8, r0
 8006af0:	b928      	cbnz	r0, 8006afe <__multadd+0x5a>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <__multadd+0x84>)
 8006af6:	480d      	ldr	r0, [pc, #52]	@ (8006b2c <__multadd+0x88>)
 8006af8:	21ba      	movs	r1, #186	@ 0xba
 8006afa:	f000 fd7b 	bl	80075f4 <__assert_func>
 8006afe:	6922      	ldr	r2, [r4, #16]
 8006b00:	3202      	adds	r2, #2
 8006b02:	f104 010c 	add.w	r1, r4, #12
 8006b06:	0092      	lsls	r2, r2, #2
 8006b08:	300c      	adds	r0, #12
 8006b0a:	f000 fd65 	bl	80075d8 <memcpy>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ffa5 	bl	8006a60 <_Bfree>
 8006b16:	4644      	mov	r4, r8
 8006b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	615e      	str	r6, [r3, #20]
 8006b20:	6125      	str	r5, [r4, #16]
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b28:	08007980 	.word	0x08007980
 8006b2c:	08007991 	.word	0x08007991

08006b30 <__hi0bits>:
 8006b30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b34:	4603      	mov	r3, r0
 8006b36:	bf36      	itet	cc
 8006b38:	0403      	lslcc	r3, r0, #16
 8006b3a:	2000      	movcs	r0, #0
 8006b3c:	2010      	movcc	r0, #16
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	bf3c      	itt	cc
 8006b44:	021b      	lslcc	r3, r3, #8
 8006b46:	3008      	addcc	r0, #8
 8006b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4c:	bf3c      	itt	cc
 8006b4e:	011b      	lslcc	r3, r3, #4
 8006b50:	3004      	addcc	r0, #4
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	bf3c      	itt	cc
 8006b58:	009b      	lslcc	r3, r3, #2
 8006b5a:	3002      	addcc	r0, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db05      	blt.n	8006b6c <__hi0bits+0x3c>
 8006b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b64:	f100 0001 	add.w	r0, r0, #1
 8006b68:	bf08      	it	eq
 8006b6a:	2020      	moveq	r0, #32
 8006b6c:	4770      	bx	lr

08006b6e <__lo0bits>:
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	4602      	mov	r2, r0
 8006b72:	f013 0007 	ands.w	r0, r3, #7
 8006b76:	d00b      	beq.n	8006b90 <__lo0bits+0x22>
 8006b78:	07d9      	lsls	r1, r3, #31
 8006b7a:	d421      	bmi.n	8006bc0 <__lo0bits+0x52>
 8006b7c:	0798      	lsls	r0, r3, #30
 8006b7e:	bf49      	itett	mi
 8006b80:	085b      	lsrmi	r3, r3, #1
 8006b82:	089b      	lsrpl	r3, r3, #2
 8006b84:	2001      	movmi	r0, #1
 8006b86:	6013      	strmi	r3, [r2, #0]
 8006b88:	bf5c      	itt	pl
 8006b8a:	6013      	strpl	r3, [r2, #0]
 8006b8c:	2002      	movpl	r0, #2
 8006b8e:	4770      	bx	lr
 8006b90:	b299      	uxth	r1, r3
 8006b92:	b909      	cbnz	r1, 8006b98 <__lo0bits+0x2a>
 8006b94:	0c1b      	lsrs	r3, r3, #16
 8006b96:	2010      	movs	r0, #16
 8006b98:	b2d9      	uxtb	r1, r3
 8006b9a:	b909      	cbnz	r1, 8006ba0 <__lo0bits+0x32>
 8006b9c:	3008      	adds	r0, #8
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	bf04      	itt	eq
 8006ba4:	091b      	lsreq	r3, r3, #4
 8006ba6:	3004      	addeq	r0, #4
 8006ba8:	0799      	lsls	r1, r3, #30
 8006baa:	bf04      	itt	eq
 8006bac:	089b      	lsreq	r3, r3, #2
 8006bae:	3002      	addeq	r0, #2
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d403      	bmi.n	8006bbc <__lo0bits+0x4e>
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	f100 0001 	add.w	r0, r0, #1
 8006bba:	d003      	beq.n	8006bc4 <__lo0bits+0x56>
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	4770      	bx	lr
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr
 8006bc4:	2020      	movs	r0, #32
 8006bc6:	4770      	bx	lr

08006bc8 <__i2b>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	2101      	movs	r1, #1
 8006bce:	f7ff ff07 	bl	80069e0 <_Balloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <__i2b+0x1a>
 8006bd6:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <__i2b+0x24>)
 8006bd8:	4805      	ldr	r0, [pc, #20]	@ (8006bf0 <__i2b+0x28>)
 8006bda:	f240 1145 	movw	r1, #325	@ 0x145
 8006bde:	f000 fd09 	bl	80075f4 <__assert_func>
 8006be2:	2301      	movs	r3, #1
 8006be4:	6144      	str	r4, [r0, #20]
 8006be6:	6103      	str	r3, [r0, #16]
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	bf00      	nop
 8006bec:	08007980 	.word	0x08007980
 8006bf0:	08007991 	.word	0x08007991

08006bf4 <__multiply>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4617      	mov	r7, r2
 8006bfa:	690a      	ldr	r2, [r1, #16]
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	bfa8      	it	ge
 8006c02:	463b      	movge	r3, r7
 8006c04:	4689      	mov	r9, r1
 8006c06:	bfa4      	itt	ge
 8006c08:	460f      	movge	r7, r1
 8006c0a:	4699      	movge	r9, r3
 8006c0c:	693d      	ldr	r5, [r7, #16]
 8006c0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	eb05 060a 	add.w	r6, r5, sl
 8006c1a:	42b3      	cmp	r3, r6
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	bfb8      	it	lt
 8006c20:	3101      	addlt	r1, #1
 8006c22:	f7ff fedd 	bl	80069e0 <_Balloc>
 8006c26:	b930      	cbnz	r0, 8006c36 <__multiply+0x42>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4b41      	ldr	r3, [pc, #260]	@ (8006d30 <__multiply+0x13c>)
 8006c2c:	4841      	ldr	r0, [pc, #260]	@ (8006d34 <__multiply+0x140>)
 8006c2e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c32:	f000 fcdf 	bl	80075f4 <__assert_func>
 8006c36:	f100 0414 	add.w	r4, r0, #20
 8006c3a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006c3e:	4623      	mov	r3, r4
 8006c40:	2200      	movs	r2, #0
 8006c42:	4573      	cmp	r3, lr
 8006c44:	d320      	bcc.n	8006c88 <__multiply+0x94>
 8006c46:	f107 0814 	add.w	r8, r7, #20
 8006c4a:	f109 0114 	add.w	r1, r9, #20
 8006c4e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006c52:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	1beb      	subs	r3, r5, r7
 8006c5a:	3b15      	subs	r3, #21
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	3304      	adds	r3, #4
 8006c62:	3715      	adds	r7, #21
 8006c64:	42bd      	cmp	r5, r7
 8006c66:	bf38      	it	cc
 8006c68:	2304      	movcc	r3, #4
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	9b02      	ldr	r3, [sp, #8]
 8006c6e:	9103      	str	r1, [sp, #12]
 8006c70:	428b      	cmp	r3, r1
 8006c72:	d80c      	bhi.n	8006c8e <__multiply+0x9a>
 8006c74:	2e00      	cmp	r6, #0
 8006c76:	dd03      	ble.n	8006c80 <__multiply+0x8c>
 8006c78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d055      	beq.n	8006d2c <__multiply+0x138>
 8006c80:	6106      	str	r6, [r0, #16]
 8006c82:	b005      	add	sp, #20
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	f843 2b04 	str.w	r2, [r3], #4
 8006c8c:	e7d9      	b.n	8006c42 <__multiply+0x4e>
 8006c8e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c92:	f1ba 0f00 	cmp.w	sl, #0
 8006c96:	d01f      	beq.n	8006cd8 <__multiply+0xe4>
 8006c98:	46c4      	mov	ip, r8
 8006c9a:	46a1      	mov	r9, r4
 8006c9c:	2700      	movs	r7, #0
 8006c9e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ca2:	f8d9 3000 	ldr.w	r3, [r9]
 8006ca6:	fa1f fb82 	uxth.w	fp, r2
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cb0:	443b      	add	r3, r7
 8006cb2:	f8d9 7000 	ldr.w	r7, [r9]
 8006cb6:	0c12      	lsrs	r2, r2, #16
 8006cb8:	0c3f      	lsrs	r7, r7, #16
 8006cba:	fb0a 7202 	mla	r2, sl, r2, r7
 8006cbe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cc8:	4565      	cmp	r5, ip
 8006cca:	f849 3b04 	str.w	r3, [r9], #4
 8006cce:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006cd2:	d8e4      	bhi.n	8006c9e <__multiply+0xaa>
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	50e7      	str	r7, [r4, r3]
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cde:	3104      	adds	r1, #4
 8006ce0:	f1b9 0f00 	cmp.w	r9, #0
 8006ce4:	d020      	beq.n	8006d28 <__multiply+0x134>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	4647      	mov	r7, r8
 8006cea:	46a4      	mov	ip, r4
 8006cec:	f04f 0a00 	mov.w	sl, #0
 8006cf0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006cf4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006cf8:	fb09 220b 	mla	r2, r9, fp, r2
 8006cfc:	4452      	add	r2, sl
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d04:	f84c 3b04 	str.w	r3, [ip], #4
 8006d08:	f857 3b04 	ldr.w	r3, [r7], #4
 8006d0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d10:	f8bc 3000 	ldrh.w	r3, [ip]
 8006d14:	fb09 330a 	mla	r3, r9, sl, r3
 8006d18:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006d1c:	42bd      	cmp	r5, r7
 8006d1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d22:	d8e5      	bhi.n	8006cf0 <__multiply+0xfc>
 8006d24:	9a01      	ldr	r2, [sp, #4]
 8006d26:	50a3      	str	r3, [r4, r2]
 8006d28:	3404      	adds	r4, #4
 8006d2a:	e79f      	b.n	8006c6c <__multiply+0x78>
 8006d2c:	3e01      	subs	r6, #1
 8006d2e:	e7a1      	b.n	8006c74 <__multiply+0x80>
 8006d30:	08007980 	.word	0x08007980
 8006d34:	08007991 	.word	0x08007991

08006d38 <__pow5mult>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4615      	mov	r5, r2
 8006d3e:	f012 0203 	ands.w	r2, r2, #3
 8006d42:	4607      	mov	r7, r0
 8006d44:	460e      	mov	r6, r1
 8006d46:	d007      	beq.n	8006d58 <__pow5mult+0x20>
 8006d48:	4c25      	ldr	r4, [pc, #148]	@ (8006de0 <__pow5mult+0xa8>)
 8006d4a:	3a01      	subs	r2, #1
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d52:	f7ff fea7 	bl	8006aa4 <__multadd>
 8006d56:	4606      	mov	r6, r0
 8006d58:	10ad      	asrs	r5, r5, #2
 8006d5a:	d03d      	beq.n	8006dd8 <__pow5mult+0xa0>
 8006d5c:	69fc      	ldr	r4, [r7, #28]
 8006d5e:	b97c      	cbnz	r4, 8006d80 <__pow5mult+0x48>
 8006d60:	2010      	movs	r0, #16
 8006d62:	f7ff fd87 	bl	8006874 <malloc>
 8006d66:	4602      	mov	r2, r0
 8006d68:	61f8      	str	r0, [r7, #28]
 8006d6a:	b928      	cbnz	r0, 8006d78 <__pow5mult+0x40>
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <__pow5mult+0xac>)
 8006d6e:	481e      	ldr	r0, [pc, #120]	@ (8006de8 <__pow5mult+0xb0>)
 8006d70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d74:	f000 fc3e 	bl	80075f4 <__assert_func>
 8006d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d7c:	6004      	str	r4, [r0, #0]
 8006d7e:	60c4      	str	r4, [r0, #12]
 8006d80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d88:	b94c      	cbnz	r4, 8006d9e <__pow5mult+0x66>
 8006d8a:	f240 2171 	movw	r1, #625	@ 0x271
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ff1a 	bl	8006bc8 <__i2b>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	07eb      	lsls	r3, r5, #31
 8006da4:	d50a      	bpl.n	8006dbc <__pow5mult+0x84>
 8006da6:	4631      	mov	r1, r6
 8006da8:	4622      	mov	r2, r4
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff ff22 	bl	8006bf4 <__multiply>
 8006db0:	4631      	mov	r1, r6
 8006db2:	4680      	mov	r8, r0
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff fe53 	bl	8006a60 <_Bfree>
 8006dba:	4646      	mov	r6, r8
 8006dbc:	106d      	asrs	r5, r5, #1
 8006dbe:	d00b      	beq.n	8006dd8 <__pow5mult+0xa0>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	b938      	cbnz	r0, 8006dd4 <__pow5mult+0x9c>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7ff ff13 	bl	8006bf4 <__multiply>
 8006dce:	6020      	str	r0, [r4, #0]
 8006dd0:	f8c0 9000 	str.w	r9, [r0]
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	e7e4      	b.n	8006da2 <__pow5mult+0x6a>
 8006dd8:	4630      	mov	r0, r6
 8006dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dde:	bf00      	nop
 8006de0:	08007a44 	.word	0x08007a44
 8006de4:	08007911 	.word	0x08007911
 8006de8:	08007991 	.word	0x08007991

08006dec <__lshift>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	6849      	ldr	r1, [r1, #4]
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	4691      	mov	r9, r2
 8006e00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e04:	f108 0601 	add.w	r6, r8, #1
 8006e08:	42b3      	cmp	r3, r6
 8006e0a:	db0b      	blt.n	8006e24 <__lshift+0x38>
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff fde7 	bl	80069e0 <_Balloc>
 8006e12:	4605      	mov	r5, r0
 8006e14:	b948      	cbnz	r0, 8006e2a <__lshift+0x3e>
 8006e16:	4602      	mov	r2, r0
 8006e18:	4b28      	ldr	r3, [pc, #160]	@ (8006ebc <__lshift+0xd0>)
 8006e1a:	4829      	ldr	r0, [pc, #164]	@ (8006ec0 <__lshift+0xd4>)
 8006e1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e20:	f000 fbe8 	bl	80075f4 <__assert_func>
 8006e24:	3101      	adds	r1, #1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	e7ee      	b.n	8006e08 <__lshift+0x1c>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f100 0114 	add.w	r1, r0, #20
 8006e30:	f100 0210 	add.w	r2, r0, #16
 8006e34:	4618      	mov	r0, r3
 8006e36:	4553      	cmp	r3, sl
 8006e38:	db33      	blt.n	8006ea2 <__lshift+0xb6>
 8006e3a:	6920      	ldr	r0, [r4, #16]
 8006e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e40:	f104 0314 	add.w	r3, r4, #20
 8006e44:	f019 091f 	ands.w	r9, r9, #31
 8006e48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e50:	d02b      	beq.n	8006eaa <__lshift+0xbe>
 8006e52:	f1c9 0e20 	rsb	lr, r9, #32
 8006e56:	468a      	mov	sl, r1
 8006e58:	2200      	movs	r2, #0
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e60:	4310      	orrs	r0, r2
 8006e62:	f84a 0b04 	str.w	r0, [sl], #4
 8006e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e6a:	459c      	cmp	ip, r3
 8006e6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e70:	d8f3      	bhi.n	8006e5a <__lshift+0x6e>
 8006e72:	ebac 0304 	sub.w	r3, ip, r4
 8006e76:	3b15      	subs	r3, #21
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	f104 0015 	add.w	r0, r4, #21
 8006e82:	4560      	cmp	r0, ip
 8006e84:	bf88      	it	hi
 8006e86:	2304      	movhi	r3, #4
 8006e88:	50ca      	str	r2, [r1, r3]
 8006e8a:	b10a      	cbz	r2, 8006e90 <__lshift+0xa4>
 8006e8c:	f108 0602 	add.w	r6, r8, #2
 8006e90:	3e01      	subs	r6, #1
 8006e92:	4638      	mov	r0, r7
 8006e94:	612e      	str	r6, [r5, #16]
 8006e96:	4621      	mov	r1, r4
 8006e98:	f7ff fde2 	bl	8006a60 <_Bfree>
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	e7c5      	b.n	8006e36 <__lshift+0x4a>
 8006eaa:	3904      	subs	r1, #4
 8006eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb4:	459c      	cmp	ip, r3
 8006eb6:	d8f9      	bhi.n	8006eac <__lshift+0xc0>
 8006eb8:	e7ea      	b.n	8006e90 <__lshift+0xa4>
 8006eba:	bf00      	nop
 8006ebc:	08007980 	.word	0x08007980
 8006ec0:	08007991 	.word	0x08007991

08006ec4 <__mcmp>:
 8006ec4:	690a      	ldr	r2, [r1, #16]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	6900      	ldr	r0, [r0, #16]
 8006eca:	1a80      	subs	r0, r0, r2
 8006ecc:	b530      	push	{r4, r5, lr}
 8006ece:	d10e      	bne.n	8006eee <__mcmp+0x2a>
 8006ed0:	3314      	adds	r3, #20
 8006ed2:	3114      	adds	r1, #20
 8006ed4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ed8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006edc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ee0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ee4:	4295      	cmp	r5, r2
 8006ee6:	d003      	beq.n	8006ef0 <__mcmp+0x2c>
 8006ee8:	d205      	bcs.n	8006ef6 <__mcmp+0x32>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006eee:	bd30      	pop	{r4, r5, pc}
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d3f3      	bcc.n	8006edc <__mcmp+0x18>
 8006ef4:	e7fb      	b.n	8006eee <__mcmp+0x2a>
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	e7f9      	b.n	8006eee <__mcmp+0x2a>
	...

08006efc <__mdiff>:
 8006efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	4689      	mov	r9, r1
 8006f02:	4606      	mov	r6, r0
 8006f04:	4611      	mov	r1, r2
 8006f06:	4648      	mov	r0, r9
 8006f08:	4614      	mov	r4, r2
 8006f0a:	f7ff ffdb 	bl	8006ec4 <__mcmp>
 8006f0e:	1e05      	subs	r5, r0, #0
 8006f10:	d112      	bne.n	8006f38 <__mdiff+0x3c>
 8006f12:	4629      	mov	r1, r5
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff fd63 	bl	80069e0 <_Balloc>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	b928      	cbnz	r0, 8006f2a <__mdiff+0x2e>
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800701c <__mdiff+0x120>)
 8006f20:	f240 2137 	movw	r1, #567	@ 0x237
 8006f24:	483e      	ldr	r0, [pc, #248]	@ (8007020 <__mdiff+0x124>)
 8006f26:	f000 fb65 	bl	80075f4 <__assert_func>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f30:	4610      	mov	r0, r2
 8006f32:	b003      	add	sp, #12
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	bfbc      	itt	lt
 8006f3a:	464b      	movlt	r3, r9
 8006f3c:	46a1      	movlt	r9, r4
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f44:	bfba      	itte	lt
 8006f46:	461c      	movlt	r4, r3
 8006f48:	2501      	movlt	r5, #1
 8006f4a:	2500      	movge	r5, #0
 8006f4c:	f7ff fd48 	bl	80069e0 <_Balloc>
 8006f50:	4602      	mov	r2, r0
 8006f52:	b918      	cbnz	r0, 8006f5c <__mdiff+0x60>
 8006f54:	4b31      	ldr	r3, [pc, #196]	@ (800701c <__mdiff+0x120>)
 8006f56:	f240 2145 	movw	r1, #581	@ 0x245
 8006f5a:	e7e3      	b.n	8006f24 <__mdiff+0x28>
 8006f5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f60:	6926      	ldr	r6, [r4, #16]
 8006f62:	60c5      	str	r5, [r0, #12]
 8006f64:	f109 0310 	add.w	r3, r9, #16
 8006f68:	f109 0514 	add.w	r5, r9, #20
 8006f6c:	f104 0e14 	add.w	lr, r4, #20
 8006f70:	f100 0b14 	add.w	fp, r0, #20
 8006f74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	46d9      	mov	r9, fp
 8006f80:	f04f 0c00 	mov.w	ip, #0
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	fa1f f38a 	uxth.w	r3, sl
 8006f94:	4619      	mov	r1, r3
 8006f96:	b283      	uxth	r3, r0
 8006f98:	1acb      	subs	r3, r1, r3
 8006f9a:	0c00      	lsrs	r0, r0, #16
 8006f9c:	4463      	add	r3, ip
 8006f9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fa2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fac:	4576      	cmp	r6, lr
 8006fae:	f849 3b04 	str.w	r3, [r9], #4
 8006fb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fb6:	d8e5      	bhi.n	8006f84 <__mdiff+0x88>
 8006fb8:	1b33      	subs	r3, r6, r4
 8006fba:	3b15      	subs	r3, #21
 8006fbc:	f023 0303 	bic.w	r3, r3, #3
 8006fc0:	3415      	adds	r4, #21
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	bf38      	it	cc
 8006fc8:	2304      	movcc	r3, #4
 8006fca:	441d      	add	r5, r3
 8006fcc:	445b      	add	r3, fp
 8006fce:	461e      	mov	r6, r3
 8006fd0:	462c      	mov	r4, r5
 8006fd2:	4544      	cmp	r4, r8
 8006fd4:	d30e      	bcc.n	8006ff4 <__mdiff+0xf8>
 8006fd6:	f108 0103 	add.w	r1, r8, #3
 8006fda:	1b49      	subs	r1, r1, r5
 8006fdc:	f021 0103 	bic.w	r1, r1, #3
 8006fe0:	3d03      	subs	r5, #3
 8006fe2:	45a8      	cmp	r8, r5
 8006fe4:	bf38      	it	cc
 8006fe6:	2100      	movcc	r1, #0
 8006fe8:	440b      	add	r3, r1
 8006fea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fee:	b191      	cbz	r1, 8007016 <__mdiff+0x11a>
 8006ff0:	6117      	str	r7, [r2, #16]
 8006ff2:	e79d      	b.n	8006f30 <__mdiff+0x34>
 8006ff4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ff8:	46e6      	mov	lr, ip
 8006ffa:	0c08      	lsrs	r0, r1, #16
 8006ffc:	fa1c fc81 	uxtah	ip, ip, r1
 8007000:	4471      	add	r1, lr
 8007002:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007006:	b289      	uxth	r1, r1
 8007008:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800700c:	f846 1b04 	str.w	r1, [r6], #4
 8007010:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007014:	e7dd      	b.n	8006fd2 <__mdiff+0xd6>
 8007016:	3f01      	subs	r7, #1
 8007018:	e7e7      	b.n	8006fea <__mdiff+0xee>
 800701a:	bf00      	nop
 800701c:	08007980 	.word	0x08007980
 8007020:	08007991 	.word	0x08007991

08007024 <__d2b>:
 8007024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007028:	460f      	mov	r7, r1
 800702a:	2101      	movs	r1, #1
 800702c:	ec59 8b10 	vmov	r8, r9, d0
 8007030:	4616      	mov	r6, r2
 8007032:	f7ff fcd5 	bl	80069e0 <_Balloc>
 8007036:	4604      	mov	r4, r0
 8007038:	b930      	cbnz	r0, 8007048 <__d2b+0x24>
 800703a:	4602      	mov	r2, r0
 800703c:	4b23      	ldr	r3, [pc, #140]	@ (80070cc <__d2b+0xa8>)
 800703e:	4824      	ldr	r0, [pc, #144]	@ (80070d0 <__d2b+0xac>)
 8007040:	f240 310f 	movw	r1, #783	@ 0x30f
 8007044:	f000 fad6 	bl	80075f4 <__assert_func>
 8007048:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800704c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007050:	b10d      	cbz	r5, 8007056 <__d2b+0x32>
 8007052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f1b8 0300 	subs.w	r3, r8, #0
 800705c:	d023      	beq.n	80070a6 <__d2b+0x82>
 800705e:	4668      	mov	r0, sp
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	f7ff fd84 	bl	8006b6e <__lo0bits>
 8007066:	e9dd 1200 	ldrd	r1, r2, [sp]
 800706a:	b1d0      	cbz	r0, 80070a2 <__d2b+0x7e>
 800706c:	f1c0 0320 	rsb	r3, r0, #32
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	430b      	orrs	r3, r1
 8007076:	40c2      	lsrs	r2, r0
 8007078:	6163      	str	r3, [r4, #20]
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	61a3      	str	r3, [r4, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf0c      	ite	eq
 8007084:	2201      	moveq	r2, #1
 8007086:	2202      	movne	r2, #2
 8007088:	6122      	str	r2, [r4, #16]
 800708a:	b1a5      	cbz	r5, 80070b6 <__d2b+0x92>
 800708c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007090:	4405      	add	r5, r0
 8007092:	603d      	str	r5, [r7, #0]
 8007094:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007098:	6030      	str	r0, [r6, #0]
 800709a:	4620      	mov	r0, r4
 800709c:	b003      	add	sp, #12
 800709e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070a2:	6161      	str	r1, [r4, #20]
 80070a4:	e7ea      	b.n	800707c <__d2b+0x58>
 80070a6:	a801      	add	r0, sp, #4
 80070a8:	f7ff fd61 	bl	8006b6e <__lo0bits>
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	6163      	str	r3, [r4, #20]
 80070b0:	3020      	adds	r0, #32
 80070b2:	2201      	movs	r2, #1
 80070b4:	e7e8      	b.n	8007088 <__d2b+0x64>
 80070b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070be:	6038      	str	r0, [r7, #0]
 80070c0:	6918      	ldr	r0, [r3, #16]
 80070c2:	f7ff fd35 	bl	8006b30 <__hi0bits>
 80070c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070ca:	e7e5      	b.n	8007098 <__d2b+0x74>
 80070cc:	08007980 	.word	0x08007980
 80070d0:	08007991 	.word	0x08007991

080070d4 <__sfputc_r>:
 80070d4:	6893      	ldr	r3, [r2, #8]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	b410      	push	{r4}
 80070dc:	6093      	str	r3, [r2, #8]
 80070de:	da08      	bge.n	80070f2 <__sfputc_r+0x1e>
 80070e0:	6994      	ldr	r4, [r2, #24]
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	db01      	blt.n	80070ea <__sfputc_r+0x16>
 80070e6:	290a      	cmp	r1, #10
 80070e8:	d103      	bne.n	80070f2 <__sfputc_r+0x1e>
 80070ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ee:	f7fe bc0a 	b.w	8005906 <__swbuf_r>
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	1c58      	adds	r0, r3, #1
 80070f6:	6010      	str	r0, [r2, #0]
 80070f8:	7019      	strb	r1, [r3, #0]
 80070fa:	4608      	mov	r0, r1
 80070fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007100:	4770      	bx	lr

08007102 <__sfputs_r>:
 8007102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007104:	4606      	mov	r6, r0
 8007106:	460f      	mov	r7, r1
 8007108:	4614      	mov	r4, r2
 800710a:	18d5      	adds	r5, r2, r3
 800710c:	42ac      	cmp	r4, r5
 800710e:	d101      	bne.n	8007114 <__sfputs_r+0x12>
 8007110:	2000      	movs	r0, #0
 8007112:	e007      	b.n	8007124 <__sfputs_r+0x22>
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	463a      	mov	r2, r7
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffda 	bl	80070d4 <__sfputc_r>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d1f3      	bne.n	800710c <__sfputs_r+0xa>
 8007124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007128 <_vfiprintf_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	460d      	mov	r5, r1
 800712e:	b09d      	sub	sp, #116	@ 0x74
 8007130:	4614      	mov	r4, r2
 8007132:	4698      	mov	r8, r3
 8007134:	4606      	mov	r6, r0
 8007136:	b118      	cbz	r0, 8007140 <_vfiprintf_r+0x18>
 8007138:	6a03      	ldr	r3, [r0, #32]
 800713a:	b90b      	cbnz	r3, 8007140 <_vfiprintf_r+0x18>
 800713c:	f7fe fafa 	bl	8005734 <__sinit>
 8007140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007142:	07d9      	lsls	r1, r3, #31
 8007144:	d405      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	059a      	lsls	r2, r3, #22
 800714a:	d402      	bmi.n	8007152 <_vfiprintf_r+0x2a>
 800714c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800714e:	f7fe fcec 	bl	8005b2a <__retarget_lock_acquire_recursive>
 8007152:	89ab      	ldrh	r3, [r5, #12]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	d501      	bpl.n	800715c <_vfiprintf_r+0x34>
 8007158:	692b      	ldr	r3, [r5, #16]
 800715a:	b99b      	cbnz	r3, 8007184 <_vfiprintf_r+0x5c>
 800715c:	4629      	mov	r1, r5
 800715e:	4630      	mov	r0, r6
 8007160:	f7fe fc10 	bl	8005984 <__swsetup_r>
 8007164:	b170      	cbz	r0, 8007184 <_vfiprintf_r+0x5c>
 8007166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007168:	07dc      	lsls	r4, r3, #31
 800716a:	d504      	bpl.n	8007176 <_vfiprintf_r+0x4e>
 800716c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007170:	b01d      	add	sp, #116	@ 0x74
 8007172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007176:	89ab      	ldrh	r3, [r5, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d4f7      	bmi.n	800716c <_vfiprintf_r+0x44>
 800717c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800717e:	f7fe fcd5 	bl	8005b2c <__retarget_lock_release_recursive>
 8007182:	e7f3      	b.n	800716c <_vfiprintf_r+0x44>
 8007184:	2300      	movs	r3, #0
 8007186:	9309      	str	r3, [sp, #36]	@ 0x24
 8007188:	2320      	movs	r3, #32
 800718a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800718e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007192:	2330      	movs	r3, #48	@ 0x30
 8007194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007344 <_vfiprintf_r+0x21c>
 8007198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800719c:	f04f 0901 	mov.w	r9, #1
 80071a0:	4623      	mov	r3, r4
 80071a2:	469a      	mov	sl, r3
 80071a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a8:	b10a      	cbz	r2, 80071ae <_vfiprintf_r+0x86>
 80071aa:	2a25      	cmp	r2, #37	@ 0x25
 80071ac:	d1f9      	bne.n	80071a2 <_vfiprintf_r+0x7a>
 80071ae:	ebba 0b04 	subs.w	fp, sl, r4
 80071b2:	d00b      	beq.n	80071cc <_vfiprintf_r+0xa4>
 80071b4:	465b      	mov	r3, fp
 80071b6:	4622      	mov	r2, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ffa1 	bl	8007102 <__sfputs_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	f000 80a7 	beq.w	8007314 <_vfiprintf_r+0x1ec>
 80071c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c8:	445a      	add	r2, fp
 80071ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80071cc:	f89a 3000 	ldrb.w	r3, [sl]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 809f 	beq.w	8007314 <_vfiprintf_r+0x1ec>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	f10a 0a01 	add.w	sl, sl, #1
 80071e4:	9304      	str	r3, [sp, #16]
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80071ee:	4654      	mov	r4, sl
 80071f0:	2205      	movs	r2, #5
 80071f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f6:	4853      	ldr	r0, [pc, #332]	@ (8007344 <_vfiprintf_r+0x21c>)
 80071f8:	f7f8 ffea 	bl	80001d0 <memchr>
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	b9d8      	cbnz	r0, 8007238 <_vfiprintf_r+0x110>
 8007200:	06d1      	lsls	r1, r2, #27
 8007202:	bf44      	itt	mi
 8007204:	2320      	movmi	r3, #32
 8007206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720a:	0713      	lsls	r3, r2, #28
 800720c:	bf44      	itt	mi
 800720e:	232b      	movmi	r3, #43	@ 0x2b
 8007210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007214:	f89a 3000 	ldrb.w	r3, [sl]
 8007218:	2b2a      	cmp	r3, #42	@ 0x2a
 800721a:	d015      	beq.n	8007248 <_vfiprintf_r+0x120>
 800721c:	9a07      	ldr	r2, [sp, #28]
 800721e:	4654      	mov	r4, sl
 8007220:	2000      	movs	r0, #0
 8007222:	f04f 0c0a 	mov.w	ip, #10
 8007226:	4621      	mov	r1, r4
 8007228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722c:	3b30      	subs	r3, #48	@ 0x30
 800722e:	2b09      	cmp	r3, #9
 8007230:	d94b      	bls.n	80072ca <_vfiprintf_r+0x1a2>
 8007232:	b1b0      	cbz	r0, 8007262 <_vfiprintf_r+0x13a>
 8007234:	9207      	str	r2, [sp, #28]
 8007236:	e014      	b.n	8007262 <_vfiprintf_r+0x13a>
 8007238:	eba0 0308 	sub.w	r3, r0, r8
 800723c:	fa09 f303 	lsl.w	r3, r9, r3
 8007240:	4313      	orrs	r3, r2
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	46a2      	mov	sl, r4
 8007246:	e7d2      	b.n	80071ee <_vfiprintf_r+0xc6>
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	1d19      	adds	r1, r3, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	9103      	str	r1, [sp, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	bfbb      	ittet	lt
 8007254:	425b      	neglt	r3, r3
 8007256:	f042 0202 	orrlt.w	r2, r2, #2
 800725a:	9307      	strge	r3, [sp, #28]
 800725c:	9307      	strlt	r3, [sp, #28]
 800725e:	bfb8      	it	lt
 8007260:	9204      	strlt	r2, [sp, #16]
 8007262:	7823      	ldrb	r3, [r4, #0]
 8007264:	2b2e      	cmp	r3, #46	@ 0x2e
 8007266:	d10a      	bne.n	800727e <_vfiprintf_r+0x156>
 8007268:	7863      	ldrb	r3, [r4, #1]
 800726a:	2b2a      	cmp	r3, #42	@ 0x2a
 800726c:	d132      	bne.n	80072d4 <_vfiprintf_r+0x1ac>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9203      	str	r2, [sp, #12]
 8007276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800727a:	3402      	adds	r4, #2
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007354 <_vfiprintf_r+0x22c>
 8007282:	7821      	ldrb	r1, [r4, #0]
 8007284:	2203      	movs	r2, #3
 8007286:	4650      	mov	r0, sl
 8007288:	f7f8 ffa2 	bl	80001d0 <memchr>
 800728c:	b138      	cbz	r0, 800729e <_vfiprintf_r+0x176>
 800728e:	9b04      	ldr	r3, [sp, #16]
 8007290:	eba0 000a 	sub.w	r0, r0, sl
 8007294:	2240      	movs	r2, #64	@ 0x40
 8007296:	4082      	lsls	r2, r0
 8007298:	4313      	orrs	r3, r2
 800729a:	3401      	adds	r4, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	4829      	ldr	r0, [pc, #164]	@ (8007348 <_vfiprintf_r+0x220>)
 80072a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072a8:	2206      	movs	r2, #6
 80072aa:	f7f8 ff91 	bl	80001d0 <memchr>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d03f      	beq.n	8007332 <_vfiprintf_r+0x20a>
 80072b2:	4b26      	ldr	r3, [pc, #152]	@ (800734c <_vfiprintf_r+0x224>)
 80072b4:	bb1b      	cbnz	r3, 80072fe <_vfiprintf_r+0x1d6>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	3307      	adds	r3, #7
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	3308      	adds	r3, #8
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c4:	443b      	add	r3, r7
 80072c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c8:	e76a      	b.n	80071a0 <_vfiprintf_r+0x78>
 80072ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80072ce:	460c      	mov	r4, r1
 80072d0:	2001      	movs	r0, #1
 80072d2:	e7a8      	b.n	8007226 <_vfiprintf_r+0xfe>
 80072d4:	2300      	movs	r3, #0
 80072d6:	3401      	adds	r4, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	4619      	mov	r1, r3
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4620      	mov	r0, r4
 80072e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e6:	3a30      	subs	r2, #48	@ 0x30
 80072e8:	2a09      	cmp	r2, #9
 80072ea:	d903      	bls.n	80072f4 <_vfiprintf_r+0x1cc>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0c6      	beq.n	800727e <_vfiprintf_r+0x156>
 80072f0:	9105      	str	r1, [sp, #20]
 80072f2:	e7c4      	b.n	800727e <_vfiprintf_r+0x156>
 80072f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f8:	4604      	mov	r4, r0
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7f0      	b.n	80072e0 <_vfiprintf_r+0x1b8>
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	462a      	mov	r2, r5
 8007304:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <_vfiprintf_r+0x228>)
 8007306:	a904      	add	r1, sp, #16
 8007308:	4630      	mov	r0, r6
 800730a:	f7fd fdd1 	bl	8004eb0 <_printf_float>
 800730e:	4607      	mov	r7, r0
 8007310:	1c78      	adds	r0, r7, #1
 8007312:	d1d6      	bne.n	80072c2 <_vfiprintf_r+0x19a>
 8007314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007316:	07d9      	lsls	r1, r3, #31
 8007318:	d405      	bmi.n	8007326 <_vfiprintf_r+0x1fe>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	059a      	lsls	r2, r3, #22
 800731e:	d402      	bmi.n	8007326 <_vfiprintf_r+0x1fe>
 8007320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007322:	f7fe fc03 	bl	8005b2c <__retarget_lock_release_recursive>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	065b      	lsls	r3, r3, #25
 800732a:	f53f af1f 	bmi.w	800716c <_vfiprintf_r+0x44>
 800732e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007330:	e71e      	b.n	8007170 <_vfiprintf_r+0x48>
 8007332:	ab03      	add	r3, sp, #12
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	462a      	mov	r2, r5
 8007338:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <_vfiprintf_r+0x228>)
 800733a:	a904      	add	r1, sp, #16
 800733c:	4630      	mov	r0, r6
 800733e:	f7fe f84f 	bl	80053e0 <_printf_i>
 8007342:	e7e4      	b.n	800730e <_vfiprintf_r+0x1e6>
 8007344:	080079ea 	.word	0x080079ea
 8007348:	080079f4 	.word	0x080079f4
 800734c:	08004eb1 	.word	0x08004eb1
 8007350:	08007103 	.word	0x08007103
 8007354:	080079f0 	.word	0x080079f0

08007358 <__sflush_r>:
 8007358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800735c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007360:	0716      	lsls	r6, r2, #28
 8007362:	4605      	mov	r5, r0
 8007364:	460c      	mov	r4, r1
 8007366:	d454      	bmi.n	8007412 <__sflush_r+0xba>
 8007368:	684b      	ldr	r3, [r1, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	dc02      	bgt.n	8007374 <__sflush_r+0x1c>
 800736e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	dd48      	ble.n	8007406 <__sflush_r+0xae>
 8007374:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007376:	2e00      	cmp	r6, #0
 8007378:	d045      	beq.n	8007406 <__sflush_r+0xae>
 800737a:	2300      	movs	r3, #0
 800737c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007380:	682f      	ldr	r7, [r5, #0]
 8007382:	6a21      	ldr	r1, [r4, #32]
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	d030      	beq.n	80073ea <__sflush_r+0x92>
 8007388:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	0759      	lsls	r1, r3, #29
 800738e:	d505      	bpl.n	800739c <__sflush_r+0x44>
 8007390:	6863      	ldr	r3, [r4, #4]
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007396:	b10b      	cbz	r3, 800739c <__sflush_r+0x44>
 8007398:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073a0:	6a21      	ldr	r1, [r4, #32]
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b0      	blx	r6
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	d106      	bne.n	80073ba <__sflush_r+0x62>
 80073ac:	6829      	ldr	r1, [r5, #0]
 80073ae:	291d      	cmp	r1, #29
 80073b0:	d82b      	bhi.n	800740a <__sflush_r+0xb2>
 80073b2:	4a2a      	ldr	r2, [pc, #168]	@ (800745c <__sflush_r+0x104>)
 80073b4:	40ca      	lsrs	r2, r1
 80073b6:	07d6      	lsls	r6, r2, #31
 80073b8:	d527      	bpl.n	800740a <__sflush_r+0xb2>
 80073ba:	2200      	movs	r2, #0
 80073bc:	6062      	str	r2, [r4, #4]
 80073be:	04d9      	lsls	r1, r3, #19
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	6022      	str	r2, [r4, #0]
 80073c4:	d504      	bpl.n	80073d0 <__sflush_r+0x78>
 80073c6:	1c42      	adds	r2, r0, #1
 80073c8:	d101      	bne.n	80073ce <__sflush_r+0x76>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	b903      	cbnz	r3, 80073d0 <__sflush_r+0x78>
 80073ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80073d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073d2:	602f      	str	r7, [r5, #0]
 80073d4:	b1b9      	cbz	r1, 8007406 <__sflush_r+0xae>
 80073d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073da:	4299      	cmp	r1, r3
 80073dc:	d002      	beq.n	80073e4 <__sflush_r+0x8c>
 80073de:	4628      	mov	r0, r5
 80073e0:	f7ff f9fe 	bl	80067e0 <_free_r>
 80073e4:	2300      	movs	r3, #0
 80073e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80073e8:	e00d      	b.n	8007406 <__sflush_r+0xae>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b0      	blx	r6
 80073f0:	4602      	mov	r2, r0
 80073f2:	1c50      	adds	r0, r2, #1
 80073f4:	d1c9      	bne.n	800738a <__sflush_r+0x32>
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0c6      	beq.n	800738a <__sflush_r+0x32>
 80073fc:	2b1d      	cmp	r3, #29
 80073fe:	d001      	beq.n	8007404 <__sflush_r+0xac>
 8007400:	2b16      	cmp	r3, #22
 8007402:	d11e      	bne.n	8007442 <__sflush_r+0xea>
 8007404:	602f      	str	r7, [r5, #0]
 8007406:	2000      	movs	r0, #0
 8007408:	e022      	b.n	8007450 <__sflush_r+0xf8>
 800740a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800740e:	b21b      	sxth	r3, r3
 8007410:	e01b      	b.n	800744a <__sflush_r+0xf2>
 8007412:	690f      	ldr	r7, [r1, #16]
 8007414:	2f00      	cmp	r7, #0
 8007416:	d0f6      	beq.n	8007406 <__sflush_r+0xae>
 8007418:	0793      	lsls	r3, r2, #30
 800741a:	680e      	ldr	r6, [r1, #0]
 800741c:	bf08      	it	eq
 800741e:	694b      	ldreq	r3, [r1, #20]
 8007420:	600f      	str	r7, [r1, #0]
 8007422:	bf18      	it	ne
 8007424:	2300      	movne	r3, #0
 8007426:	eba6 0807 	sub.w	r8, r6, r7
 800742a:	608b      	str	r3, [r1, #8]
 800742c:	f1b8 0f00 	cmp.w	r8, #0
 8007430:	dde9      	ble.n	8007406 <__sflush_r+0xae>
 8007432:	6a21      	ldr	r1, [r4, #32]
 8007434:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007436:	4643      	mov	r3, r8
 8007438:	463a      	mov	r2, r7
 800743a:	4628      	mov	r0, r5
 800743c:	47b0      	blx	r6
 800743e:	2800      	cmp	r0, #0
 8007440:	dc08      	bgt.n	8007454 <__sflush_r+0xfc>
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007454:	4407      	add	r7, r0
 8007456:	eba8 0800 	sub.w	r8, r8, r0
 800745a:	e7e7      	b.n	800742c <__sflush_r+0xd4>
 800745c:	20400001 	.word	0x20400001

08007460 <_fflush_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	690b      	ldr	r3, [r1, #16]
 8007464:	4605      	mov	r5, r0
 8007466:	460c      	mov	r4, r1
 8007468:	b913      	cbnz	r3, 8007470 <_fflush_r+0x10>
 800746a:	2500      	movs	r5, #0
 800746c:	4628      	mov	r0, r5
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	b118      	cbz	r0, 800747a <_fflush_r+0x1a>
 8007472:	6a03      	ldr	r3, [r0, #32]
 8007474:	b90b      	cbnz	r3, 800747a <_fflush_r+0x1a>
 8007476:	f7fe f95d 	bl	8005734 <__sinit>
 800747a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0f3      	beq.n	800746a <_fflush_r+0xa>
 8007482:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007484:	07d0      	lsls	r0, r2, #31
 8007486:	d404      	bmi.n	8007492 <_fflush_r+0x32>
 8007488:	0599      	lsls	r1, r3, #22
 800748a:	d402      	bmi.n	8007492 <_fflush_r+0x32>
 800748c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748e:	f7fe fb4c 	bl	8005b2a <__retarget_lock_acquire_recursive>
 8007492:	4628      	mov	r0, r5
 8007494:	4621      	mov	r1, r4
 8007496:	f7ff ff5f 	bl	8007358 <__sflush_r>
 800749a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800749c:	07da      	lsls	r2, r3, #31
 800749e:	4605      	mov	r5, r0
 80074a0:	d4e4      	bmi.n	800746c <_fflush_r+0xc>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	059b      	lsls	r3, r3, #22
 80074a6:	d4e1      	bmi.n	800746c <_fflush_r+0xc>
 80074a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074aa:	f7fe fb3f 	bl	8005b2c <__retarget_lock_release_recursive>
 80074ae:	e7dd      	b.n	800746c <_fflush_r+0xc>

080074b0 <__swhatbuf_r>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	460c      	mov	r4, r1
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	b096      	sub	sp, #88	@ 0x58
 80074bc:	4615      	mov	r5, r2
 80074be:	461e      	mov	r6, r3
 80074c0:	da0d      	bge.n	80074de <__swhatbuf_r+0x2e>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074c8:	f04f 0100 	mov.w	r1, #0
 80074cc:	bf14      	ite	ne
 80074ce:	2340      	movne	r3, #64	@ 0x40
 80074d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074d4:	2000      	movs	r0, #0
 80074d6:	6031      	str	r1, [r6, #0]
 80074d8:	602b      	str	r3, [r5, #0]
 80074da:	b016      	add	sp, #88	@ 0x58
 80074dc:	bd70      	pop	{r4, r5, r6, pc}
 80074de:	466a      	mov	r2, sp
 80074e0:	f000 f848 	bl	8007574 <_fstat_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	dbec      	blt.n	80074c2 <__swhatbuf_r+0x12>
 80074e8:	9901      	ldr	r1, [sp, #4]
 80074ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074f2:	4259      	negs	r1, r3
 80074f4:	4159      	adcs	r1, r3
 80074f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074fa:	e7eb      	b.n	80074d4 <__swhatbuf_r+0x24>

080074fc <__smakebuf_r>:
 80074fc:	898b      	ldrh	r3, [r1, #12]
 80074fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007500:	079d      	lsls	r5, r3, #30
 8007502:	4606      	mov	r6, r0
 8007504:	460c      	mov	r4, r1
 8007506:	d507      	bpl.n	8007518 <__smakebuf_r+0x1c>
 8007508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	2301      	movs	r3, #1
 8007512:	6163      	str	r3, [r4, #20]
 8007514:	b003      	add	sp, #12
 8007516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007518:	ab01      	add	r3, sp, #4
 800751a:	466a      	mov	r2, sp
 800751c:	f7ff ffc8 	bl	80074b0 <__swhatbuf_r>
 8007520:	9f00      	ldr	r7, [sp, #0]
 8007522:	4605      	mov	r5, r0
 8007524:	4639      	mov	r1, r7
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff f9ce 	bl	80068c8 <_malloc_r>
 800752c:	b948      	cbnz	r0, 8007542 <__smakebuf_r+0x46>
 800752e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007532:	059a      	lsls	r2, r3, #22
 8007534:	d4ee      	bmi.n	8007514 <__smakebuf_r+0x18>
 8007536:	f023 0303 	bic.w	r3, r3, #3
 800753a:	f043 0302 	orr.w	r3, r3, #2
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	e7e2      	b.n	8007508 <__smakebuf_r+0xc>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	6020      	str	r0, [r4, #0]
 8007546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007552:	b15b      	cbz	r3, 800756c <__smakebuf_r+0x70>
 8007554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007558:	4630      	mov	r0, r6
 800755a:	f000 f81d 	bl	8007598 <_isatty_r>
 800755e:	b128      	cbz	r0, 800756c <__smakebuf_r+0x70>
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	431d      	orrs	r5, r3
 8007570:	81a5      	strh	r5, [r4, #12]
 8007572:	e7cf      	b.n	8007514 <__smakebuf_r+0x18>

08007574 <_fstat_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	@ (8007594 <_fstat_r+0x20>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	4611      	mov	r1, r2
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	f7fa f9cb 	bl	800191c <_fstat>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d102      	bne.n	8007590 <_fstat_r+0x1c>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	b103      	cbz	r3, 8007590 <_fstat_r+0x1c>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	bf00      	nop
 8007594:	20000408 	.word	0x20000408

08007598 <_isatty_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d06      	ldr	r5, [pc, #24]	@ (80075b4 <_isatty_r+0x1c>)
 800759c:	2300      	movs	r3, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	f7fa f9ca 	bl	800193c <_isatty>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_isatty_r+0x1a>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_isatty_r+0x1a>
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000408 	.word	0x20000408

080075b8 <_sbrk_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d06      	ldr	r5, [pc, #24]	@ (80075d4 <_sbrk_r+0x1c>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	602b      	str	r3, [r5, #0]
 80075c4:	f7fa f9d2 	bl	800196c <_sbrk>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_sbrk_r+0x1a>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_sbrk_r+0x1a>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	20000408 	.word	0x20000408

080075d8 <memcpy>:
 80075d8:	440a      	add	r2, r1
 80075da:	4291      	cmp	r1, r2
 80075dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80075e0:	d100      	bne.n	80075e4 <memcpy+0xc>
 80075e2:	4770      	bx	lr
 80075e4:	b510      	push	{r4, lr}
 80075e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ee:	4291      	cmp	r1, r2
 80075f0:	d1f9      	bne.n	80075e6 <memcpy+0xe>
 80075f2:	bd10      	pop	{r4, pc}

080075f4 <__assert_func>:
 80075f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075f6:	4614      	mov	r4, r2
 80075f8:	461a      	mov	r2, r3
 80075fa:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <__assert_func+0x2c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4605      	mov	r5, r0
 8007600:	68d8      	ldr	r0, [r3, #12]
 8007602:	b14c      	cbz	r4, 8007618 <__assert_func+0x24>
 8007604:	4b07      	ldr	r3, [pc, #28]	@ (8007624 <__assert_func+0x30>)
 8007606:	9100      	str	r1, [sp, #0]
 8007608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800760c:	4906      	ldr	r1, [pc, #24]	@ (8007628 <__assert_func+0x34>)
 800760e:	462b      	mov	r3, r5
 8007610:	f000 f842 	bl	8007698 <fiprintf>
 8007614:	f000 f852 	bl	80076bc <abort>
 8007618:	4b04      	ldr	r3, [pc, #16]	@ (800762c <__assert_func+0x38>)
 800761a:	461c      	mov	r4, r3
 800761c:	e7f3      	b.n	8007606 <__assert_func+0x12>
 800761e:	bf00      	nop
 8007620:	20000018 	.word	0x20000018
 8007624:	08007a05 	.word	0x08007a05
 8007628:	08007a12 	.word	0x08007a12
 800762c:	08007a40 	.word	0x08007a40

08007630 <_calloc_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	fba1 5402 	umull	r5, r4, r1, r2
 8007636:	b934      	cbnz	r4, 8007646 <_calloc_r+0x16>
 8007638:	4629      	mov	r1, r5
 800763a:	f7ff f945 	bl	80068c8 <_malloc_r>
 800763e:	4606      	mov	r6, r0
 8007640:	b928      	cbnz	r0, 800764e <_calloc_r+0x1e>
 8007642:	4630      	mov	r0, r6
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	220c      	movs	r2, #12
 8007648:	6002      	str	r2, [r0, #0]
 800764a:	2600      	movs	r6, #0
 800764c:	e7f9      	b.n	8007642 <_calloc_r+0x12>
 800764e:	462a      	mov	r2, r5
 8007650:	4621      	mov	r1, r4
 8007652:	f7fe f9ed 	bl	8005a30 <memset>
 8007656:	e7f4      	b.n	8007642 <_calloc_r+0x12>

08007658 <__ascii_mbtowc>:
 8007658:	b082      	sub	sp, #8
 800765a:	b901      	cbnz	r1, 800765e <__ascii_mbtowc+0x6>
 800765c:	a901      	add	r1, sp, #4
 800765e:	b142      	cbz	r2, 8007672 <__ascii_mbtowc+0x1a>
 8007660:	b14b      	cbz	r3, 8007676 <__ascii_mbtowc+0x1e>
 8007662:	7813      	ldrb	r3, [r2, #0]
 8007664:	600b      	str	r3, [r1, #0]
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	1e10      	subs	r0, r2, #0
 800766a:	bf18      	it	ne
 800766c:	2001      	movne	r0, #1
 800766e:	b002      	add	sp, #8
 8007670:	4770      	bx	lr
 8007672:	4610      	mov	r0, r2
 8007674:	e7fb      	b.n	800766e <__ascii_mbtowc+0x16>
 8007676:	f06f 0001 	mvn.w	r0, #1
 800767a:	e7f8      	b.n	800766e <__ascii_mbtowc+0x16>

0800767c <__ascii_wctomb>:
 800767c:	4603      	mov	r3, r0
 800767e:	4608      	mov	r0, r1
 8007680:	b141      	cbz	r1, 8007694 <__ascii_wctomb+0x18>
 8007682:	2aff      	cmp	r2, #255	@ 0xff
 8007684:	d904      	bls.n	8007690 <__ascii_wctomb+0x14>
 8007686:	228a      	movs	r2, #138	@ 0x8a
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800768e:	4770      	bx	lr
 8007690:	700a      	strb	r2, [r1, #0]
 8007692:	2001      	movs	r0, #1
 8007694:	4770      	bx	lr
	...

08007698 <fiprintf>:
 8007698:	b40e      	push	{r1, r2, r3}
 800769a:	b503      	push	{r0, r1, lr}
 800769c:	4601      	mov	r1, r0
 800769e:	ab03      	add	r3, sp, #12
 80076a0:	4805      	ldr	r0, [pc, #20]	@ (80076b8 <fiprintf+0x20>)
 80076a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a6:	6800      	ldr	r0, [r0, #0]
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	f7ff fd3d 	bl	8007128 <_vfiprintf_r>
 80076ae:	b002      	add	sp, #8
 80076b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076b4:	b003      	add	sp, #12
 80076b6:	4770      	bx	lr
 80076b8:	20000018 	.word	0x20000018

080076bc <abort>:
 80076bc:	b508      	push	{r3, lr}
 80076be:	2006      	movs	r0, #6
 80076c0:	f000 f82c 	bl	800771c <raise>
 80076c4:	2001      	movs	r0, #1
 80076c6:	f7fa f8f5 	bl	80018b4 <_exit>

080076ca <_raise_r>:
 80076ca:	291f      	cmp	r1, #31
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4605      	mov	r5, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	d904      	bls.n	80076de <_raise_r+0x14>
 80076d4:	2316      	movs	r3, #22
 80076d6:	6003      	str	r3, [r0, #0]
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076e0:	b112      	cbz	r2, 80076e8 <_raise_r+0x1e>
 80076e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076e6:	b94b      	cbnz	r3, 80076fc <_raise_r+0x32>
 80076e8:	4628      	mov	r0, r5
 80076ea:	f000 f831 	bl	8007750 <_getpid_r>
 80076ee:	4622      	mov	r2, r4
 80076f0:	4601      	mov	r1, r0
 80076f2:	4628      	mov	r0, r5
 80076f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f8:	f000 b818 	b.w	800772c <_kill_r>
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d00a      	beq.n	8007716 <_raise_r+0x4c>
 8007700:	1c59      	adds	r1, r3, #1
 8007702:	d103      	bne.n	800770c <_raise_r+0x42>
 8007704:	2316      	movs	r3, #22
 8007706:	6003      	str	r3, [r0, #0]
 8007708:	2001      	movs	r0, #1
 800770a:	e7e7      	b.n	80076dc <_raise_r+0x12>
 800770c:	2100      	movs	r1, #0
 800770e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007712:	4620      	mov	r0, r4
 8007714:	4798      	blx	r3
 8007716:	2000      	movs	r0, #0
 8007718:	e7e0      	b.n	80076dc <_raise_r+0x12>
	...

0800771c <raise>:
 800771c:	4b02      	ldr	r3, [pc, #8]	@ (8007728 <raise+0xc>)
 800771e:	4601      	mov	r1, r0
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	f7ff bfd2 	b.w	80076ca <_raise_r>
 8007726:	bf00      	nop
 8007728:	20000018 	.word	0x20000018

0800772c <_kill_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d07      	ldr	r5, [pc, #28]	@ (800774c <_kill_r+0x20>)
 8007730:	2300      	movs	r3, #0
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	4611      	mov	r1, r2
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	f7fa f8ab 	bl	8001894 <_kill>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d102      	bne.n	8007748 <_kill_r+0x1c>
 8007742:	682b      	ldr	r3, [r5, #0]
 8007744:	b103      	cbz	r3, 8007748 <_kill_r+0x1c>
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	bd38      	pop	{r3, r4, r5, pc}
 800774a:	bf00      	nop
 800774c:	20000408 	.word	0x20000408

08007750 <_getpid_r>:
 8007750:	f7fa b898 	b.w	8001884 <_getpid>

08007754 <_init>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr

08007760 <_fini>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr
